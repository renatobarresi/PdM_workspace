
Trabajo_practico_pdM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004520  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  080046d0  080046d0  000146d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ab4  08004ab4  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  08004ab4  08004ab4  00014ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004abc  08004abc  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004abc  08004abc  00014abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ac0  08004ac0  00014ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08004ac4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201fc  2**0
                  CONTENTS
 10 .bss          000001ac  200001fc  200001fc  000201fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003a8  200003a8  000201fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f8f5  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002400  00000000  00000000  0002fb21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008f0  00000000  00000000  00031f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000808  00000000  00000000  00032818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024ede  00000000  00000000  00033020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d042  00000000  00000000  00057efe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d800f  00000000  00000000  00064f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013cf4f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002a90  00000000  00000000  0013cfa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080046b8 	.word	0x080046b8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000200 	.word	0x20000200
 80001ec:	080046b8 	.word	0x080046b8

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005bc:	f000 fac2 	bl	8000b44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c0:	f000 f808 	bl	80005d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c4:	f000 f872 	bl	80006ac <MX_GPIO_Init>
  //MX_USART3_UART_Init();
  //MX_RTC_Init();
  /* USER CODE BEGIN 2 */
  FSM_init();
 80005c8:	f002 fcd4 	bl	8002f74 <FSM_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 FSM_update();
 80005cc:	f002 fce4 	bl	8002f98 <FSM_update>
 80005d0:	e7fc      	b.n	80005cc <main+0x14>
	...

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b094      	sub	sp, #80	; 0x50
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	f107 0320 	add.w	r3, r7, #32
 80005de:	2230      	movs	r2, #48	; 0x30
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f002 ff6e 	bl	80034c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	4b29      	ldr	r3, [pc, #164]	; (80006a4 <SystemClock_Config+0xd0>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	4a28      	ldr	r2, [pc, #160]	; (80006a4 <SystemClock_Config+0xd0>)
 8000602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000606:	6413      	str	r3, [r2, #64]	; 0x40
 8000608:	4b26      	ldr	r3, [pc, #152]	; (80006a4 <SystemClock_Config+0xd0>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000614:	2300      	movs	r3, #0
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	4b23      	ldr	r3, [pc, #140]	; (80006a8 <SystemClock_Config+0xd4>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a22      	ldr	r2, [pc, #136]	; (80006a8 <SystemClock_Config+0xd4>)
 800061e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000622:	6013      	str	r3, [r2, #0]
 8000624:	4b20      	ldr	r3, [pc, #128]	; (80006a8 <SystemClock_Config+0xd4>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000630:	2309      	movs	r3, #9
 8000632:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000634:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000638:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800063a:	2301      	movs	r3, #1
 800063c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063e:	2302      	movs	r3, #2
 8000640:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000642:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000646:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000648:	2304      	movs	r3, #4
 800064a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800064c:	23a8      	movs	r3, #168	; 0xa8
 800064e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000650:	2302      	movs	r3, #2
 8000652:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000654:	2307      	movs	r3, #7
 8000656:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000658:	f107 0320 	add.w	r3, r7, #32
 800065c:	4618      	mov	r0, r3
 800065e:	f000 fdb3 	bl	80011c8 <HAL_RCC_OscConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000668:	f000 f930 	bl	80008cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066c:	230f      	movs	r3, #15
 800066e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000670:	2302      	movs	r3, #2
 8000672:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000678:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800067c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800067e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000682:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	2105      	movs	r1, #5
 800068a:	4618      	mov	r0, r3
 800068c:	f001 f814 	bl	80016b8 <HAL_RCC_ClockConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000696:	f000 f919 	bl	80008cc <Error_Handler>
  }
}
 800069a:	bf00      	nop
 800069c:	3750      	adds	r7, #80	; 0x50
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40007000 	.word	0x40007000

080006ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08c      	sub	sp, #48	; 0x30
 80006b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	61bb      	str	r3, [r7, #24]
 80006c6:	4b7c      	ldr	r3, [pc, #496]	; (80008b8 <MX_GPIO_Init+0x20c>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a7b      	ldr	r2, [pc, #492]	; (80008b8 <MX_GPIO_Init+0x20c>)
 80006cc:	f043 0304 	orr.w	r3, r3, #4
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b79      	ldr	r3, [pc, #484]	; (80008b8 <MX_GPIO_Init+0x20c>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0304 	and.w	r3, r3, #4
 80006da:	61bb      	str	r3, [r7, #24]
 80006dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]
 80006e2:	4b75      	ldr	r3, [pc, #468]	; (80008b8 <MX_GPIO_Init+0x20c>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a74      	ldr	r2, [pc, #464]	; (80008b8 <MX_GPIO_Init+0x20c>)
 80006e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b72      	ldr	r3, [pc, #456]	; (80008b8 <MX_GPIO_Init+0x20c>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006f6:	617b      	str	r3, [r7, #20]
 80006f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
 80006fe:	4b6e      	ldr	r3, [pc, #440]	; (80008b8 <MX_GPIO_Init+0x20c>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a6d      	ldr	r2, [pc, #436]	; (80008b8 <MX_GPIO_Init+0x20c>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b6b      	ldr	r3, [pc, #428]	; (80008b8 <MX_GPIO_Init+0x20c>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	613b      	str	r3, [r7, #16]
 8000714:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	4b67      	ldr	r3, [pc, #412]	; (80008b8 <MX_GPIO_Init+0x20c>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a66      	ldr	r2, [pc, #408]	; (80008b8 <MX_GPIO_Init+0x20c>)
 8000720:	f043 0302 	orr.w	r3, r3, #2
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b64      	ldr	r3, [pc, #400]	; (80008b8 <MX_GPIO_Init+0x20c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0302 	and.w	r3, r3, #2
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	4b60      	ldr	r3, [pc, #384]	; (80008b8 <MX_GPIO_Init+0x20c>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a5f      	ldr	r2, [pc, #380]	; (80008b8 <MX_GPIO_Init+0x20c>)
 800073c:	f043 0308 	orr.w	r3, r3, #8
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b5d      	ldr	r3, [pc, #372]	; (80008b8 <MX_GPIO_Init+0x20c>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0308 	and.w	r3, r3, #8
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	4b59      	ldr	r3, [pc, #356]	; (80008b8 <MX_GPIO_Init+0x20c>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a58      	ldr	r2, [pc, #352]	; (80008b8 <MX_GPIO_Init+0x20c>)
 8000758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b56      	ldr	r3, [pc, #344]	; (80008b8 <MX_GPIO_Init+0x20c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000770:	4852      	ldr	r0, [pc, #328]	; (80008bc <MX_GPIO_Init+0x210>)
 8000772:	f000 fd0f 	bl	8001194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	2140      	movs	r1, #64	; 0x40
 800077a:	4851      	ldr	r0, [pc, #324]	; (80008c0 <MX_GPIO_Init+0x214>)
 800077c:	f000 fd0a 	bl	8001194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000780:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000784:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000786:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800078a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000790:	f107 031c 	add.w	r3, r7, #28
 8000794:	4619      	mov	r1, r3
 8000796:	484b      	ldr	r0, [pc, #300]	; (80008c4 <MX_GPIO_Init+0x218>)
 8000798:	f000 fb50 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800079c:	2332      	movs	r3, #50	; 0x32
 800079e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a0:	2302      	movs	r3, #2
 80007a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a8:	2303      	movs	r3, #3
 80007aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007ac:	230b      	movs	r3, #11
 80007ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007b0:	f107 031c 	add.w	r3, r7, #28
 80007b4:	4619      	mov	r1, r3
 80007b6:	4843      	ldr	r0, [pc, #268]	; (80008c4 <MX_GPIO_Init+0x218>)
 80007b8:	f000 fb40 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80007bc:	2386      	movs	r3, #134	; 0x86
 80007be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c0:	2302      	movs	r3, #2
 80007c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c8:	2303      	movs	r3, #3
 80007ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007cc:	230b      	movs	r3, #11
 80007ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d0:	f107 031c 	add.w	r3, r7, #28
 80007d4:	4619      	mov	r1, r3
 80007d6:	483c      	ldr	r0, [pc, #240]	; (80008c8 <MX_GPIO_Init+0x21c>)
 80007d8:	f000 fb30 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80007dc:	f244 0381 	movw	r3, #16513	; 0x4081
 80007e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ee:	f107 031c 	add.w	r3, r7, #28
 80007f2:	4619      	mov	r1, r3
 80007f4:	4831      	ldr	r0, [pc, #196]	; (80008bc <MX_GPIO_Init+0x210>)
 80007f6:	f000 fb21 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80007fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000800:	2302      	movs	r3, #2
 8000802:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000808:	2303      	movs	r3, #3
 800080a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800080c:	230b      	movs	r3, #11
 800080e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000810:	f107 031c 	add.w	r3, r7, #28
 8000814:	4619      	mov	r1, r3
 8000816:	4829      	ldr	r0, [pc, #164]	; (80008bc <MX_GPIO_Init+0x210>)
 8000818:	f000 fb10 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800081c:	2340      	movs	r3, #64	; 0x40
 800081e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000820:	2301      	movs	r3, #1
 8000822:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	2300      	movs	r3, #0
 800082a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	4619      	mov	r1, r3
 8000832:	4823      	ldr	r0, [pc, #140]	; (80008c0 <MX_GPIO_Init+0x214>)
 8000834:	f000 fb02 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000838:	2380      	movs	r3, #128	; 0x80
 800083a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800083c:	2300      	movs	r3, #0
 800083e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000844:	f107 031c 	add.w	r3, r7, #28
 8000848:	4619      	mov	r1, r3
 800084a:	481d      	ldr	r0, [pc, #116]	; (80008c0 <MX_GPIO_Init+0x214>)
 800084c:	f000 faf6 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000850:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000856:	2302      	movs	r3, #2
 8000858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800085e:	2303      	movs	r3, #3
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000862:	230a      	movs	r3, #10
 8000864:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	4816      	ldr	r0, [pc, #88]	; (80008c8 <MX_GPIO_Init+0x21c>)
 800086e:	f000 fae5 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000872:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000878:	2300      	movs	r3, #0
 800087a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	4810      	ldr	r0, [pc, #64]	; (80008c8 <MX_GPIO_Init+0x21c>)
 8000888:	f000 fad8 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800088c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000892:	2302      	movs	r3, #2
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089a:	2303      	movs	r3, #3
 800089c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800089e:	230b      	movs	r3, #11
 80008a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4619      	mov	r1, r3
 80008a8:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_GPIO_Init+0x214>)
 80008aa:	f000 fac7 	bl	8000e3c <HAL_GPIO_Init>

}
 80008ae:	bf00      	nop
 80008b0:	3730      	adds	r7, #48	; 0x30
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40020400 	.word	0x40020400
 80008c0:	40021800 	.word	0x40021800
 80008c4:	40020800 	.word	0x40020800
 80008c8:	40020000 	.word	0x40020000

080008cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d0:	b672      	cpsid	i
}
 80008d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <Error_Handler+0x8>
	...

080008d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	4b10      	ldr	r3, [pc, #64]	; (8000924 <HAL_MspInit+0x4c>)
 80008e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e6:	4a0f      	ldr	r2, [pc, #60]	; (8000924 <HAL_MspInit+0x4c>)
 80008e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ec:	6453      	str	r3, [r2, #68]	; 0x44
 80008ee:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <HAL_MspInit+0x4c>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	603b      	str	r3, [r7, #0]
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <HAL_MspInit+0x4c>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	4a08      	ldr	r2, [pc, #32]	; (8000924 <HAL_MspInit+0x4c>)
 8000904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000908:	6413      	str	r3, [r2, #64]	; 0x40
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <HAL_MspInit+0x4c>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800

08000928 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08e      	sub	sp, #56	; 0x38
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000930:	f107 0308 	add.w	r3, r7, #8
 8000934:	2230      	movs	r2, #48	; 0x30
 8000936:	2100      	movs	r1, #0
 8000938:	4618      	mov	r0, r3
 800093a:	f002 fdc3 	bl	80034c4 <memset>
  if(hrtc->Instance==RTC)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a0c      	ldr	r2, [pc, #48]	; (8000974 <HAL_RTC_MspInit+0x4c>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d111      	bne.n	800096c <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000948:	2320      	movs	r3, #32
 800094a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800094c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000950:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000952:	f107 0308 	add.w	r3, r7, #8
 8000956:	4618      	mov	r0, r3
 8000958:	f001 f8aa 	bl	8001ab0 <HAL_RCCEx_PeriphCLKConfig>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000962:	f7ff ffb3 	bl	80008cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000966:	4b04      	ldr	r3, [pc, #16]	; (8000978 <HAL_RTC_MspInit+0x50>)
 8000968:	2201      	movs	r2, #1
 800096a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800096c:	bf00      	nop
 800096e:	3738      	adds	r7, #56	; 0x38
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40002800 	.word	0x40002800
 8000978:	42470e3c 	.word	0x42470e3c

0800097c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08a      	sub	sp, #40	; 0x28
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a19      	ldr	r2, [pc, #100]	; (8000a00 <HAL_UART_MspInit+0x84>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d12c      	bne.n	80009f8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <HAL_UART_MspInit+0x88>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	4a17      	ldr	r2, [pc, #92]	; (8000a04 <HAL_UART_MspInit+0x88>)
 80009a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009ac:	6413      	str	r3, [r2, #64]	; 0x40
 80009ae:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <HAL_UART_MspInit+0x88>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <HAL_UART_MspInit+0x88>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a10      	ldr	r2, [pc, #64]	; (8000a04 <HAL_UART_MspInit+0x88>)
 80009c4:	f043 0308 	orr.w	r3, r3, #8
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <HAL_UART_MspInit+0x88>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0308 	and.w	r3, r3, #8
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009dc:	2302      	movs	r3, #2
 80009de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e4:	2303      	movs	r3, #3
 80009e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009e8:	2307      	movs	r3, #7
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	4619      	mov	r1, r3
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <HAL_UART_MspInit+0x8c>)
 80009f4:	f000 fa22 	bl	8000e3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009f8:	bf00      	nop
 80009fa:	3728      	adds	r7, #40	; 0x28
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40004800 	.word	0x40004800
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40020c00 	.word	0x40020c00

08000a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <NMI_Handler+0x4>

08000a12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a16:	e7fe      	b.n	8000a16 <HardFault_Handler+0x4>

08000a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <MemManage_Handler+0x4>

08000a1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a22:	e7fe      	b.n	8000a22 <BusFault_Handler+0x4>

08000a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <UsageFault_Handler+0x4>

08000a2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a58:	f000 f8c6 	bl	8000be8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a68:	4a14      	ldr	r2, [pc, #80]	; (8000abc <_sbrk+0x5c>)
 8000a6a:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <_sbrk+0x60>)
 8000a6c:	1ad3      	subs	r3, r2, r3
 8000a6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a74:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <_sbrk+0x64>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d102      	bne.n	8000a82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <_sbrk+0x64>)
 8000a7e:	4a12      	ldr	r2, [pc, #72]	; (8000ac8 <_sbrk+0x68>)
 8000a80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a82:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <_sbrk+0x64>)
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4413      	add	r3, r2
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d207      	bcs.n	8000aa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a90:	f002 fcee 	bl	8003470 <__errno>
 8000a94:	4603      	mov	r3, r0
 8000a96:	220c      	movs	r2, #12
 8000a98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a9e:	e009      	b.n	8000ab4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000aa0:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <_sbrk+0x64>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aa6:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <_sbrk+0x64>)
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4413      	add	r3, r2
 8000aae:	4a05      	ldr	r2, [pc, #20]	; (8000ac4 <_sbrk+0x64>)
 8000ab0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ab2:	68fb      	ldr	r3, [r7, #12]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3718      	adds	r7, #24
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20030000 	.word	0x20030000
 8000ac0:	00000400 	.word	0x00000400
 8000ac4:	20000218 	.word	0x20000218
 8000ac8:	200003a8 	.word	0x200003a8

08000acc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <SystemInit+0x20>)
 8000ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ad6:	4a05      	ldr	r2, [pc, #20]	; (8000aec <SystemInit+0x20>)
 8000ad8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000adc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000af0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b28 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000af4:	480d      	ldr	r0, [pc, #52]	; (8000b2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000af6:	490e      	ldr	r1, [pc, #56]	; (8000b30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000af8:	4a0e      	ldr	r2, [pc, #56]	; (8000b34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000afa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000afc:	e002      	b.n	8000b04 <LoopCopyDataInit>

08000afe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000afe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b02:	3304      	adds	r3, #4

08000b04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b08:	d3f9      	bcc.n	8000afe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b0a:	4a0b      	ldr	r2, [pc, #44]	; (8000b38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b0c:	4c0b      	ldr	r4, [pc, #44]	; (8000b3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b10:	e001      	b.n	8000b16 <LoopFillZerobss>

08000b12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b14:	3204      	adds	r2, #4

08000b16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b18:	d3fb      	bcc.n	8000b12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b1a:	f7ff ffd7 	bl	8000acc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b1e:	f002 fcad 	bl	800347c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b22:	f7ff fd49 	bl	80005b8 <main>
  bx  lr    
 8000b26:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000b28:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000b2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b30:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8000b34:	08004ac4 	.word	0x08004ac4
  ldr r2, =_sbss
 8000b38:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8000b3c:	200003a8 	.word	0x200003a8

08000b40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b40:	e7fe      	b.n	8000b40 <ADC_IRQHandler>
	...

08000b44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b48:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <HAL_Init+0x40>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a0d      	ldr	r2, [pc, #52]	; (8000b84 <HAL_Init+0x40>)
 8000b4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b54:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <HAL_Init+0x40>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a0a      	ldr	r2, [pc, #40]	; (8000b84 <HAL_Init+0x40>)
 8000b5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <HAL_Init+0x40>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a07      	ldr	r2, [pc, #28]	; (8000b84 <HAL_Init+0x40>)
 8000b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b6c:	2003      	movs	r0, #3
 8000b6e:	f000 f931 	bl	8000dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b72:	2000      	movs	r0, #0
 8000b74:	f000 f808 	bl	8000b88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b78:	f7ff feae 	bl	80008d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40023c00 	.word	0x40023c00

08000b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b90:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <HAL_InitTick+0x54>)
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <HAL_InitTick+0x58>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	4619      	mov	r1, r3
 8000b9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f000 f93b 	bl	8000e22 <HAL_SYSTICK_Config>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e00e      	b.n	8000bd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2b0f      	cmp	r3, #15
 8000bba:	d80a      	bhi.n	8000bd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	6879      	ldr	r1, [r7, #4]
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bc4:	f000 f911 	bl	8000dea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bc8:	4a06      	ldr	r2, [pc, #24]	; (8000be4 <HAL_InitTick+0x5c>)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	e000      	b.n	8000bd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20000000 	.word	0x20000000
 8000be0:	20000008 	.word	0x20000008
 8000be4:	20000004 	.word	0x20000004

08000be8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bec:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <HAL_IncTick+0x20>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <HAL_IncTick+0x24>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <HAL_IncTick+0x24>)
 8000bfa:	6013      	str	r3, [r2, #0]
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	20000008 	.word	0x20000008
 8000c0c:	20000390 	.word	0x20000390

08000c10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  return uwTick;
 8000c14:	4b03      	ldr	r3, [pc, #12]	; (8000c24 <HAL_GetTick+0x14>)
 8000c16:	681b      	ldr	r3, [r3, #0]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	20000390 	.word	0x20000390

08000c28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c30:	f7ff ffee 	bl	8000c10 <HAL_GetTick>
 8000c34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c40:	d005      	beq.n	8000c4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c42:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <HAL_Delay+0x44>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	461a      	mov	r2, r3
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c4e:	bf00      	nop
 8000c50:	f7ff ffde 	bl	8000c10 <HAL_GetTick>
 8000c54:	4602      	mov	r2, r0
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	68fa      	ldr	r2, [r7, #12]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d8f7      	bhi.n	8000c50 <HAL_Delay+0x28>
  {
  }
}
 8000c60:	bf00      	nop
 8000c62:	bf00      	nop
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000008 	.word	0x20000008

08000c70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c86:	68ba      	ldr	r2, [r7, #8]
 8000c88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca2:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	60d3      	str	r3, [r2, #12]
}
 8000ca8:	bf00      	nop
 8000caa:	3714      	adds	r7, #20
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cbc:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	0a1b      	lsrs	r3, r3, #8
 8000cc2:	f003 0307 	and.w	r3, r3, #7
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	6039      	str	r1, [r7, #0]
 8000cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	db0a      	blt.n	8000cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	490c      	ldr	r1, [pc, #48]	; (8000d20 <__NVIC_SetPriority+0x4c>)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	0112      	lsls	r2, r2, #4
 8000cf4:	b2d2      	uxtb	r2, r2
 8000cf6:	440b      	add	r3, r1
 8000cf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cfc:	e00a      	b.n	8000d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	4908      	ldr	r1, [pc, #32]	; (8000d24 <__NVIC_SetPriority+0x50>)
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	f003 030f 	and.w	r3, r3, #15
 8000d0a:	3b04      	subs	r3, #4
 8000d0c:	0112      	lsls	r2, r2, #4
 8000d0e:	b2d2      	uxtb	r2, r2
 8000d10:	440b      	add	r3, r1
 8000d12:	761a      	strb	r2, [r3, #24]
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000e100 	.word	0xe000e100
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b089      	sub	sp, #36	; 0x24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	f1c3 0307 	rsb	r3, r3, #7
 8000d42:	2b04      	cmp	r3, #4
 8000d44:	bf28      	it	cs
 8000d46:	2304      	movcs	r3, #4
 8000d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	3304      	adds	r3, #4
 8000d4e:	2b06      	cmp	r3, #6
 8000d50:	d902      	bls.n	8000d58 <NVIC_EncodePriority+0x30>
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	3b03      	subs	r3, #3
 8000d56:	e000      	b.n	8000d5a <NVIC_EncodePriority+0x32>
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43da      	mvns	r2, r3
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	401a      	ands	r2, r3
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7a:	43d9      	mvns	r1, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d80:	4313      	orrs	r3, r2
         );
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3724      	adds	r7, #36	; 0x24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
	...

08000d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000da0:	d301      	bcc.n	8000da6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000da2:	2301      	movs	r3, #1
 8000da4:	e00f      	b.n	8000dc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000da6:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <SysTick_Config+0x40>)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3b01      	subs	r3, #1
 8000dac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dae:	210f      	movs	r1, #15
 8000db0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000db4:	f7ff ff8e 	bl	8000cd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db8:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <SysTick_Config+0x40>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dbe:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <SysTick_Config+0x40>)
 8000dc0:	2207      	movs	r2, #7
 8000dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	e000e010 	.word	0xe000e010

08000dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff ff47 	bl	8000c70 <__NVIC_SetPriorityGrouping>
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b086      	sub	sp, #24
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	4603      	mov	r3, r0
 8000df2:	60b9      	str	r1, [r7, #8]
 8000df4:	607a      	str	r2, [r7, #4]
 8000df6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dfc:	f7ff ff5c 	bl	8000cb8 <__NVIC_GetPriorityGrouping>
 8000e00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	68b9      	ldr	r1, [r7, #8]
 8000e06:	6978      	ldr	r0, [r7, #20]
 8000e08:	f7ff ff8e 	bl	8000d28 <NVIC_EncodePriority>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e12:	4611      	mov	r1, r2
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff ff5d 	bl	8000cd4 <__NVIC_SetPriority>
}
 8000e1a:	bf00      	nop
 8000e1c:	3718      	adds	r7, #24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f7ff ffb0 	bl	8000d90 <SysTick_Config>
 8000e30:	4603      	mov	r3, r0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b089      	sub	sp, #36	; 0x24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]
 8000e56:	e177      	b.n	8001148 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e58:	2201      	movs	r2, #1
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	697a      	ldr	r2, [r7, #20]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	f040 8166 	bne.w	8001142 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f003 0303 	and.w	r3, r3, #3
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d005      	beq.n	8000e8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d130      	bne.n	8000ef0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	2203      	movs	r2, #3
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	68da      	ldr	r2, [r3, #12]
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	091b      	lsrs	r3, r3, #4
 8000eda:	f003 0201 	and.w	r2, r3, #1
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f003 0303 	and.w	r3, r3, #3
 8000ef8:	2b03      	cmp	r3, #3
 8000efa:	d017      	beq.n	8000f2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	2203      	movs	r2, #3
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4013      	ands	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	689a      	ldr	r2, [r3, #8]
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f003 0303 	and.w	r3, r3, #3
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d123      	bne.n	8000f80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	08da      	lsrs	r2, r3, #3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3208      	adds	r2, #8
 8000f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	f003 0307 	and.w	r3, r3, #7
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	220f      	movs	r2, #15
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	691a      	ldr	r2, [r3, #16]
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	08da      	lsrs	r2, r3, #3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	3208      	adds	r2, #8
 8000f7a:	69b9      	ldr	r1, [r7, #24]
 8000f7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0203 	and.w	r2, r3, #3
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	f000 80c0 	beq.w	8001142 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	4b66      	ldr	r3, [pc, #408]	; (8001160 <HAL_GPIO_Init+0x324>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	4a65      	ldr	r2, [pc, #404]	; (8001160 <HAL_GPIO_Init+0x324>)
 8000fcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fd2:	4b63      	ldr	r3, [pc, #396]	; (8001160 <HAL_GPIO_Init+0x324>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fde:	4a61      	ldr	r2, [pc, #388]	; (8001164 <HAL_GPIO_Init+0x328>)
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	089b      	lsrs	r3, r3, #2
 8000fe4:	3302      	adds	r3, #2
 8000fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	f003 0303 	and.w	r3, r3, #3
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	220f      	movs	r2, #15
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4013      	ands	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a58      	ldr	r2, [pc, #352]	; (8001168 <HAL_GPIO_Init+0x32c>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d037      	beq.n	800107a <HAL_GPIO_Init+0x23e>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a57      	ldr	r2, [pc, #348]	; (800116c <HAL_GPIO_Init+0x330>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d031      	beq.n	8001076 <HAL_GPIO_Init+0x23a>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a56      	ldr	r2, [pc, #344]	; (8001170 <HAL_GPIO_Init+0x334>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d02b      	beq.n	8001072 <HAL_GPIO_Init+0x236>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a55      	ldr	r2, [pc, #340]	; (8001174 <HAL_GPIO_Init+0x338>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d025      	beq.n	800106e <HAL_GPIO_Init+0x232>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a54      	ldr	r2, [pc, #336]	; (8001178 <HAL_GPIO_Init+0x33c>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d01f      	beq.n	800106a <HAL_GPIO_Init+0x22e>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a53      	ldr	r2, [pc, #332]	; (800117c <HAL_GPIO_Init+0x340>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d019      	beq.n	8001066 <HAL_GPIO_Init+0x22a>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a52      	ldr	r2, [pc, #328]	; (8001180 <HAL_GPIO_Init+0x344>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d013      	beq.n	8001062 <HAL_GPIO_Init+0x226>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a51      	ldr	r2, [pc, #324]	; (8001184 <HAL_GPIO_Init+0x348>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d00d      	beq.n	800105e <HAL_GPIO_Init+0x222>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a50      	ldr	r2, [pc, #320]	; (8001188 <HAL_GPIO_Init+0x34c>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d007      	beq.n	800105a <HAL_GPIO_Init+0x21e>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a4f      	ldr	r2, [pc, #316]	; (800118c <HAL_GPIO_Init+0x350>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d101      	bne.n	8001056 <HAL_GPIO_Init+0x21a>
 8001052:	2309      	movs	r3, #9
 8001054:	e012      	b.n	800107c <HAL_GPIO_Init+0x240>
 8001056:	230a      	movs	r3, #10
 8001058:	e010      	b.n	800107c <HAL_GPIO_Init+0x240>
 800105a:	2308      	movs	r3, #8
 800105c:	e00e      	b.n	800107c <HAL_GPIO_Init+0x240>
 800105e:	2307      	movs	r3, #7
 8001060:	e00c      	b.n	800107c <HAL_GPIO_Init+0x240>
 8001062:	2306      	movs	r3, #6
 8001064:	e00a      	b.n	800107c <HAL_GPIO_Init+0x240>
 8001066:	2305      	movs	r3, #5
 8001068:	e008      	b.n	800107c <HAL_GPIO_Init+0x240>
 800106a:	2304      	movs	r3, #4
 800106c:	e006      	b.n	800107c <HAL_GPIO_Init+0x240>
 800106e:	2303      	movs	r3, #3
 8001070:	e004      	b.n	800107c <HAL_GPIO_Init+0x240>
 8001072:	2302      	movs	r3, #2
 8001074:	e002      	b.n	800107c <HAL_GPIO_Init+0x240>
 8001076:	2301      	movs	r3, #1
 8001078:	e000      	b.n	800107c <HAL_GPIO_Init+0x240>
 800107a:	2300      	movs	r3, #0
 800107c:	69fa      	ldr	r2, [r7, #28]
 800107e:	f002 0203 	and.w	r2, r2, #3
 8001082:	0092      	lsls	r2, r2, #2
 8001084:	4093      	lsls	r3, r2
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4313      	orrs	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800108c:	4935      	ldr	r1, [pc, #212]	; (8001164 <HAL_GPIO_Init+0x328>)
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	089b      	lsrs	r3, r3, #2
 8001092:	3302      	adds	r3, #2
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800109a:	4b3d      	ldr	r3, [pc, #244]	; (8001190 <HAL_GPIO_Init+0x354>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	43db      	mvns	r3, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4013      	ands	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010be:	4a34      	ldr	r2, [pc, #208]	; (8001190 <HAL_GPIO_Init+0x354>)
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010c4:	4b32      	ldr	r3, [pc, #200]	; (8001190 <HAL_GPIO_Init+0x354>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d003      	beq.n	80010e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010e8:	4a29      	ldr	r2, [pc, #164]	; (8001190 <HAL_GPIO_Init+0x354>)
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ee:	4b28      	ldr	r3, [pc, #160]	; (8001190 <HAL_GPIO_Init+0x354>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	43db      	mvns	r3, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4013      	ands	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001112:	4a1f      	ldr	r2, [pc, #124]	; (8001190 <HAL_GPIO_Init+0x354>)
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001118:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <HAL_GPIO_Init+0x354>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d003      	beq.n	800113c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800113c:	4a14      	ldr	r2, [pc, #80]	; (8001190 <HAL_GPIO_Init+0x354>)
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	3301      	adds	r3, #1
 8001146:	61fb      	str	r3, [r7, #28]
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	2b0f      	cmp	r3, #15
 800114c:	f67f ae84 	bls.w	8000e58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001150:	bf00      	nop
 8001152:	bf00      	nop
 8001154:	3724      	adds	r7, #36	; 0x24
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	40023800 	.word	0x40023800
 8001164:	40013800 	.word	0x40013800
 8001168:	40020000 	.word	0x40020000
 800116c:	40020400 	.word	0x40020400
 8001170:	40020800 	.word	0x40020800
 8001174:	40020c00 	.word	0x40020c00
 8001178:	40021000 	.word	0x40021000
 800117c:	40021400 	.word	0x40021400
 8001180:	40021800 	.word	0x40021800
 8001184:	40021c00 	.word	0x40021c00
 8001188:	40022000 	.word	0x40022000
 800118c:	40022400 	.word	0x40022400
 8001190:	40013c00 	.word	0x40013c00

08001194 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	460b      	mov	r3, r1
 800119e:	807b      	strh	r3, [r7, #2]
 80011a0:	4613      	mov	r3, r2
 80011a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011a4:	787b      	ldrb	r3, [r7, #1]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d003      	beq.n	80011b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011aa:	887a      	ldrh	r2, [r7, #2]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011b0:	e003      	b.n	80011ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011b2:	887b      	ldrh	r3, [r7, #2]
 80011b4:	041a      	lsls	r2, r3, #16
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	619a      	str	r2, [r3, #24]
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
	...

080011c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d101      	bne.n	80011da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e264      	b.n	80016a4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d075      	beq.n	80012d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011e6:	4ba3      	ldr	r3, [pc, #652]	; (8001474 <HAL_RCC_OscConfig+0x2ac>)
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	f003 030c 	and.w	r3, r3, #12
 80011ee:	2b04      	cmp	r3, #4
 80011f0:	d00c      	beq.n	800120c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011f2:	4ba0      	ldr	r3, [pc, #640]	; (8001474 <HAL_RCC_OscConfig+0x2ac>)
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011fa:	2b08      	cmp	r3, #8
 80011fc:	d112      	bne.n	8001224 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011fe:	4b9d      	ldr	r3, [pc, #628]	; (8001474 <HAL_RCC_OscConfig+0x2ac>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001206:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800120a:	d10b      	bne.n	8001224 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800120c:	4b99      	ldr	r3, [pc, #612]	; (8001474 <HAL_RCC_OscConfig+0x2ac>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d05b      	beq.n	80012d0 <HAL_RCC_OscConfig+0x108>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d157      	bne.n	80012d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	e23f      	b.n	80016a4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800122c:	d106      	bne.n	800123c <HAL_RCC_OscConfig+0x74>
 800122e:	4b91      	ldr	r3, [pc, #580]	; (8001474 <HAL_RCC_OscConfig+0x2ac>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a90      	ldr	r2, [pc, #576]	; (8001474 <HAL_RCC_OscConfig+0x2ac>)
 8001234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001238:	6013      	str	r3, [r2, #0]
 800123a:	e01d      	b.n	8001278 <HAL_RCC_OscConfig+0xb0>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001244:	d10c      	bne.n	8001260 <HAL_RCC_OscConfig+0x98>
 8001246:	4b8b      	ldr	r3, [pc, #556]	; (8001474 <HAL_RCC_OscConfig+0x2ac>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a8a      	ldr	r2, [pc, #552]	; (8001474 <HAL_RCC_OscConfig+0x2ac>)
 800124c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001250:	6013      	str	r3, [r2, #0]
 8001252:	4b88      	ldr	r3, [pc, #544]	; (8001474 <HAL_RCC_OscConfig+0x2ac>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a87      	ldr	r2, [pc, #540]	; (8001474 <HAL_RCC_OscConfig+0x2ac>)
 8001258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800125c:	6013      	str	r3, [r2, #0]
 800125e:	e00b      	b.n	8001278 <HAL_RCC_OscConfig+0xb0>
 8001260:	4b84      	ldr	r3, [pc, #528]	; (8001474 <HAL_RCC_OscConfig+0x2ac>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a83      	ldr	r2, [pc, #524]	; (8001474 <HAL_RCC_OscConfig+0x2ac>)
 8001266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800126a:	6013      	str	r3, [r2, #0]
 800126c:	4b81      	ldr	r3, [pc, #516]	; (8001474 <HAL_RCC_OscConfig+0x2ac>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a80      	ldr	r2, [pc, #512]	; (8001474 <HAL_RCC_OscConfig+0x2ac>)
 8001272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001276:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d013      	beq.n	80012a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001280:	f7ff fcc6 	bl	8000c10 <HAL_GetTick>
 8001284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001288:	f7ff fcc2 	bl	8000c10 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b64      	cmp	r3, #100	; 0x64
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e204      	b.n	80016a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800129a:	4b76      	ldr	r3, [pc, #472]	; (8001474 <HAL_RCC_OscConfig+0x2ac>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d0f0      	beq.n	8001288 <HAL_RCC_OscConfig+0xc0>
 80012a6:	e014      	b.n	80012d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a8:	f7ff fcb2 	bl	8000c10 <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012b0:	f7ff fcae 	bl	8000c10 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b64      	cmp	r3, #100	; 0x64
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e1f0      	b.n	80016a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012c2:	4b6c      	ldr	r3, [pc, #432]	; (8001474 <HAL_RCC_OscConfig+0x2ac>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d1f0      	bne.n	80012b0 <HAL_RCC_OscConfig+0xe8>
 80012ce:	e000      	b.n	80012d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d063      	beq.n	80013a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012de:	4b65      	ldr	r3, [pc, #404]	; (8001474 <HAL_RCC_OscConfig+0x2ac>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f003 030c 	and.w	r3, r3, #12
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d00b      	beq.n	8001302 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012ea:	4b62      	ldr	r3, [pc, #392]	; (8001474 <HAL_RCC_OscConfig+0x2ac>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012f2:	2b08      	cmp	r3, #8
 80012f4:	d11c      	bne.n	8001330 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012f6:	4b5f      	ldr	r3, [pc, #380]	; (8001474 <HAL_RCC_OscConfig+0x2ac>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d116      	bne.n	8001330 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001302:	4b5c      	ldr	r3, [pc, #368]	; (8001474 <HAL_RCC_OscConfig+0x2ac>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d005      	beq.n	800131a <HAL_RCC_OscConfig+0x152>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d001      	beq.n	800131a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e1c4      	b.n	80016a4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800131a:	4b56      	ldr	r3, [pc, #344]	; (8001474 <HAL_RCC_OscConfig+0x2ac>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	691b      	ldr	r3, [r3, #16]
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	4952      	ldr	r1, [pc, #328]	; (8001474 <HAL_RCC_OscConfig+0x2ac>)
 800132a:	4313      	orrs	r3, r2
 800132c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800132e:	e03a      	b.n	80013a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d020      	beq.n	800137a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001338:	4b4f      	ldr	r3, [pc, #316]	; (8001478 <HAL_RCC_OscConfig+0x2b0>)
 800133a:	2201      	movs	r2, #1
 800133c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800133e:	f7ff fc67 	bl	8000c10 <HAL_GetTick>
 8001342:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001344:	e008      	b.n	8001358 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001346:	f7ff fc63 	bl	8000c10 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d901      	bls.n	8001358 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e1a5      	b.n	80016a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001358:	4b46      	ldr	r3, [pc, #280]	; (8001474 <HAL_RCC_OscConfig+0x2ac>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	2b00      	cmp	r3, #0
 8001362:	d0f0      	beq.n	8001346 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001364:	4b43      	ldr	r3, [pc, #268]	; (8001474 <HAL_RCC_OscConfig+0x2ac>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	691b      	ldr	r3, [r3, #16]
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	4940      	ldr	r1, [pc, #256]	; (8001474 <HAL_RCC_OscConfig+0x2ac>)
 8001374:	4313      	orrs	r3, r2
 8001376:	600b      	str	r3, [r1, #0]
 8001378:	e015      	b.n	80013a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800137a:	4b3f      	ldr	r3, [pc, #252]	; (8001478 <HAL_RCC_OscConfig+0x2b0>)
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001380:	f7ff fc46 	bl	8000c10 <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001388:	f7ff fc42 	bl	8000c10 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b02      	cmp	r3, #2
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e184      	b.n	80016a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800139a:	4b36      	ldr	r3, [pc, #216]	; (8001474 <HAL_RCC_OscConfig+0x2ac>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1f0      	bne.n	8001388 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0308 	and.w	r3, r3, #8
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d030      	beq.n	8001414 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d016      	beq.n	80013e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ba:	4b30      	ldr	r3, [pc, #192]	; (800147c <HAL_RCC_OscConfig+0x2b4>)
 80013bc:	2201      	movs	r2, #1
 80013be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013c0:	f7ff fc26 	bl	8000c10 <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013c8:	f7ff fc22 	bl	8000c10 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e164      	b.n	80016a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013da:	4b26      	ldr	r3, [pc, #152]	; (8001474 <HAL_RCC_OscConfig+0x2ac>)
 80013dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d0f0      	beq.n	80013c8 <HAL_RCC_OscConfig+0x200>
 80013e6:	e015      	b.n	8001414 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013e8:	4b24      	ldr	r3, [pc, #144]	; (800147c <HAL_RCC_OscConfig+0x2b4>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ee:	f7ff fc0f 	bl	8000c10 <HAL_GetTick>
 80013f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013f4:	e008      	b.n	8001408 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013f6:	f7ff fc0b 	bl	8000c10 <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d901      	bls.n	8001408 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e14d      	b.n	80016a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001408:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <HAL_RCC_OscConfig+0x2ac>)
 800140a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800140c:	f003 0302 	and.w	r3, r3, #2
 8001410:	2b00      	cmp	r3, #0
 8001412:	d1f0      	bne.n	80013f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0304 	and.w	r3, r3, #4
 800141c:	2b00      	cmp	r3, #0
 800141e:	f000 80a0 	beq.w	8001562 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001422:	2300      	movs	r3, #0
 8001424:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001426:	4b13      	ldr	r3, [pc, #76]	; (8001474 <HAL_RCC_OscConfig+0x2ac>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d10f      	bne.n	8001452 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <HAL_RCC_OscConfig+0x2ac>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	4a0e      	ldr	r2, [pc, #56]	; (8001474 <HAL_RCC_OscConfig+0x2ac>)
 800143c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001440:	6413      	str	r3, [r2, #64]	; 0x40
 8001442:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <HAL_RCC_OscConfig+0x2ac>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800144e:	2301      	movs	r3, #1
 8001450:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001452:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <HAL_RCC_OscConfig+0x2b8>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800145a:	2b00      	cmp	r3, #0
 800145c:	d121      	bne.n	80014a2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800145e:	4b08      	ldr	r3, [pc, #32]	; (8001480 <HAL_RCC_OscConfig+0x2b8>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a07      	ldr	r2, [pc, #28]	; (8001480 <HAL_RCC_OscConfig+0x2b8>)
 8001464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001468:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800146a:	f7ff fbd1 	bl	8000c10 <HAL_GetTick>
 800146e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001470:	e011      	b.n	8001496 <HAL_RCC_OscConfig+0x2ce>
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800
 8001478:	42470000 	.word	0x42470000
 800147c:	42470e80 	.word	0x42470e80
 8001480:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001484:	f7ff fbc4 	bl	8000c10 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e106      	b.n	80016a4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001496:	4b85      	ldr	r3, [pc, #532]	; (80016ac <HAL_RCC_OscConfig+0x4e4>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d0f0      	beq.n	8001484 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d106      	bne.n	80014b8 <HAL_RCC_OscConfig+0x2f0>
 80014aa:	4b81      	ldr	r3, [pc, #516]	; (80016b0 <HAL_RCC_OscConfig+0x4e8>)
 80014ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ae:	4a80      	ldr	r2, [pc, #512]	; (80016b0 <HAL_RCC_OscConfig+0x4e8>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	6713      	str	r3, [r2, #112]	; 0x70
 80014b6:	e01c      	b.n	80014f2 <HAL_RCC_OscConfig+0x32a>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	2b05      	cmp	r3, #5
 80014be:	d10c      	bne.n	80014da <HAL_RCC_OscConfig+0x312>
 80014c0:	4b7b      	ldr	r3, [pc, #492]	; (80016b0 <HAL_RCC_OscConfig+0x4e8>)
 80014c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c4:	4a7a      	ldr	r2, [pc, #488]	; (80016b0 <HAL_RCC_OscConfig+0x4e8>)
 80014c6:	f043 0304 	orr.w	r3, r3, #4
 80014ca:	6713      	str	r3, [r2, #112]	; 0x70
 80014cc:	4b78      	ldr	r3, [pc, #480]	; (80016b0 <HAL_RCC_OscConfig+0x4e8>)
 80014ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d0:	4a77      	ldr	r2, [pc, #476]	; (80016b0 <HAL_RCC_OscConfig+0x4e8>)
 80014d2:	f043 0301 	orr.w	r3, r3, #1
 80014d6:	6713      	str	r3, [r2, #112]	; 0x70
 80014d8:	e00b      	b.n	80014f2 <HAL_RCC_OscConfig+0x32a>
 80014da:	4b75      	ldr	r3, [pc, #468]	; (80016b0 <HAL_RCC_OscConfig+0x4e8>)
 80014dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014de:	4a74      	ldr	r2, [pc, #464]	; (80016b0 <HAL_RCC_OscConfig+0x4e8>)
 80014e0:	f023 0301 	bic.w	r3, r3, #1
 80014e4:	6713      	str	r3, [r2, #112]	; 0x70
 80014e6:	4b72      	ldr	r3, [pc, #456]	; (80016b0 <HAL_RCC_OscConfig+0x4e8>)
 80014e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ea:	4a71      	ldr	r2, [pc, #452]	; (80016b0 <HAL_RCC_OscConfig+0x4e8>)
 80014ec:	f023 0304 	bic.w	r3, r3, #4
 80014f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d015      	beq.n	8001526 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014fa:	f7ff fb89 	bl	8000c10 <HAL_GetTick>
 80014fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001500:	e00a      	b.n	8001518 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001502:	f7ff fb85 	bl	8000c10 <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001510:	4293      	cmp	r3, r2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e0c5      	b.n	80016a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001518:	4b65      	ldr	r3, [pc, #404]	; (80016b0 <HAL_RCC_OscConfig+0x4e8>)
 800151a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0ee      	beq.n	8001502 <HAL_RCC_OscConfig+0x33a>
 8001524:	e014      	b.n	8001550 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001526:	f7ff fb73 	bl	8000c10 <HAL_GetTick>
 800152a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800152c:	e00a      	b.n	8001544 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800152e:	f7ff fb6f 	bl	8000c10 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	f241 3288 	movw	r2, #5000	; 0x1388
 800153c:	4293      	cmp	r3, r2
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e0af      	b.n	80016a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001544:	4b5a      	ldr	r3, [pc, #360]	; (80016b0 <HAL_RCC_OscConfig+0x4e8>)
 8001546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1ee      	bne.n	800152e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001550:	7dfb      	ldrb	r3, [r7, #23]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d105      	bne.n	8001562 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001556:	4b56      	ldr	r3, [pc, #344]	; (80016b0 <HAL_RCC_OscConfig+0x4e8>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	4a55      	ldr	r2, [pc, #340]	; (80016b0 <HAL_RCC_OscConfig+0x4e8>)
 800155c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001560:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	2b00      	cmp	r3, #0
 8001568:	f000 809b 	beq.w	80016a2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800156c:	4b50      	ldr	r3, [pc, #320]	; (80016b0 <HAL_RCC_OscConfig+0x4e8>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f003 030c 	and.w	r3, r3, #12
 8001574:	2b08      	cmp	r3, #8
 8001576:	d05c      	beq.n	8001632 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	2b02      	cmp	r3, #2
 800157e:	d141      	bne.n	8001604 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001580:	4b4c      	ldr	r3, [pc, #304]	; (80016b4 <HAL_RCC_OscConfig+0x4ec>)
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001586:	f7ff fb43 	bl	8000c10 <HAL_GetTick>
 800158a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800158c:	e008      	b.n	80015a0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800158e:	f7ff fb3f 	bl	8000c10 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e081      	b.n	80016a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015a0:	4b43      	ldr	r3, [pc, #268]	; (80016b0 <HAL_RCC_OscConfig+0x4e8>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d1f0      	bne.n	800158e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	69da      	ldr	r2, [r3, #28]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a1b      	ldr	r3, [r3, #32]
 80015b4:	431a      	orrs	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ba:	019b      	lsls	r3, r3, #6
 80015bc:	431a      	orrs	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c2:	085b      	lsrs	r3, r3, #1
 80015c4:	3b01      	subs	r3, #1
 80015c6:	041b      	lsls	r3, r3, #16
 80015c8:	431a      	orrs	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ce:	061b      	lsls	r3, r3, #24
 80015d0:	4937      	ldr	r1, [pc, #220]	; (80016b0 <HAL_RCC_OscConfig+0x4e8>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015d6:	4b37      	ldr	r3, [pc, #220]	; (80016b4 <HAL_RCC_OscConfig+0x4ec>)
 80015d8:	2201      	movs	r2, #1
 80015da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015dc:	f7ff fb18 	bl	8000c10 <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015e4:	f7ff fb14 	bl	8000c10 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e056      	b.n	80016a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015f6:	4b2e      	ldr	r3, [pc, #184]	; (80016b0 <HAL_RCC_OscConfig+0x4e8>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d0f0      	beq.n	80015e4 <HAL_RCC_OscConfig+0x41c>
 8001602:	e04e      	b.n	80016a2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001604:	4b2b      	ldr	r3, [pc, #172]	; (80016b4 <HAL_RCC_OscConfig+0x4ec>)
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160a:	f7ff fb01 	bl	8000c10 <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001612:	f7ff fafd 	bl	8000c10 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e03f      	b.n	80016a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001624:	4b22      	ldr	r3, [pc, #136]	; (80016b0 <HAL_RCC_OscConfig+0x4e8>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1f0      	bne.n	8001612 <HAL_RCC_OscConfig+0x44a>
 8001630:	e037      	b.n	80016a2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d101      	bne.n	800163e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e032      	b.n	80016a4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800163e:	4b1c      	ldr	r3, [pc, #112]	; (80016b0 <HAL_RCC_OscConfig+0x4e8>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d028      	beq.n	800169e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001656:	429a      	cmp	r2, r3
 8001658:	d121      	bne.n	800169e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001664:	429a      	cmp	r2, r3
 8001666:	d11a      	bne.n	800169e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001668:	68fa      	ldr	r2, [r7, #12]
 800166a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800166e:	4013      	ands	r3, r2
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001674:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001676:	4293      	cmp	r3, r2
 8001678:	d111      	bne.n	800169e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001684:	085b      	lsrs	r3, r3, #1
 8001686:	3b01      	subs	r3, #1
 8001688:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800168a:	429a      	cmp	r2, r3
 800168c:	d107      	bne.n	800169e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001698:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800169a:	429a      	cmp	r2, r3
 800169c:	d001      	beq.n	80016a2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e000      	b.n	80016a4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3718      	adds	r7, #24
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40007000 	.word	0x40007000
 80016b0:	40023800 	.word	0x40023800
 80016b4:	42470060 	.word	0x42470060

080016b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d101      	bne.n	80016cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e0cc      	b.n	8001866 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016cc:	4b68      	ldr	r3, [pc, #416]	; (8001870 <HAL_RCC_ClockConfig+0x1b8>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 030f 	and.w	r3, r3, #15
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d90c      	bls.n	80016f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016da:	4b65      	ldr	r3, [pc, #404]	; (8001870 <HAL_RCC_ClockConfig+0x1b8>)
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	b2d2      	uxtb	r2, r2
 80016e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016e2:	4b63      	ldr	r3, [pc, #396]	; (8001870 <HAL_RCC_ClockConfig+0x1b8>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 030f 	and.w	r3, r3, #15
 80016ea:	683a      	ldr	r2, [r7, #0]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d001      	beq.n	80016f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e0b8      	b.n	8001866 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d020      	beq.n	8001742 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	2b00      	cmp	r3, #0
 800170a:	d005      	beq.n	8001718 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800170c:	4b59      	ldr	r3, [pc, #356]	; (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	4a58      	ldr	r2, [pc, #352]	; (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 8001712:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001716:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0308 	and.w	r3, r3, #8
 8001720:	2b00      	cmp	r3, #0
 8001722:	d005      	beq.n	8001730 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001724:	4b53      	ldr	r3, [pc, #332]	; (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	4a52      	ldr	r2, [pc, #328]	; (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 800172a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800172e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001730:	4b50      	ldr	r3, [pc, #320]	; (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	494d      	ldr	r1, [pc, #308]	; (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 800173e:	4313      	orrs	r3, r2
 8001740:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	2b00      	cmp	r3, #0
 800174c:	d044      	beq.n	80017d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d107      	bne.n	8001766 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001756:	4b47      	ldr	r3, [pc, #284]	; (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d119      	bne.n	8001796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e07f      	b.n	8001866 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b02      	cmp	r3, #2
 800176c:	d003      	beq.n	8001776 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001772:	2b03      	cmp	r3, #3
 8001774:	d107      	bne.n	8001786 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001776:	4b3f      	ldr	r3, [pc, #252]	; (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d109      	bne.n	8001796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e06f      	b.n	8001866 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001786:	4b3b      	ldr	r3, [pc, #236]	; (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d101      	bne.n	8001796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e067      	b.n	8001866 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001796:	4b37      	ldr	r3, [pc, #220]	; (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f023 0203 	bic.w	r2, r3, #3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	4934      	ldr	r1, [pc, #208]	; (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 80017a4:	4313      	orrs	r3, r2
 80017a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017a8:	f7ff fa32 	bl	8000c10 <HAL_GetTick>
 80017ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ae:	e00a      	b.n	80017c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b0:	f7ff fa2e 	bl	8000c10 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80017be:	4293      	cmp	r3, r2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e04f      	b.n	8001866 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017c6:	4b2b      	ldr	r3, [pc, #172]	; (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f003 020c 	and.w	r2, r3, #12
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d1eb      	bne.n	80017b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017d8:	4b25      	ldr	r3, [pc, #148]	; (8001870 <HAL_RCC_ClockConfig+0x1b8>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 030f 	and.w	r3, r3, #15
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d20c      	bcs.n	8001800 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017e6:	4b22      	ldr	r3, [pc, #136]	; (8001870 <HAL_RCC_ClockConfig+0x1b8>)
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	b2d2      	uxtb	r2, r2
 80017ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ee:	4b20      	ldr	r3, [pc, #128]	; (8001870 <HAL_RCC_ClockConfig+0x1b8>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 030f 	and.w	r3, r3, #15
 80017f6:	683a      	ldr	r2, [r7, #0]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d001      	beq.n	8001800 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e032      	b.n	8001866 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0304 	and.w	r3, r3, #4
 8001808:	2b00      	cmp	r3, #0
 800180a:	d008      	beq.n	800181e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800180c:	4b19      	ldr	r3, [pc, #100]	; (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	4916      	ldr	r1, [pc, #88]	; (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 800181a:	4313      	orrs	r3, r2
 800181c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0308 	and.w	r3, r3, #8
 8001826:	2b00      	cmp	r3, #0
 8001828:	d009      	beq.n	800183e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800182a:	4b12      	ldr	r3, [pc, #72]	; (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	691b      	ldr	r3, [r3, #16]
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	490e      	ldr	r1, [pc, #56]	; (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 800183a:	4313      	orrs	r3, r2
 800183c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800183e:	f000 f821 	bl	8001884 <HAL_RCC_GetSysClockFreq>
 8001842:	4602      	mov	r2, r0
 8001844:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	091b      	lsrs	r3, r3, #4
 800184a:	f003 030f 	and.w	r3, r3, #15
 800184e:	490a      	ldr	r1, [pc, #40]	; (8001878 <HAL_RCC_ClockConfig+0x1c0>)
 8001850:	5ccb      	ldrb	r3, [r1, r3]
 8001852:	fa22 f303 	lsr.w	r3, r2, r3
 8001856:	4a09      	ldr	r2, [pc, #36]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 8001858:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800185a:	4b09      	ldr	r3, [pc, #36]	; (8001880 <HAL_RCC_ClockConfig+0x1c8>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff f992 	bl	8000b88 <HAL_InitTick>

  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40023c00 	.word	0x40023c00
 8001874:	40023800 	.word	0x40023800
 8001878:	080048ec 	.word	0x080048ec
 800187c:	20000000 	.word	0x20000000
 8001880:	20000004 	.word	0x20000004

08001884 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001884:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001888:	b084      	sub	sp, #16
 800188a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800188c:	2300      	movs	r3, #0
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	2300      	movs	r3, #0
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	2300      	movs	r3, #0
 8001896:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001898:	2300      	movs	r3, #0
 800189a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800189c:	4b67      	ldr	r3, [pc, #412]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f003 030c 	and.w	r3, r3, #12
 80018a4:	2b08      	cmp	r3, #8
 80018a6:	d00d      	beq.n	80018c4 <HAL_RCC_GetSysClockFreq+0x40>
 80018a8:	2b08      	cmp	r3, #8
 80018aa:	f200 80bd 	bhi.w	8001a28 <HAL_RCC_GetSysClockFreq+0x1a4>
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d002      	beq.n	80018b8 <HAL_RCC_GetSysClockFreq+0x34>
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	d003      	beq.n	80018be <HAL_RCC_GetSysClockFreq+0x3a>
 80018b6:	e0b7      	b.n	8001a28 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018b8:	4b61      	ldr	r3, [pc, #388]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80018ba:	60bb      	str	r3, [r7, #8]
       break;
 80018bc:	e0b7      	b.n	8001a2e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018be:	4b61      	ldr	r3, [pc, #388]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80018c0:	60bb      	str	r3, [r7, #8]
      break;
 80018c2:	e0b4      	b.n	8001a2e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018c4:	4b5d      	ldr	r3, [pc, #372]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018cc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018ce:	4b5b      	ldr	r3, [pc, #364]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d04d      	beq.n	8001976 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018da:	4b58      	ldr	r3, [pc, #352]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	099b      	lsrs	r3, r3, #6
 80018e0:	461a      	mov	r2, r3
 80018e2:	f04f 0300 	mov.w	r3, #0
 80018e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80018ea:	f04f 0100 	mov.w	r1, #0
 80018ee:	ea02 0800 	and.w	r8, r2, r0
 80018f2:	ea03 0901 	and.w	r9, r3, r1
 80018f6:	4640      	mov	r0, r8
 80018f8:	4649      	mov	r1, r9
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	f04f 0300 	mov.w	r3, #0
 8001902:	014b      	lsls	r3, r1, #5
 8001904:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001908:	0142      	lsls	r2, r0, #5
 800190a:	4610      	mov	r0, r2
 800190c:	4619      	mov	r1, r3
 800190e:	ebb0 0008 	subs.w	r0, r0, r8
 8001912:	eb61 0109 	sbc.w	r1, r1, r9
 8001916:	f04f 0200 	mov.w	r2, #0
 800191a:	f04f 0300 	mov.w	r3, #0
 800191e:	018b      	lsls	r3, r1, #6
 8001920:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001924:	0182      	lsls	r2, r0, #6
 8001926:	1a12      	subs	r2, r2, r0
 8001928:	eb63 0301 	sbc.w	r3, r3, r1
 800192c:	f04f 0000 	mov.w	r0, #0
 8001930:	f04f 0100 	mov.w	r1, #0
 8001934:	00d9      	lsls	r1, r3, #3
 8001936:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800193a:	00d0      	lsls	r0, r2, #3
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	eb12 0208 	adds.w	r2, r2, r8
 8001944:	eb43 0309 	adc.w	r3, r3, r9
 8001948:	f04f 0000 	mov.w	r0, #0
 800194c:	f04f 0100 	mov.w	r1, #0
 8001950:	0259      	lsls	r1, r3, #9
 8001952:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001956:	0250      	lsls	r0, r2, #9
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	4610      	mov	r0, r2
 800195e:	4619      	mov	r1, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	461a      	mov	r2, r3
 8001964:	f04f 0300 	mov.w	r3, #0
 8001968:	f7fe fcaa 	bl	80002c0 <__aeabi_uldivmod>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	4613      	mov	r3, r2
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	e04a      	b.n	8001a0c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001976:	4b31      	ldr	r3, [pc, #196]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	099b      	lsrs	r3, r3, #6
 800197c:	461a      	mov	r2, r3
 800197e:	f04f 0300 	mov.w	r3, #0
 8001982:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001986:	f04f 0100 	mov.w	r1, #0
 800198a:	ea02 0400 	and.w	r4, r2, r0
 800198e:	ea03 0501 	and.w	r5, r3, r1
 8001992:	4620      	mov	r0, r4
 8001994:	4629      	mov	r1, r5
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	f04f 0300 	mov.w	r3, #0
 800199e:	014b      	lsls	r3, r1, #5
 80019a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019a4:	0142      	lsls	r2, r0, #5
 80019a6:	4610      	mov	r0, r2
 80019a8:	4619      	mov	r1, r3
 80019aa:	1b00      	subs	r0, r0, r4
 80019ac:	eb61 0105 	sbc.w	r1, r1, r5
 80019b0:	f04f 0200 	mov.w	r2, #0
 80019b4:	f04f 0300 	mov.w	r3, #0
 80019b8:	018b      	lsls	r3, r1, #6
 80019ba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019be:	0182      	lsls	r2, r0, #6
 80019c0:	1a12      	subs	r2, r2, r0
 80019c2:	eb63 0301 	sbc.w	r3, r3, r1
 80019c6:	f04f 0000 	mov.w	r0, #0
 80019ca:	f04f 0100 	mov.w	r1, #0
 80019ce:	00d9      	lsls	r1, r3, #3
 80019d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019d4:	00d0      	lsls	r0, r2, #3
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	1912      	adds	r2, r2, r4
 80019dc:	eb45 0303 	adc.w	r3, r5, r3
 80019e0:	f04f 0000 	mov.w	r0, #0
 80019e4:	f04f 0100 	mov.w	r1, #0
 80019e8:	0299      	lsls	r1, r3, #10
 80019ea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80019ee:	0290      	lsls	r0, r2, #10
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4610      	mov	r0, r2
 80019f6:	4619      	mov	r1, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	461a      	mov	r2, r3
 80019fc:	f04f 0300 	mov.w	r3, #0
 8001a00:	f7fe fc5e 	bl	80002c0 <__aeabi_uldivmod>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4613      	mov	r3, r2
 8001a0a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	0c1b      	lsrs	r3, r3, #16
 8001a12:	f003 0303 	and.w	r3, r3, #3
 8001a16:	3301      	adds	r3, #1
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a24:	60bb      	str	r3, [r7, #8]
      break;
 8001a26:	e002      	b.n	8001a2e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a28:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001a2a:	60bb      	str	r3, [r7, #8]
      break;
 8001a2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a2e:	68bb      	ldr	r3, [r7, #8]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	00f42400 	.word	0x00f42400
 8001a44:	007a1200 	.word	0x007a1200

08001a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a4c:	4b03      	ldr	r3, [pc, #12]	; (8001a5c <HAL_RCC_GetHCLKFreq+0x14>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	20000000 	.word	0x20000000

08001a60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a64:	f7ff fff0 	bl	8001a48 <HAL_RCC_GetHCLKFreq>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	0a9b      	lsrs	r3, r3, #10
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	4903      	ldr	r1, [pc, #12]	; (8001a84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a76:	5ccb      	ldrb	r3, [r1, r3]
 8001a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40023800 	.word	0x40023800
 8001a84:	080048fc 	.word	0x080048fc

08001a88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a8c:	f7ff ffdc 	bl	8001a48 <HAL_RCC_GetHCLKFreq>
 8001a90:	4602      	mov	r2, r0
 8001a92:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	0b5b      	lsrs	r3, r3, #13
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	4903      	ldr	r1, [pc, #12]	; (8001aac <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a9e:	5ccb      	ldrb	r3, [r1, r3]
 8001aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	080048fc 	.word	0x080048fc

08001ab0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d10b      	bne.n	8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d105      	bne.n	8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d075      	beq.n	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001ae4:	4bad      	ldr	r3, [pc, #692]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001aea:	f7ff f891 	bl	8000c10 <HAL_GetTick>
 8001aee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001af0:	e008      	b.n	8001b04 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001af2:	f7ff f88d 	bl	8000c10 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e18b      	b.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001b04:	4ba6      	ldr	r3, [pc, #664]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1f0      	bne.n	8001af2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0301 	and.w	r3, r3, #1
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d009      	beq.n	8001b30 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	019a      	lsls	r2, r3, #6
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	071b      	lsls	r3, r3, #28
 8001b28:	499d      	ldr	r1, [pc, #628]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d01f      	beq.n	8001b7c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001b3c:	4b98      	ldr	r3, [pc, #608]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b42:	0f1b      	lsrs	r3, r3, #28
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	019a      	lsls	r2, r3, #6
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	061b      	lsls	r3, r3, #24
 8001b56:	431a      	orrs	r2, r3
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	071b      	lsls	r3, r3, #28
 8001b5c:	4990      	ldr	r1, [pc, #576]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001b64:	4b8e      	ldr	r3, [pc, #568]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b6a:	f023 021f 	bic.w	r2, r3, #31
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	3b01      	subs	r3, #1
 8001b74:	498a      	ldr	r1, [pc, #552]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d00d      	beq.n	8001ba4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	019a      	lsls	r2, r3, #6
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	061b      	lsls	r3, r3, #24
 8001b94:	431a      	orrs	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	071b      	lsls	r3, r3, #28
 8001b9c:	4980      	ldr	r1, [pc, #512]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001ba4:	4b7d      	ldr	r3, [pc, #500]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001baa:	f7ff f831 	bl	8000c10 <HAL_GetTick>
 8001bae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001bb2:	f7ff f82d 	bl	8000c10 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e12b      	b.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001bc4:	4b76      	ldr	r3, [pc, #472]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d0f0      	beq.n	8001bb2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d105      	bne.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d079      	beq.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001be8:	4b6e      	ldr	r3, [pc, #440]	; (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001bee:	f7ff f80f 	bl	8000c10 <HAL_GetTick>
 8001bf2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001bf4:	e008      	b.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001bf6:	f7ff f80b 	bl	8000c10 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e109      	b.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001c08:	4b65      	ldr	r3, [pc, #404]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c14:	d0ef      	beq.n	8001bf6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0304 	and.w	r3, r3, #4
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d020      	beq.n	8001c64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001c22:	4b5f      	ldr	r3, [pc, #380]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c28:	0f1b      	lsrs	r3, r3, #28
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	019a      	lsls	r2, r3, #6
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	061b      	lsls	r3, r3, #24
 8001c3c:	431a      	orrs	r2, r3
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	071b      	lsls	r3, r3, #28
 8001c42:	4957      	ldr	r1, [pc, #348]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c44:	4313      	orrs	r3, r2
 8001c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001c4a:	4b55      	ldr	r3, [pc, #340]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c50:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	021b      	lsls	r3, r3, #8
 8001c5c:	4950      	ldr	r1, [pc, #320]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0308 	and.w	r3, r3, #8
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d01e      	beq.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001c70:	4b4b      	ldr	r3, [pc, #300]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c76:	0e1b      	lsrs	r3, r3, #24
 8001c78:	f003 030f 	and.w	r3, r3, #15
 8001c7c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	019a      	lsls	r2, r3, #6
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	061b      	lsls	r3, r3, #24
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	071b      	lsls	r3, r3, #28
 8001c90:	4943      	ldr	r1, [pc, #268]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001c98:	4b41      	ldr	r3, [pc, #260]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c9e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca6:	493e      	ldr	r1, [pc, #248]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001cae:	4b3d      	ldr	r3, [pc, #244]	; (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001cb4:	f7fe ffac 	bl	8000c10 <HAL_GetTick>
 8001cb8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001cba:	e008      	b.n	8001cce <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001cbc:	f7fe ffa8 	bl	8000c10 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e0a6      	b.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001cce:	4b34      	ldr	r3, [pc, #208]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001cda:	d1ef      	bne.n	8001cbc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0320 	and.w	r3, r3, #32
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f000 808d 	beq.w	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	4b2c      	ldr	r3, [pc, #176]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	4a2b      	ldr	r2, [pc, #172]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfa:	4b29      	ldr	r3, [pc, #164]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001d06:	4b28      	ldr	r3, [pc, #160]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a27      	ldr	r2, [pc, #156]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001d0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d10:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d12:	f7fe ff7d 	bl	8000c10 <HAL_GetTick>
 8001d16:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001d18:	e008      	b.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001d1a:	f7fe ff79 	bl	8000c10 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e077      	b.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001d2c:	4b1e      	ldr	r3, [pc, #120]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d0f0      	beq.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d38:	4b19      	ldr	r3, [pc, #100]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d40:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d039      	beq.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d032      	beq.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d56:	4b12      	ldr	r3, [pc, #72]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d5e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d60:	4b12      	ldr	r3, [pc, #72]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d66:	4b11      	ldr	r3, [pc, #68]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001d6c:	4a0c      	ldr	r2, [pc, #48]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001d72:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d11e      	bne.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001d7e:	f7fe ff47 	bl	8000c10 <HAL_GetTick>
 8001d82:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d84:	e014      	b.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d86:	f7fe ff43 	bl	8000c10 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d90b      	bls.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e03f      	b.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8001d9c:	42470068 	.word	0x42470068
 8001da0:	40023800 	.word	0x40023800
 8001da4:	42470070 	.word	0x42470070
 8001da8:	40007000 	.word	0x40007000
 8001dac:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001db0:	4b1c      	ldr	r3, [pc, #112]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d0e4      	beq.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001dc8:	d10d      	bne.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8001dca:	4b16      	ldr	r3, [pc, #88]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001dda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dde:	4911      	ldr	r1, [pc, #68]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	608b      	str	r3, [r1, #8]
 8001de4:	e005      	b.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8001de6:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	4a0e      	ldr	r2, [pc, #56]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001dec:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001df0:	6093      	str	r3, [r2, #8]
 8001df2:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001df4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dfe:	4909      	ldr	r1, [pc, #36]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0310 	and.w	r3, r3, #16
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d004      	beq.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8001e16:	4b04      	ldr	r3, [pc, #16]	; (8001e28 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8001e18:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3718      	adds	r7, #24
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40023800 	.word	0x40023800
 8001e28:	424711e0 	.word	0x424711e0

08001e2c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e083      	b.n	8001f46 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	7f5b      	ldrb	r3, [r3, #29]
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d105      	bne.n	8001e54 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7fe fd6a 	bl	8000928 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2202      	movs	r2, #2
 8001e58:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	22ca      	movs	r2, #202	; 0xca
 8001e60:	625a      	str	r2, [r3, #36]	; 0x24
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2253      	movs	r2, #83	; 0x53
 8001e68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 faa8 	bl	80023c0 <RTC_EnterInitMode>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d008      	beq.n	8001e88 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	22ff      	movs	r2, #255	; 0xff
 8001e7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2204      	movs	r2, #4
 8001e82:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e05e      	b.n	8001f46 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	6812      	ldr	r2, [r2, #0]
 8001e92:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8001e96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e9a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6899      	ldr	r1, [r3, #8]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685a      	ldr	r2, [r3, #4]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	695b      	ldr	r3, [r3, #20]
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	68d2      	ldr	r2, [r2, #12]
 8001ec2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6919      	ldr	r1, [r3, #16]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	041a      	lsls	r2, r3, #16
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68da      	ldr	r2, [r3, #12]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ee6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f003 0320 	and.w	r3, r3, #32
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d10e      	bne.n	8001f14 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 fa3a 	bl	8002370 <HAL_RTC_WaitForSynchro>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d008      	beq.n	8001f14 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	22ff      	movs	r2, #255	; 0xff
 8001f08:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2204      	movs	r2, #4
 8001f0e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e018      	b.n	8001f46 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f22:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	699a      	ldr	r2, [r3, #24]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	22ff      	movs	r2, #255	; 0xff
 8001f3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2201      	movs	r2, #1
 8001f42:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8001f44:	2300      	movs	r3, #0
  }
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001f4e:	b590      	push	{r4, r7, lr}
 8001f50:	b087      	sub	sp, #28
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	60f8      	str	r0, [r7, #12]
 8001f56:	60b9      	str	r1, [r7, #8]
 8001f58:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	7f1b      	ldrb	r3, [r3, #28]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d101      	bne.n	8001f6a <HAL_RTC_SetTime+0x1c>
 8001f66:	2302      	movs	r3, #2
 8001f68:	e0aa      	b.n	80020c0 <HAL_RTC_SetTime+0x172>
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2202      	movs	r2, #2
 8001f74:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d126      	bne.n	8001fca <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d102      	bne.n	8001f90 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f000 fa3f 	bl	8002418 <RTC_ByteToBcd2>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	785b      	ldrb	r3, [r3, #1]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f000 fa38 	bl	8002418 <RTC_ByteToBcd2>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001fac:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	789b      	ldrb	r3, [r3, #2]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f000 fa30 	bl	8002418 <RTC_ByteToBcd2>
 8001fb8:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001fba:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	78db      	ldrb	r3, [r3, #3]
 8001fc2:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	617b      	str	r3, [r7, #20]
 8001fc8:	e018      	b.n	8001ffc <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d102      	bne.n	8001fde <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	785b      	ldrb	r3, [r3, #1]
 8001fe8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001fea:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8001fec:	68ba      	ldr	r2, [r7, #8]
 8001fee:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001ff0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	78db      	ldrb	r3, [r3, #3]
 8001ff6:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	22ca      	movs	r2, #202	; 0xca
 8002002:	625a      	str	r2, [r3, #36]	; 0x24
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2253      	movs	r2, #83	; 0x53
 800200a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800200c:	68f8      	ldr	r0, [r7, #12]
 800200e:	f000 f9d7 	bl	80023c0 <RTC_EnterInitMode>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00b      	beq.n	8002030 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	22ff      	movs	r2, #255	; 0xff
 800201e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2204      	movs	r2, #4
 8002024:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e047      	b.n	80020c0 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800203a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800203e:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800204e:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6899      	ldr	r1, [r3, #8]
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	68da      	ldr	r2, [r3, #12]
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	431a      	orrs	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	430a      	orrs	r2, r1
 8002066:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68da      	ldr	r2, [r3, #12]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002076:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 0320 	and.w	r3, r3, #32
 8002082:	2b00      	cmp	r3, #0
 8002084:	d111      	bne.n	80020aa <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f000 f972 	bl	8002370 <HAL_RTC_WaitForSynchro>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00b      	beq.n	80020aa <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	22ff      	movs	r2, #255	; 0xff
 8002098:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2204      	movs	r2, #4
 800209e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e00a      	b.n	80020c0 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	22ff      	movs	r2, #255	; 0xff
 80020b0:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2201      	movs	r2, #1
 80020b6:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80020be:	2300      	movs	r3, #0
  }
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	371c      	adds	r7, #28
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd90      	pop	{r4, r7, pc}

080020c8 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80020d4:	2300      	movs	r3, #0
 80020d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80020fa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80020fe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	0c1b      	lsrs	r3, r3, #16
 8002104:	b2db      	uxtb	r3, r3
 8002106:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800210a:	b2da      	uxtb	r2, r3
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	0a1b      	lsrs	r3, r3, #8
 8002114:	b2db      	uxtb	r3, r3
 8002116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800211a:	b2da      	uxtb	r2, r3
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	b2db      	uxtb	r3, r3
 8002124:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002128:	b2da      	uxtb	r2, r3
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	0c1b      	lsrs	r3, r3, #16
 8002132:	b2db      	uxtb	r3, r3
 8002134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002138:	b2da      	uxtb	r2, r3
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d11a      	bne.n	800217a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f000 f983 	bl	8002454 <RTC_Bcd2ToByte>
 800214e:	4603      	mov	r3, r0
 8002150:	461a      	mov	r2, r3
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	785b      	ldrb	r3, [r3, #1]
 800215a:	4618      	mov	r0, r3
 800215c:	f000 f97a 	bl	8002454 <RTC_Bcd2ToByte>
 8002160:	4603      	mov	r3, r0
 8002162:	461a      	mov	r2, r3
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	789b      	ldrb	r3, [r3, #2]
 800216c:	4618      	mov	r0, r3
 800216e:	f000 f971 	bl	8002454 <RTC_Bcd2ToByte>
 8002172:	4603      	mov	r3, r0
 8002174:	461a      	mov	r2, r3
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3718      	adds	r7, #24
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002184:	b590      	push	{r4, r7, lr}
 8002186:	b087      	sub	sp, #28
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	7f1b      	ldrb	r3, [r3, #28]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d101      	bne.n	80021a0 <HAL_RTC_SetDate+0x1c>
 800219c:	2302      	movs	r3, #2
 800219e:	e094      	b.n	80022ca <HAL_RTC_SetDate+0x146>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2201      	movs	r2, #1
 80021a4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2202      	movs	r2, #2
 80021aa:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10e      	bne.n	80021d0 <HAL_RTC_SetDate+0x4c>
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	785b      	ldrb	r3, [r3, #1]
 80021b6:	f003 0310 	and.w	r3, r3, #16
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d008      	beq.n	80021d0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	785b      	ldrb	r3, [r3, #1]
 80021c2:	f023 0310 	bic.w	r3, r3, #16
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	330a      	adds	r3, #10
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d11c      	bne.n	8002210 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	78db      	ldrb	r3, [r3, #3]
 80021da:	4618      	mov	r0, r3
 80021dc:	f000 f91c 	bl	8002418 <RTC_ByteToBcd2>
 80021e0:	4603      	mov	r3, r0
 80021e2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	785b      	ldrb	r3, [r3, #1]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f000 f915 	bl	8002418 <RTC_ByteToBcd2>
 80021ee:	4603      	mov	r3, r0
 80021f0:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80021f2:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	789b      	ldrb	r3, [r3, #2]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f000 f90d 	bl	8002418 <RTC_ByteToBcd2>
 80021fe:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002200:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800220a:	4313      	orrs	r3, r2
 800220c:	617b      	str	r3, [r7, #20]
 800220e:	e00e      	b.n	800222e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	78db      	ldrb	r3, [r3, #3]
 8002214:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	785b      	ldrb	r3, [r3, #1]
 800221a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800221c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002222:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800222a:	4313      	orrs	r3, r2
 800222c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	22ca      	movs	r2, #202	; 0xca
 8002234:	625a      	str	r2, [r3, #36]	; 0x24
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2253      	movs	r2, #83	; 0x53
 800223c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f000 f8be 	bl	80023c0 <RTC_EnterInitMode>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00b      	beq.n	8002262 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	22ff      	movs	r2, #255	; 0xff
 8002250:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2204      	movs	r2, #4
 8002256:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e033      	b.n	80022ca <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800226c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002270:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68da      	ldr	r2, [r3, #12]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002280:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f003 0320 	and.w	r3, r3, #32
 800228c:	2b00      	cmp	r3, #0
 800228e:	d111      	bne.n	80022b4 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	f000 f86d 	bl	8002370 <HAL_RTC_WaitForSynchro>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d00b      	beq.n	80022b4 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	22ff      	movs	r2, #255	; 0xff
 80022a2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2204      	movs	r2, #4
 80022a8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2200      	movs	r2, #0
 80022ae:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e00a      	b.n	80022ca <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	22ff      	movs	r2, #255	; 0xff
 80022ba:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2201      	movs	r2, #1
 80022c0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80022c8:	2300      	movs	r3, #0
  }
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	371c      	adds	r7, #28
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd90      	pop	{r4, r7, pc}

080022d2 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b086      	sub	sp, #24
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	60f8      	str	r0, [r7, #12]
 80022da:	60b9      	str	r1, [r7, #8]
 80022dc:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80022de:	2300      	movs	r3, #0
 80022e0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80022ec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80022f0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	0c1b      	lsrs	r3, r3, #16
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	0a1b      	lsrs	r3, r3, #8
 8002300:	b2db      	uxtb	r3, r3
 8002302:	f003 031f 	and.w	r3, r3, #31
 8002306:	b2da      	uxtb	r2, r3
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	b2db      	uxtb	r3, r3
 8002310:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002314:	b2da      	uxtb	r2, r3
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	0b5b      	lsrs	r3, r3, #13
 800231e:	b2db      	uxtb	r3, r3
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	b2da      	uxtb	r2, r3
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d11a      	bne.n	8002366 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	78db      	ldrb	r3, [r3, #3]
 8002334:	4618      	mov	r0, r3
 8002336:	f000 f88d 	bl	8002454 <RTC_Bcd2ToByte>
 800233a:	4603      	mov	r3, r0
 800233c:	461a      	mov	r2, r3
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	785b      	ldrb	r3, [r3, #1]
 8002346:	4618      	mov	r0, r3
 8002348:	f000 f884 	bl	8002454 <RTC_Bcd2ToByte>
 800234c:	4603      	mov	r3, r0
 800234e:	461a      	mov	r2, r3
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	789b      	ldrb	r3, [r3, #2]
 8002358:	4618      	mov	r0, r3
 800235a:	f000 f87b 	bl	8002454 <RTC_Bcd2ToByte>
 800235e:	4603      	mov	r3, r0
 8002360:	461a      	mov	r2, r3
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	3718      	adds	r7, #24
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002378:	2300      	movs	r3, #0
 800237a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68da      	ldr	r2, [r3, #12]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800238a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800238c:	f7fe fc40 	bl	8000c10 <HAL_GetTick>
 8002390:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002392:	e009      	b.n	80023a8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002394:	f7fe fc3c 	bl	8000c10 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023a2:	d901      	bls.n	80023a8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e007      	b.n	80023b8 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	f003 0320 	and.w	r3, r3, #32
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d0ee      	beq.n	8002394 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023c8:	2300      	movs	r3, #0
 80023ca:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d119      	bne.n	800240e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023e2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80023e4:	f7fe fc14 	bl	8000c10 <HAL_GetTick>
 80023e8:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80023ea:	e009      	b.n	8002400 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80023ec:	f7fe fc10 	bl	8000c10 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023fa:	d901      	bls.n	8002400 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e007      	b.n	8002410 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800240a:	2b00      	cmp	r3, #0
 800240c:	d0ee      	beq.n	80023ec <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002422:	2300      	movs	r3, #0
 8002424:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8002426:	e005      	b.n	8002434 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	3301      	adds	r3, #1
 800242c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800242e:	79fb      	ldrb	r3, [r7, #7]
 8002430:	3b0a      	subs	r3, #10
 8002432:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8002434:	79fb      	ldrb	r3, [r7, #7]
 8002436:	2b09      	cmp	r3, #9
 8002438:	d8f6      	bhi.n	8002428 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	b2db      	uxtb	r3, r3
 800243e:	011b      	lsls	r3, r3, #4
 8002440:	b2da      	uxtb	r2, r3
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	4313      	orrs	r3, r2
 8002446:	b2db      	uxtb	r3, r3
}
 8002448:	4618      	mov	r0, r3
 800244a:	3714      	adds	r7, #20
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800245e:	2300      	movs	r3, #0
 8002460:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8002462:	79fb      	ldrb	r3, [r7, #7]
 8002464:	091b      	lsrs	r3, r3, #4
 8002466:	b2db      	uxtb	r3, r3
 8002468:	461a      	mov	r2, r3
 800246a:	4613      	mov	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8002474:	79fb      	ldrb	r3, [r7, #7]
 8002476:	f003 030f 	and.w	r3, r3, #15
 800247a:	b2da      	uxtb	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	b2db      	uxtb	r3, r3
 8002480:	4413      	add	r3, r2
 8002482:	b2db      	uxtb	r3, r3
}
 8002484:	4618      	mov	r0, r3
 8002486:	3714      	adds	r7, #20
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e03f      	b.n	8002522 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d106      	bne.n	80024bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7fe fa60 	bl	800097c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2224      	movs	r2, #36	; 0x24
 80024c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68da      	ldr	r2, [r3, #12]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 f9cb 	bl	8002870 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	691a      	ldr	r2, [r3, #16]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	695a      	ldr	r2, [r3, #20]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68da      	ldr	r2, [r3, #12]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002508:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2220      	movs	r2, #32
 8002514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2220      	movs	r2, #32
 800251c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b08a      	sub	sp, #40	; 0x28
 800252e:	af02      	add	r7, sp, #8
 8002530:	60f8      	str	r0, [r7, #12]
 8002532:	60b9      	str	r1, [r7, #8]
 8002534:	603b      	str	r3, [r7, #0]
 8002536:	4613      	mov	r3, r2
 8002538:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800253a:	2300      	movs	r3, #0
 800253c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b20      	cmp	r3, #32
 8002548:	d17c      	bne.n	8002644 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d002      	beq.n	8002556 <HAL_UART_Transmit+0x2c>
 8002550:	88fb      	ldrh	r3, [r7, #6]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e075      	b.n	8002646 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002560:	2b01      	cmp	r3, #1
 8002562:	d101      	bne.n	8002568 <HAL_UART_Transmit+0x3e>
 8002564:	2302      	movs	r3, #2
 8002566:	e06e      	b.n	8002646 <HAL_UART_Transmit+0x11c>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2221      	movs	r2, #33	; 0x21
 800257a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800257e:	f7fe fb47 	bl	8000c10 <HAL_GetTick>
 8002582:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	88fa      	ldrh	r2, [r7, #6]
 8002588:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	88fa      	ldrh	r2, [r7, #6]
 800258e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002598:	d108      	bne.n	80025ac <HAL_UART_Transmit+0x82>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d104      	bne.n	80025ac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80025a2:	2300      	movs	r3, #0
 80025a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	61bb      	str	r3, [r7, #24]
 80025aa:	e003      	b.n	80025b4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80025bc:	e02a      	b.n	8002614 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	9300      	str	r3, [sp, #0]
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	2200      	movs	r2, #0
 80025c6:	2180      	movs	r1, #128	; 0x80
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f000 f8e2 	bl	8002792 <UART_WaitOnFlagUntilTimeout>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e036      	b.n	8002646 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10b      	bne.n	80025f6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	881b      	ldrh	r3, [r3, #0]
 80025e2:	461a      	mov	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	3302      	adds	r3, #2
 80025f2:	61bb      	str	r3, [r7, #24]
 80025f4:	e007      	b.n	8002606 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	781a      	ldrb	r2, [r3, #0]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	3301      	adds	r3, #1
 8002604:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800260a:	b29b      	uxth	r3, r3
 800260c:	3b01      	subs	r3, #1
 800260e:	b29a      	uxth	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002618:	b29b      	uxth	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1cf      	bne.n	80025be <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	9300      	str	r3, [sp, #0]
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	2200      	movs	r2, #0
 8002626:	2140      	movs	r1, #64	; 0x40
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f000 f8b2 	bl	8002792 <UART_WaitOnFlagUntilTimeout>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e006      	b.n	8002646 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2220      	movs	r2, #32
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002640:	2300      	movs	r3, #0
 8002642:	e000      	b.n	8002646 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002644:	2302      	movs	r3, #2
  }
}
 8002646:	4618      	mov	r0, r3
 8002648:	3720      	adds	r7, #32
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b08a      	sub	sp, #40	; 0x28
 8002652:	af02      	add	r7, sp, #8
 8002654:	60f8      	str	r0, [r7, #12]
 8002656:	60b9      	str	r1, [r7, #8]
 8002658:	603b      	str	r3, [r7, #0]
 800265a:	4613      	mov	r3, r2
 800265c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800265e:	2300      	movs	r3, #0
 8002660:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b20      	cmp	r3, #32
 800266c:	f040 808c 	bne.w	8002788 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d002      	beq.n	800267c <HAL_UART_Receive+0x2e>
 8002676:	88fb      	ldrh	r3, [r7, #6]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d101      	bne.n	8002680 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e084      	b.n	800278a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002686:	2b01      	cmp	r3, #1
 8002688:	d101      	bne.n	800268e <HAL_UART_Receive+0x40>
 800268a:	2302      	movs	r3, #2
 800268c:	e07d      	b.n	800278a <HAL_UART_Receive+0x13c>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2222      	movs	r2, #34	; 0x22
 80026a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026aa:	f7fe fab1 	bl	8000c10 <HAL_GetTick>
 80026ae:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	88fa      	ldrh	r2, [r7, #6]
 80026b4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	88fa      	ldrh	r2, [r7, #6]
 80026ba:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026c4:	d108      	bne.n	80026d8 <HAL_UART_Receive+0x8a>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d104      	bne.n	80026d8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80026ce:	2300      	movs	r3, #0
 80026d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	61bb      	str	r3, [r7, #24]
 80026d6:	e003      	b.n	80026e0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026dc:	2300      	movs	r3, #0
 80026de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80026e8:	e043      	b.n	8002772 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	2200      	movs	r2, #0
 80026f2:	2120      	movs	r1, #32
 80026f4:	68f8      	ldr	r0, [r7, #12]
 80026f6:	f000 f84c 	bl	8002792 <UART_WaitOnFlagUntilTimeout>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e042      	b.n	800278a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10c      	bne.n	8002724 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	b29b      	uxth	r3, r3
 8002712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002716:	b29a      	uxth	r2, r3
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	3302      	adds	r3, #2
 8002720:	61bb      	str	r3, [r7, #24]
 8002722:	e01f      	b.n	8002764 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800272c:	d007      	beq.n	800273e <HAL_UART_Receive+0xf0>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10a      	bne.n	800274c <HAL_UART_Receive+0xfe>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d106      	bne.n	800274c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	b2da      	uxtb	r2, r3
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	701a      	strb	r2, [r3, #0]
 800274a:	e008      	b.n	800275e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	b2db      	uxtb	r3, r3
 8002754:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002758:	b2da      	uxtb	r2, r3
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	3301      	adds	r3, #1
 8002762:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002768:	b29b      	uxth	r3, r3
 800276a:	3b01      	subs	r3, #1
 800276c:	b29a      	uxth	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002776:	b29b      	uxth	r3, r3
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1b6      	bne.n	80026ea <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2220      	movs	r2, #32
 8002780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002784:	2300      	movs	r3, #0
 8002786:	e000      	b.n	800278a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002788:	2302      	movs	r3, #2
  }
}
 800278a:	4618      	mov	r0, r3
 800278c:	3720      	adds	r7, #32
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b090      	sub	sp, #64	; 0x40
 8002796:	af00      	add	r7, sp, #0
 8002798:	60f8      	str	r0, [r7, #12]
 800279a:	60b9      	str	r1, [r7, #8]
 800279c:	603b      	str	r3, [r7, #0]
 800279e:	4613      	mov	r3, r2
 80027a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027a2:	e050      	b.n	8002846 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027aa:	d04c      	beq.n	8002846 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80027ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d007      	beq.n	80027c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80027b2:	f7fe fa2d 	bl	8000c10 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027be:	429a      	cmp	r2, r3
 80027c0:	d241      	bcs.n	8002846 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	330c      	adds	r3, #12
 80027c8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027cc:	e853 3f00 	ldrex	r3, [r3]
 80027d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80027d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	330c      	adds	r3, #12
 80027e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80027e2:	637a      	str	r2, [r7, #52]	; 0x34
 80027e4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027ea:	e841 2300 	strex	r3, r2, [r1]
 80027ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80027f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1e5      	bne.n	80027c2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	3314      	adds	r3, #20
 80027fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	e853 3f00 	ldrex	r3, [r3]
 8002804:	613b      	str	r3, [r7, #16]
   return(result);
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	f023 0301 	bic.w	r3, r3, #1
 800280c:	63bb      	str	r3, [r7, #56]	; 0x38
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	3314      	adds	r3, #20
 8002814:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002816:	623a      	str	r2, [r7, #32]
 8002818:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800281a:	69f9      	ldr	r1, [r7, #28]
 800281c:	6a3a      	ldr	r2, [r7, #32]
 800281e:	e841 2300 	strex	r3, r2, [r1]
 8002822:	61bb      	str	r3, [r7, #24]
   return(result);
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1e5      	bne.n	80027f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2220      	movs	r2, #32
 800282e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2220      	movs	r2, #32
 8002836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e00f      	b.n	8002866 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	4013      	ands	r3, r2
 8002850:	68ba      	ldr	r2, [r7, #8]
 8002852:	429a      	cmp	r2, r3
 8002854:	bf0c      	ite	eq
 8002856:	2301      	moveq	r3, #1
 8002858:	2300      	movne	r3, #0
 800285a:	b2db      	uxtb	r3, r3
 800285c:	461a      	mov	r2, r3
 800285e:	79fb      	ldrb	r3, [r7, #7]
 8002860:	429a      	cmp	r2, r3
 8002862:	d09f      	beq.n	80027a4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3740      	adds	r7, #64	; 0x40
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
	...

08002870 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002874:	b09f      	sub	sp, #124	; 0x7c
 8002876:	af00      	add	r7, sp, #0
 8002878:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800287a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002884:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002886:	68d9      	ldr	r1, [r3, #12]
 8002888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	ea40 0301 	orr.w	r3, r0, r1
 8002890:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002894:	689a      	ldr	r2, [r3, #8]
 8002896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	431a      	orrs	r2, r3
 800289c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	431a      	orrs	r2, r3
 80028a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80028aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80028b4:	f021 010c 	bic.w	r1, r1, #12
 80028b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028be:	430b      	orrs	r3, r1
 80028c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80028cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ce:	6999      	ldr	r1, [r3, #24]
 80028d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	ea40 0301 	orr.w	r3, r0, r1
 80028d8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80028da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	4bc5      	ldr	r3, [pc, #788]	; (8002bf4 <UART_SetConfig+0x384>)
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d004      	beq.n	80028ee <UART_SetConfig+0x7e>
 80028e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	4bc3      	ldr	r3, [pc, #780]	; (8002bf8 <UART_SetConfig+0x388>)
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d103      	bne.n	80028f6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80028ee:	f7ff f8cb 	bl	8001a88 <HAL_RCC_GetPCLK2Freq>
 80028f2:	6778      	str	r0, [r7, #116]	; 0x74
 80028f4:	e002      	b.n	80028fc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80028f6:	f7ff f8b3 	bl	8001a60 <HAL_RCC_GetPCLK1Freq>
 80028fa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028fe:	69db      	ldr	r3, [r3, #28]
 8002900:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002904:	f040 80b6 	bne.w	8002a74 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002908:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800290a:	461c      	mov	r4, r3
 800290c:	f04f 0500 	mov.w	r5, #0
 8002910:	4622      	mov	r2, r4
 8002912:	462b      	mov	r3, r5
 8002914:	1891      	adds	r1, r2, r2
 8002916:	6439      	str	r1, [r7, #64]	; 0x40
 8002918:	415b      	adcs	r3, r3
 800291a:	647b      	str	r3, [r7, #68]	; 0x44
 800291c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002920:	1912      	adds	r2, r2, r4
 8002922:	eb45 0303 	adc.w	r3, r5, r3
 8002926:	f04f 0000 	mov.w	r0, #0
 800292a:	f04f 0100 	mov.w	r1, #0
 800292e:	00d9      	lsls	r1, r3, #3
 8002930:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002934:	00d0      	lsls	r0, r2, #3
 8002936:	4602      	mov	r2, r0
 8002938:	460b      	mov	r3, r1
 800293a:	1911      	adds	r1, r2, r4
 800293c:	6639      	str	r1, [r7, #96]	; 0x60
 800293e:	416b      	adcs	r3, r5
 8002940:	667b      	str	r3, [r7, #100]	; 0x64
 8002942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	461a      	mov	r2, r3
 8002948:	f04f 0300 	mov.w	r3, #0
 800294c:	1891      	adds	r1, r2, r2
 800294e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002950:	415b      	adcs	r3, r3
 8002952:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002954:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002958:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800295c:	f7fd fcb0 	bl	80002c0 <__aeabi_uldivmod>
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	4ba5      	ldr	r3, [pc, #660]	; (8002bfc <UART_SetConfig+0x38c>)
 8002966:	fba3 2302 	umull	r2, r3, r3, r2
 800296a:	095b      	lsrs	r3, r3, #5
 800296c:	011e      	lsls	r6, r3, #4
 800296e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002970:	461c      	mov	r4, r3
 8002972:	f04f 0500 	mov.w	r5, #0
 8002976:	4622      	mov	r2, r4
 8002978:	462b      	mov	r3, r5
 800297a:	1891      	adds	r1, r2, r2
 800297c:	6339      	str	r1, [r7, #48]	; 0x30
 800297e:	415b      	adcs	r3, r3
 8002980:	637b      	str	r3, [r7, #52]	; 0x34
 8002982:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002986:	1912      	adds	r2, r2, r4
 8002988:	eb45 0303 	adc.w	r3, r5, r3
 800298c:	f04f 0000 	mov.w	r0, #0
 8002990:	f04f 0100 	mov.w	r1, #0
 8002994:	00d9      	lsls	r1, r3, #3
 8002996:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800299a:	00d0      	lsls	r0, r2, #3
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
 80029a0:	1911      	adds	r1, r2, r4
 80029a2:	65b9      	str	r1, [r7, #88]	; 0x58
 80029a4:	416b      	adcs	r3, r5
 80029a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	461a      	mov	r2, r3
 80029ae:	f04f 0300 	mov.w	r3, #0
 80029b2:	1891      	adds	r1, r2, r2
 80029b4:	62b9      	str	r1, [r7, #40]	; 0x28
 80029b6:	415b      	adcs	r3, r3
 80029b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80029be:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80029c2:	f7fd fc7d 	bl	80002c0 <__aeabi_uldivmod>
 80029c6:	4602      	mov	r2, r0
 80029c8:	460b      	mov	r3, r1
 80029ca:	4b8c      	ldr	r3, [pc, #560]	; (8002bfc <UART_SetConfig+0x38c>)
 80029cc:	fba3 1302 	umull	r1, r3, r3, r2
 80029d0:	095b      	lsrs	r3, r3, #5
 80029d2:	2164      	movs	r1, #100	; 0x64
 80029d4:	fb01 f303 	mul.w	r3, r1, r3
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	3332      	adds	r3, #50	; 0x32
 80029de:	4a87      	ldr	r2, [pc, #540]	; (8002bfc <UART_SetConfig+0x38c>)
 80029e0:	fba2 2303 	umull	r2, r3, r2, r3
 80029e4:	095b      	lsrs	r3, r3, #5
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80029ec:	441e      	add	r6, r3
 80029ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029f0:	4618      	mov	r0, r3
 80029f2:	f04f 0100 	mov.w	r1, #0
 80029f6:	4602      	mov	r2, r0
 80029f8:	460b      	mov	r3, r1
 80029fa:	1894      	adds	r4, r2, r2
 80029fc:	623c      	str	r4, [r7, #32]
 80029fe:	415b      	adcs	r3, r3
 8002a00:	627b      	str	r3, [r7, #36]	; 0x24
 8002a02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a06:	1812      	adds	r2, r2, r0
 8002a08:	eb41 0303 	adc.w	r3, r1, r3
 8002a0c:	f04f 0400 	mov.w	r4, #0
 8002a10:	f04f 0500 	mov.w	r5, #0
 8002a14:	00dd      	lsls	r5, r3, #3
 8002a16:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002a1a:	00d4      	lsls	r4, r2, #3
 8002a1c:	4622      	mov	r2, r4
 8002a1e:	462b      	mov	r3, r5
 8002a20:	1814      	adds	r4, r2, r0
 8002a22:	653c      	str	r4, [r7, #80]	; 0x50
 8002a24:	414b      	adcs	r3, r1
 8002a26:	657b      	str	r3, [r7, #84]	; 0x54
 8002a28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	f04f 0300 	mov.w	r3, #0
 8002a32:	1891      	adds	r1, r2, r2
 8002a34:	61b9      	str	r1, [r7, #24]
 8002a36:	415b      	adcs	r3, r3
 8002a38:	61fb      	str	r3, [r7, #28]
 8002a3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a3e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002a42:	f7fd fc3d 	bl	80002c0 <__aeabi_uldivmod>
 8002a46:	4602      	mov	r2, r0
 8002a48:	460b      	mov	r3, r1
 8002a4a:	4b6c      	ldr	r3, [pc, #432]	; (8002bfc <UART_SetConfig+0x38c>)
 8002a4c:	fba3 1302 	umull	r1, r3, r3, r2
 8002a50:	095b      	lsrs	r3, r3, #5
 8002a52:	2164      	movs	r1, #100	; 0x64
 8002a54:	fb01 f303 	mul.w	r3, r1, r3
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	3332      	adds	r3, #50	; 0x32
 8002a5e:	4a67      	ldr	r2, [pc, #412]	; (8002bfc <UART_SetConfig+0x38c>)
 8002a60:	fba2 2303 	umull	r2, r3, r2, r3
 8002a64:	095b      	lsrs	r3, r3, #5
 8002a66:	f003 0207 	and.w	r2, r3, #7
 8002a6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4432      	add	r2, r6
 8002a70:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002a72:	e0b9      	b.n	8002be8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a76:	461c      	mov	r4, r3
 8002a78:	f04f 0500 	mov.w	r5, #0
 8002a7c:	4622      	mov	r2, r4
 8002a7e:	462b      	mov	r3, r5
 8002a80:	1891      	adds	r1, r2, r2
 8002a82:	6139      	str	r1, [r7, #16]
 8002a84:	415b      	adcs	r3, r3
 8002a86:	617b      	str	r3, [r7, #20]
 8002a88:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002a8c:	1912      	adds	r2, r2, r4
 8002a8e:	eb45 0303 	adc.w	r3, r5, r3
 8002a92:	f04f 0000 	mov.w	r0, #0
 8002a96:	f04f 0100 	mov.w	r1, #0
 8002a9a:	00d9      	lsls	r1, r3, #3
 8002a9c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002aa0:	00d0      	lsls	r0, r2, #3
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	eb12 0804 	adds.w	r8, r2, r4
 8002aaa:	eb43 0905 	adc.w	r9, r3, r5
 8002aae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f04f 0100 	mov.w	r1, #0
 8002ab8:	f04f 0200 	mov.w	r2, #0
 8002abc:	f04f 0300 	mov.w	r3, #0
 8002ac0:	008b      	lsls	r3, r1, #2
 8002ac2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002ac6:	0082      	lsls	r2, r0, #2
 8002ac8:	4640      	mov	r0, r8
 8002aca:	4649      	mov	r1, r9
 8002acc:	f7fd fbf8 	bl	80002c0 <__aeabi_uldivmod>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	4b49      	ldr	r3, [pc, #292]	; (8002bfc <UART_SetConfig+0x38c>)
 8002ad6:	fba3 2302 	umull	r2, r3, r3, r2
 8002ada:	095b      	lsrs	r3, r3, #5
 8002adc:	011e      	lsls	r6, r3, #4
 8002ade:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f04f 0100 	mov.w	r1, #0
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	460b      	mov	r3, r1
 8002aea:	1894      	adds	r4, r2, r2
 8002aec:	60bc      	str	r4, [r7, #8]
 8002aee:	415b      	adcs	r3, r3
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002af6:	1812      	adds	r2, r2, r0
 8002af8:	eb41 0303 	adc.w	r3, r1, r3
 8002afc:	f04f 0400 	mov.w	r4, #0
 8002b00:	f04f 0500 	mov.w	r5, #0
 8002b04:	00dd      	lsls	r5, r3, #3
 8002b06:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002b0a:	00d4      	lsls	r4, r2, #3
 8002b0c:	4622      	mov	r2, r4
 8002b0e:	462b      	mov	r3, r5
 8002b10:	1814      	adds	r4, r2, r0
 8002b12:	64bc      	str	r4, [r7, #72]	; 0x48
 8002b14:	414b      	adcs	r3, r1
 8002b16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f04f 0100 	mov.w	r1, #0
 8002b22:	f04f 0200 	mov.w	r2, #0
 8002b26:	f04f 0300 	mov.w	r3, #0
 8002b2a:	008b      	lsls	r3, r1, #2
 8002b2c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002b30:	0082      	lsls	r2, r0, #2
 8002b32:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002b36:	f7fd fbc3 	bl	80002c0 <__aeabi_uldivmod>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	4b2f      	ldr	r3, [pc, #188]	; (8002bfc <UART_SetConfig+0x38c>)
 8002b40:	fba3 1302 	umull	r1, r3, r3, r2
 8002b44:	095b      	lsrs	r3, r3, #5
 8002b46:	2164      	movs	r1, #100	; 0x64
 8002b48:	fb01 f303 	mul.w	r3, r1, r3
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	011b      	lsls	r3, r3, #4
 8002b50:	3332      	adds	r3, #50	; 0x32
 8002b52:	4a2a      	ldr	r2, [pc, #168]	; (8002bfc <UART_SetConfig+0x38c>)
 8002b54:	fba2 2303 	umull	r2, r3, r2, r3
 8002b58:	095b      	lsrs	r3, r3, #5
 8002b5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b5e:	441e      	add	r6, r3
 8002b60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b62:	4618      	mov	r0, r3
 8002b64:	f04f 0100 	mov.w	r1, #0
 8002b68:	4602      	mov	r2, r0
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	1894      	adds	r4, r2, r2
 8002b6e:	603c      	str	r4, [r7, #0]
 8002b70:	415b      	adcs	r3, r3
 8002b72:	607b      	str	r3, [r7, #4]
 8002b74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b78:	1812      	adds	r2, r2, r0
 8002b7a:	eb41 0303 	adc.w	r3, r1, r3
 8002b7e:	f04f 0400 	mov.w	r4, #0
 8002b82:	f04f 0500 	mov.w	r5, #0
 8002b86:	00dd      	lsls	r5, r3, #3
 8002b88:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002b8c:	00d4      	lsls	r4, r2, #3
 8002b8e:	4622      	mov	r2, r4
 8002b90:	462b      	mov	r3, r5
 8002b92:	eb12 0a00 	adds.w	sl, r2, r0
 8002b96:	eb43 0b01 	adc.w	fp, r3, r1
 8002b9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f04f 0100 	mov.w	r1, #0
 8002ba4:	f04f 0200 	mov.w	r2, #0
 8002ba8:	f04f 0300 	mov.w	r3, #0
 8002bac:	008b      	lsls	r3, r1, #2
 8002bae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002bb2:	0082      	lsls	r2, r0, #2
 8002bb4:	4650      	mov	r0, sl
 8002bb6:	4659      	mov	r1, fp
 8002bb8:	f7fd fb82 	bl	80002c0 <__aeabi_uldivmod>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	4b0e      	ldr	r3, [pc, #56]	; (8002bfc <UART_SetConfig+0x38c>)
 8002bc2:	fba3 1302 	umull	r1, r3, r3, r2
 8002bc6:	095b      	lsrs	r3, r3, #5
 8002bc8:	2164      	movs	r1, #100	; 0x64
 8002bca:	fb01 f303 	mul.w	r3, r1, r3
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	011b      	lsls	r3, r3, #4
 8002bd2:	3332      	adds	r3, #50	; 0x32
 8002bd4:	4a09      	ldr	r2, [pc, #36]	; (8002bfc <UART_SetConfig+0x38c>)
 8002bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bda:	095b      	lsrs	r3, r3, #5
 8002bdc:	f003 020f 	and.w	r2, r3, #15
 8002be0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4432      	add	r2, r6
 8002be6:	609a      	str	r2, [r3, #8]
}
 8002be8:	bf00      	nop
 8002bea:	377c      	adds	r7, #124	; 0x7c
 8002bec:	46bd      	mov	sp, r7
 8002bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bf2:	bf00      	nop
 8002bf4:	40011000 	.word	0x40011000
 8002bf8:	40011400 	.word	0x40011400
 8002bfc:	51eb851f 	.word	0x51eb851f

08002c00 <uartSendStringSize>:
/**@brief sends a number of bytes through the USART peripheral
 * @param pstring: pointer of type uint8_t to string
 * @param size: amount of bytes to send
 * @retval none
 */
void uartSendStringSize(uint8_t * pstring, uint16_t size){
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&UartHandle, pstring, size, HAL_MAX_DELAY);
 8002c0c:	887a      	ldrh	r2, [r7, #2]
 8002c0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	4803      	ldr	r0, [pc, #12]	; (8002c24 <uartSendStringSize+0x24>)
 8002c16:	f7ff fc88 	bl	800252a <HAL_UART_Transmit>
}
 8002c1a:	bf00      	nop
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	2000021c 	.word	0x2000021c

08002c28 <uartinit>:
 * @param none
 * @retval true if HAL_UART_INIT was successful
 * @retval false if HAL_UART_INIT had an error
 */

HAL_StatusTypeDef uartinit(){
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0

	UartHandle.Instance        = UARTx;
 8002c2c:	4b11      	ldr	r3, [pc, #68]	; (8002c74 <uartinit+0x4c>)
 8002c2e:	4a12      	ldr	r2, [pc, #72]	; (8002c78 <uartinit+0x50>)
 8002c30:	601a      	str	r2, [r3, #0]
	UartHandle.Init.BaudRate   = BAUDRATE;
 8002c32:	4b10      	ldr	r3, [pc, #64]	; (8002c74 <uartinit+0x4c>)
 8002c34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c38:	605a      	str	r2, [r3, #4]
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8002c3a:	4b0e      	ldr	r3, [pc, #56]	; (8002c74 <uartinit+0x4c>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	609a      	str	r2, [r3, #8]
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8002c40:	4b0c      	ldr	r3, [pc, #48]	; (8002c74 <uartinit+0x4c>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	60da      	str	r2, [r3, #12]
	UartHandle.Init.Parity     = UART_PARITY_NONE;
 8002c46:	4b0b      	ldr	r3, [pc, #44]	; (8002c74 <uartinit+0x4c>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	611a      	str	r2, [r3, #16]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8002c4c:	4b09      	ldr	r3, [pc, #36]	; (8002c74 <uartinit+0x4c>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	619a      	str	r2, [r3, #24]
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8002c52:	4b08      	ldr	r3, [pc, #32]	; (8002c74 <uartinit+0x4c>)
 8002c54:	220c      	movs	r2, #12
 8002c56:	615a      	str	r2, [r3, #20]
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c58:	4b06      	ldr	r3, [pc, #24]	; (8002c74 <uartinit+0x4c>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	61da      	str	r2, [r3, #28]

	if (HAL_UART_Init(&UartHandle) != HAL_OK)
 8002c5e:	4805      	ldr	r0, [pc, #20]	; (8002c74 <uartinit+0x4c>)
 8002c60:	f7ff fc16 	bl	8002490 <HAL_UART_Init>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <uartinit+0x46>
	{
		/* Initialization Error */
		return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e000      	b.n	8002c70 <uartinit+0x48>
	}
	return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	2000021c 	.word	0x2000021c
 8002c78:	40004800 	.word	0x40004800

08002c7c <uartsendString>:
/**@brief sends string through USART peripheral
 * @param pstring: pointer of type uint8_t to string
 * @retval none
 */
void uartsendString(uint8_t * pstring){
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
	uartSendStringSize(pstring, strlen((const char*)pstring));
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f7fd fabd 	bl	8000204 <strlen>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	4619      	mov	r1, r3
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f7ff ffb5 	bl	8002c00 <uartSendStringSize>
}
 8002c96:	bf00      	nop
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
	...

08002ca0 <uartReceiveString>:
/* @brief receives string until \n in blocking mode
 * @param pointer to the string to fill
 * @retval none
 */

void uartReceiveString(char * pstring){
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
	uint8_t tempBuff;
	uint16_t amountOfBytes = 0;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	81fb      	strh	r3, [r7, #14]
	for(;;){
		HAL_UART_Receive(&UartHandle, &tempBuff, 1, HAL_MAX_DELAY);
 8002cac:	f107 010d 	add.w	r1, r7, #13
 8002cb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	480e      	ldr	r0, [pc, #56]	; (8002cf0 <uartReceiveString+0x50>)
 8002cb8:	f7ff fcc9 	bl	800264e <HAL_UART_Receive>
		/*We break from infinite loop when \r is detected*/
		if(tempBuff == '\r'){
 8002cbc:	7b7b      	ldrb	r3, [r7, #13]
 8002cbe:	2b0d      	cmp	r3, #13
 8002cc0:	d108      	bne.n	8002cd4 <uartReceiveString+0x34>
			/*Add \0 to indicate end of string, so we can compare it*/
			pstring[amountOfBytes++] = '\0';
 8002cc2:	89fb      	ldrh	r3, [r7, #14]
 8002cc4:	1c5a      	adds	r2, r3, #1
 8002cc6:	81fa      	strh	r2, [r7, #14]
 8002cc8:	461a      	mov	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4413      	add	r3, r2
 8002cce:	2200      	movs	r2, #0
 8002cd0:	701a      	strb	r2, [r3, #0]
			break;
 8002cd2:	e008      	b.n	8002ce6 <uartReceiveString+0x46>
		}
		else{
			pstring[amountOfBytes++] = tempBuff;
 8002cd4:	89fb      	ldrh	r3, [r7, #14]
 8002cd6:	1c5a      	adds	r2, r3, #1
 8002cd8:	81fa      	strh	r2, [r7, #14]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4413      	add	r3, r2
 8002ce0:	7b7a      	ldrb	r2, [r7, #13]
 8002ce2:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive(&UartHandle, &tempBuff, 1, HAL_MAX_DELAY);
 8002ce4:	e7e2      	b.n	8002cac <uartReceiveString+0xc>
		}
	}
}
 8002ce6:	bf00      	nop
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	2000021c 	.word	0x2000021c

08002cf4 <Consola_fill_param_msg>:
/******************Private functions****************/
/* @brief fills the station parameters, factoryParams, with its values
 * @param none
 * @retval none
 */
static void Consola_fill_param_msg(){
 8002cf4:	b5b0      	push	{r4, r5, r7, lr}
 8002cf6:	b0a6      	sub	sp, #152	; 0x98
 8002cf8:	af04      	add	r7, sp, #16
	char tempNameBuff[128];
	uint8_t TDR315 = Station_getTDR_315();
 8002cfa:	f000 fb27 	bl	800334c <Station_getTDR_315>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	uint8_t PiranomDavis = Station_piranometerDavis();
 8002d04:	f000 fb2e 	bl	8003364 <Station_piranometerDavis>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
	uint8_t ethernet = Station_getEthernet();
 8002d0e:	f000 faf9 	bl	8003304 <Station_getEthernet>
 8002d12:	4603      	mov	r3, r0
 8002d14:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	uint8_t cellular = Station_getCellular();
 8002d18:	f000 fb00 	bl	800331c <Station_getCellular>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
	uint16_t txPeriod = Station_getTxperiod();
 8002d22:	f000 fb07 	bl	8003334 <Station_getTxperiod>
 8002d26:	4603      	mov	r3, r0
 8002d28:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
	Station_getName(tempNameBuff);
 8002d2c:	463b      	mov	r3, r7
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 fada 	bl	80032e8 <Station_getName>
	sprintf((char *)stationParamsBuff, (char*)factoryParams, tempNameBuff, TDR315, PiranomDavis, cellular, ethernet, txPeriod);
 8002d34:	f897 5087 	ldrb.w	r5, [r7, #135]	; 0x87
 8002d38:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8002d3c:	f897 2084 	ldrb.w	r2, [r7, #132]	; 0x84
 8002d40:	f897 1085 	ldrb.w	r1, [r7, #133]	; 0x85
 8002d44:	f8b7 0082 	ldrh.w	r0, [r7, #130]	; 0x82
 8002d48:	463c      	mov	r4, r7
 8002d4a:	9003      	str	r0, [sp, #12]
 8002d4c:	9102      	str	r1, [sp, #8]
 8002d4e:	9201      	str	r2, [sp, #4]
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	462b      	mov	r3, r5
 8002d54:	4622      	mov	r2, r4
 8002d56:	4904      	ldr	r1, [pc, #16]	; (8002d68 <Consola_fill_param_msg+0x74>)
 8002d58:	4804      	ldr	r0, [pc, #16]	; (8002d6c <Consola_fill_param_msg+0x78>)
 8002d5a:	f000 fbbb 	bl	80034d4 <siprintf>
}
 8002d5e:	bf00      	nop
 8002d60:	3788      	adds	r7, #136	; 0x88
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bdb0      	pop	{r4, r5, r7, pc}
 8002d66:	bf00      	nop
 8002d68:	20000104 	.word	0x20000104
 8002d6c:	200002a0 	.word	0x200002a0

08002d70 <Consola_set_station_params>:

static void Consola_set_station_params(){
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
	uartsendString((uint8_t *)"Indique el nombre de la estacion: ");
 8002d74:	4825      	ldr	r0, [pc, #148]	; (8002e0c <Consola_set_station_params+0x9c>)
 8002d76:	f7ff ff81 	bl	8002c7c <uartsendString>
	uartReceiveString(buffer);
 8002d7a:	4825      	ldr	r0, [pc, #148]	; (8002e10 <Consola_set_station_params+0xa0>)
 8002d7c:	f7ff ff90 	bl	8002ca0 <uartReceiveString>
	Station_set_name(buffer);
 8002d80:	4823      	ldr	r0, [pc, #140]	; (8002e10 <Consola_set_station_params+0xa0>)
 8002d82:	f000 fafb 	bl	800337c <Station_set_name>
	uartsendString((uint8_t *)"\r\nIndique si se cuenta con ethernet: ");
 8002d86:	4823      	ldr	r0, [pc, #140]	; (8002e14 <Consola_set_station_params+0xa4>)
 8002d88:	f7ff ff78 	bl	8002c7c <uartsendString>
	uartReceiveString(buffer);
 8002d8c:	4820      	ldr	r0, [pc, #128]	; (8002e10 <Consola_set_station_params+0xa0>)
 8002d8e:	f7ff ff87 	bl	8002ca0 <uartReceiveString>
	Station_set_ethernet(buffer[0]);
 8002d92:	4b1f      	ldr	r3, [pc, #124]	; (8002e10 <Consola_set_station_params+0xa0>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f000 fb02 	bl	80033a0 <Station_set_ethernet>
	uartsendString((uint8_t *)"\r\nIndique si se cuenta con modem: ");
 8002d9c:	481e      	ldr	r0, [pc, #120]	; (8002e18 <Consola_set_station_params+0xa8>)
 8002d9e:	f7ff ff6d 	bl	8002c7c <uartsendString>
	uartReceiveString(buffer);
 8002da2:	481b      	ldr	r0, [pc, #108]	; (8002e10 <Consola_set_station_params+0xa0>)
 8002da4:	f7ff ff7c 	bl	8002ca0 <uartReceiveString>
	Station_set_cellular(buffer[0]);
 8002da8:	4b19      	ldr	r3, [pc, #100]	; (8002e10 <Consola_set_station_params+0xa0>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f000 fb0b 	bl	80033c8 <Station_set_cellular>
	uartsendString((uint8_t *)"\r\nIndique el periodo de transmision en minutos: ");
 8002db2:	481a      	ldr	r0, [pc, #104]	; (8002e1c <Consola_set_station_params+0xac>)
 8002db4:	f7ff ff62 	bl	8002c7c <uartsendString>
	uartReceiveString(buffer);
 8002db8:	4815      	ldr	r0, [pc, #84]	; (8002e10 <Consola_set_station_params+0xa0>)
 8002dba:	f7ff ff71 	bl	8002ca0 <uartReceiveString>
	Station_set_txPeriod(buffer);
 8002dbe:	4814      	ldr	r0, [pc, #80]	; (8002e10 <Consola_set_station_params+0xa0>)
 8002dc0:	f000 fb16 	bl	80033f0 <Station_set_txPeriod>
	uartsendString((uint8_t *)"\r\nIndique si la estacion cuenta con un TDR-315: ");
 8002dc4:	4816      	ldr	r0, [pc, #88]	; (8002e20 <Consola_set_station_params+0xb0>)
 8002dc6:	f7ff ff59 	bl	8002c7c <uartsendString>
	uartReceiveString(buffer);
 8002dca:	4811      	ldr	r0, [pc, #68]	; (8002e10 <Consola_set_station_params+0xa0>)
 8002dcc:	f7ff ff68 	bl	8002ca0 <uartReceiveString>
	Station_set_TDR315(buffer[0]);
 8002dd0:	4b0f      	ldr	r3, [pc, #60]	; (8002e10 <Consola_set_station_params+0xa0>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f000 fb23 	bl	8003420 <Station_set_TDR315>
	uartsendString((uint8_t *)"\r\nIndique si la estacion cuenta con un piranometro Davis: ");
 8002dda:	4812      	ldr	r0, [pc, #72]	; (8002e24 <Consola_set_station_params+0xb4>)
 8002ddc:	f7ff ff4e 	bl	8002c7c <uartsendString>
	uartReceiveString(buffer);
 8002de0:	480b      	ldr	r0, [pc, #44]	; (8002e10 <Consola_set_station_params+0xa0>)
 8002de2:	f7ff ff5d 	bl	8002ca0 <uartReceiveString>
	Station_set_piranometerDavis(buffer[0]);
 8002de6:	4b0a      	ldr	r3, [pc, #40]	; (8002e10 <Consola_set_station_params+0xa0>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f000 fb2c 	bl	8003448 <Station_set_piranometerDavis>
	uartsendString((uint8_t *)"\r\nParametros seteados exitosamente\r\n");
 8002df0:	480d      	ldr	r0, [pc, #52]	; (8002e28 <Consola_set_station_params+0xb8>)
 8002df2:	f7ff ff43 	bl	8002c7c <uartsendString>
	HAL_Delay(100);
 8002df6:	2064      	movs	r0, #100	; 0x64
 8002df8:	f7fd ff16 	bl	8000c28 <HAL_Delay>
	Consola_fill_param_msg();
 8002dfc:	f7ff ff7a 	bl	8002cf4 <Consola_fill_param_msg>
	uartsendString(stationParamsBuff);
 8002e00:	480a      	ldr	r0, [pc, #40]	; (8002e2c <Consola_set_station_params+0xbc>)
 8002e02:	f7ff ff3b 	bl	8002c7c <uartsendString>
}
 8002e06:	bf00      	nop
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	080046d0 	.word	0x080046d0
 8002e10:	20000260 	.word	0x20000260
 8002e14:	080046f4 	.word	0x080046f4
 8002e18:	0800471c 	.word	0x0800471c
 8002e1c:	08004740 	.word	0x08004740
 8002e20:	08004774 	.word	0x08004774
 8002e24:	080047a8 	.word	0x080047a8
 8002e28:	080047e4 	.word	0x080047e4
 8002e2c:	200002a0 	.word	0x200002a0

08002e30 <Consola_updateScreen_RTC>:
/******************Public functions*****************/
/* @brief Obtains the RTC date and time and prints it via serial port
 * @param none
 * @retval none
 */
void Consola_updateScreen_RTC(){
 8002e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e32:	b0a5      	sub	sp, #148	; 0x94
 8002e34:	af04      	add	r7, sp, #16
	/*Obtain current time and store it*/
	char dateAndTimeStr[100]; // 19:12:53 22/04/2022
	RTC_TimeTypeDef timeStruct;
	RTC_DateTypeDef dateStruct;

	RTC_get_time(&timeStruct);
 8002e36:	f107 0308 	add.w	r3, r7, #8
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 f964 	bl	8003108 <RTC_get_time>
	RTC_get_date(&dateStruct);
 8002e40:	1d3b      	adds	r3, r7, #4
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 f976 	bl	8003134 <RTC_get_date>
	//uartsendString(timeStruct.Hours);
	sprintf(dateAndTimeStr, "%d/%d/%d %d/%d/%d\r\n", timeStruct.Hours, timeStruct.Minutes, timeStruct.Seconds, dateStruct.Date, dateStruct.Month, dateStruct.Year);
 8002e48:	7a3b      	ldrb	r3, [r7, #8]
 8002e4a:	461d      	mov	r5, r3
 8002e4c:	7a7b      	ldrb	r3, [r7, #9]
 8002e4e:	461e      	mov	r6, r3
 8002e50:	7abb      	ldrb	r3, [r7, #10]
 8002e52:	79ba      	ldrb	r2, [r7, #6]
 8002e54:	7979      	ldrb	r1, [r7, #5]
 8002e56:	79f8      	ldrb	r0, [r7, #7]
 8002e58:	4604      	mov	r4, r0
 8002e5a:	f107 001c 	add.w	r0, r7, #28
 8002e5e:	9403      	str	r4, [sp, #12]
 8002e60:	9102      	str	r1, [sp, #8]
 8002e62:	9201      	str	r2, [sp, #4]
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	4633      	mov	r3, r6
 8002e68:	462a      	mov	r2, r5
 8002e6a:	4906      	ldr	r1, [pc, #24]	; (8002e84 <Consola_updateScreen_RTC+0x54>)
 8002e6c:	f000 fb32 	bl	80034d4 <siprintf>

	/*Send through serial port*/
	uartsendString((uint8_t *) dateAndTimeStr);
 8002e70:	f107 031c 	add.w	r3, r7, #28
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff ff01 	bl	8002c7c <uartsendString>
}
 8002e7a:	bf00      	nop
 8002e7c:	3784      	adds	r7, #132	; 0x84
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e82:	bf00      	nop
 8002e84:	0800480c 	.word	0x0800480c

08002e88 <Consola_print_WelcomeMessage>:
/* @brief Prints a banner, the station parameters and the available commands
 * @param void
 * @retval none
 */
void Consola_print_WelcomeMessage(){
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
	uartsendString(welcomeMessage);
 8002e8c:	4809      	ldr	r0, [pc, #36]	; (8002eb4 <Consola_print_WelcomeMessage+0x2c>)
 8002e8e:	f7ff fef5 	bl	8002c7c <uartsendString>
	HAL_Delay(100);
 8002e92:	2064      	movs	r0, #100	; 0x64
 8002e94:	f7fd fec8 	bl	8000c28 <HAL_Delay>
	Consola_fill_param_msg();
 8002e98:	f7ff ff2c 	bl	8002cf4 <Consola_fill_param_msg>
	uartsendString(stationParamsBuff);
 8002e9c:	4806      	ldr	r0, [pc, #24]	; (8002eb8 <Consola_print_WelcomeMessage+0x30>)
 8002e9e:	f7ff feed 	bl	8002c7c <uartsendString>
	HAL_Delay(1000);
 8002ea2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ea6:	f7fd febf 	bl	8000c28 <HAL_Delay>
	uartsendString(generalOptions);
 8002eaa:	4804      	ldr	r0, [pc, #16]	; (8002ebc <Consola_print_WelcomeMessage+0x34>)
 8002eac:	f7ff fee6 	bl	8002c7c <uartsendString>
}
 8002eb0:	bf00      	nop
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	2000000c 	.word	0x2000000c
 8002eb8:	200002a0 	.word	0x200002a0
 8002ebc:	20000044 	.word	0x20000044

08002ec0 <Consola_read_CMD>:
/* @brief Obtains the user command and acts accordingly
 * @param none
 * @retval HAL_OK
 */
void Consola_read_CMD(){
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0

	/*Receive data through USART and store it in buffer*/
	uartReceiveString(buffer);
 8002ec4:	4822      	ldr	r0, [pc, #136]	; (8002f50 <Consola_read_CMD+0x90>)
 8002ec6:	f7ff feeb 	bl	8002ca0 <uartReceiveString>

	/*Check if command was received*/
	if (strcmp(buffer, "") != 0){
 8002eca:	4b21      	ldr	r3, [pc, #132]	; (8002f50 <Consola_read_CMD+0x90>)
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d03c      	beq.n	8002f4c <Consola_read_CMD+0x8c>
		/*Check if the command is valid, and act accordingly*/
		if(!strcmp(buffer, "SetRTC")){
 8002ed2:	4920      	ldr	r1, [pc, #128]	; (8002f54 <Consola_read_CMD+0x94>)
 8002ed4:	481e      	ldr	r0, [pc, #120]	; (8002f50 <Consola_read_CMD+0x90>)
 8002ed6:	f7fd f98b 	bl	80001f0 <strcmp>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d10e      	bne.n	8002efe <Consola_read_CMD+0x3e>
			uartsendString((uint8_t *)"Set the time and date hh:mm:ss dd/mm/yy wd\r\n");
 8002ee0:	481d      	ldr	r0, [pc, #116]	; (8002f58 <Consola_read_CMD+0x98>)
 8002ee2:	f7ff fecb 	bl	8002c7c <uartsendString>
			uartReceiveString(buffer);
 8002ee6:	481a      	ldr	r0, [pc, #104]	; (8002f50 <Consola_read_CMD+0x90>)
 8002ee8:	f7ff feda 	bl	8002ca0 <uartReceiveString>
			RTC_parse_data_set_RTC((uint8_t*)buffer);
 8002eec:	4818      	ldr	r0, [pc, #96]	; (8002f50 <Consola_read_CMD+0x90>)
 8002eee:	f000 f937 	bl	8003160 <RTC_parse_data_set_RTC>
			uartsendString((uint8_t *)"Time and date updated: ");
 8002ef2:	481a      	ldr	r0, [pc, #104]	; (8002f5c <Consola_read_CMD+0x9c>)
 8002ef4:	f7ff fec2 	bl	8002c7c <uartsendString>
			Consola_updateScreen_RTC();
 8002ef8:	f7ff ff9a 	bl	8002e30 <Consola_updateScreen_RTC>
 8002efc:	e023      	b.n	8002f46 <Consola_read_CMD+0x86>
		}else if(!strcmp(buffer, "SetStationParams")){
 8002efe:	4918      	ldr	r1, [pc, #96]	; (8002f60 <Consola_read_CMD+0xa0>)
 8002f00:	4813      	ldr	r0, [pc, #76]	; (8002f50 <Consola_read_CMD+0x90>)
 8002f02:	f7fd f975 	bl	80001f0 <strcmp>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d102      	bne.n	8002f12 <Consola_read_CMD+0x52>
			/*Sequential parameter setting*/
			Consola_set_station_params();
 8002f0c:	f7ff ff30 	bl	8002d70 <Consola_set_station_params>
 8002f10:	e019      	b.n	8002f46 <Consola_read_CMD+0x86>
		}else if(!strcmp(buffer, "PrintParams")){
 8002f12:	4914      	ldr	r1, [pc, #80]	; (8002f64 <Consola_read_CMD+0xa4>)
 8002f14:	480e      	ldr	r0, [pc, #56]	; (8002f50 <Consola_read_CMD+0x90>)
 8002f16:	f7fd f96b 	bl	80001f0 <strcmp>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d105      	bne.n	8002f2c <Consola_read_CMD+0x6c>
			/*Prints the station parameters via serial port*/
			Consola_fill_param_msg();
 8002f20:	f7ff fee8 	bl	8002cf4 <Consola_fill_param_msg>
			uartsendString(stationParamsBuff);
 8002f24:	4810      	ldr	r0, [pc, #64]	; (8002f68 <Consola_read_CMD+0xa8>)
 8002f26:	f7ff fea9 	bl	8002c7c <uartsendString>
 8002f2a:	e00c      	b.n	8002f46 <Consola_read_CMD+0x86>
		}else if(!strcmp(buffer, "PrintTime")){
 8002f2c:	490f      	ldr	r1, [pc, #60]	; (8002f6c <Consola_read_CMD+0xac>)
 8002f2e:	4808      	ldr	r0, [pc, #32]	; (8002f50 <Consola_read_CMD+0x90>)
 8002f30:	f7fd f95e 	bl	80001f0 <strcmp>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d102      	bne.n	8002f40 <Consola_read_CMD+0x80>
			Consola_updateScreen_RTC();
 8002f3a:	f7ff ff79 	bl	8002e30 <Consola_updateScreen_RTC>
 8002f3e:	e002      	b.n	8002f46 <Consola_read_CMD+0x86>
		}else{
			uartsendString((uint8_t *)"Comando invalido, ingrese de vuelta\r\n");
 8002f40:	480b      	ldr	r0, [pc, #44]	; (8002f70 <Consola_read_CMD+0xb0>)
 8002f42:	f7ff fe9b 	bl	8002c7c <uartsendString>
		}
		/*Empty the string*/
		strcpy(buffer, "");
 8002f46:	4b02      	ldr	r3, [pc, #8]	; (8002f50 <Consola_read_CMD+0x90>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	701a      	strb	r2, [r3, #0]
	}
}
 8002f4c:	bf00      	nop
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	20000260 	.word	0x20000260
 8002f54:	08004820 	.word	0x08004820
 8002f58:	08004828 	.word	0x08004828
 8002f5c:	08004858 	.word	0x08004858
 8002f60:	08004870 	.word	0x08004870
 8002f64:	08004884 	.word	0x08004884
 8002f68:	200002a0 	.word	0x200002a0
 8002f6c:	08004890 	.word	0x08004890
 8002f70:	0800489c 	.word	0x0800489c

08002f74 <FSM_init>:
/*************Public variables*************/
/* @brief inits the respective peripherals
 * @param none
 * @retval none
 */
void FSM_init(){
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0

	/*Init peripherals*/
	RTC_init();
 8002f78:	f000 f852 	bl	8003020 <RTC_init>
	uartinit();
 8002f7c:	f7ff fe54 	bl	8002c28 <uartinit>
	Station_init();
 8002f80:	f000 f992 	bl	80032a8 <Station_init>
	/*HMI messages*/
	Consola_print_WelcomeMessage();
 8002f84:	f7ff ff80 	bl	8002e88 <Consola_print_WelcomeMessage>
	/*Set current Status*/ //TODO: currentState should be stored and read from flash
	currentState = CONSOLE_MODE;
 8002f88:	4b02      	ldr	r3, [pc, #8]	; (8002f94 <FSM_init+0x20>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	701a      	strb	r2, [r3, #0]
}
 8002f8e:	bf00      	nop
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	20000394 	.word	0x20000394

08002f98 <FSM_update>:
/* @brief Checks the stations current state and acts on it
 * @param none
 * @retval none
 */
void FSM_update(){
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
	switch(currentState){
 8002f9c:	4b0a      	ldr	r3, [pc, #40]	; (8002fc8 <FSM_update+0x30>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d009      	beq.n	8002fb8 <FSM_update+0x20>
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	dc09      	bgt.n	8002fbc <FSM_update+0x24>
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d002      	beq.n	8002fb2 <FSM_update+0x1a>
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d007      	beq.n	8002fc0 <FSM_update+0x28>
		case IOT_MODE:
			break;
		case ADQUISITION_MODE:
			break;
		default:
			break;
 8002fb0:	e004      	b.n	8002fbc <FSM_update+0x24>
			Consola_read_CMD();
 8002fb2:	f7ff ff85 	bl	8002ec0 <Consola_read_CMD>
			break;
 8002fb6:	e004      	b.n	8002fc2 <FSM_update+0x2a>
			break;
 8002fb8:	bf00      	nop
 8002fba:	e002      	b.n	8002fc2 <FSM_update+0x2a>
			break;
 8002fbc:	bf00      	nop
 8002fbe:	e000      	b.n	8002fc2 <FSM_update+0x2a>
			break;
 8002fc0:	bf00      	nop
	}
}
 8002fc2:	bf00      	nop
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	20000394 	.word	0x20000394

08002fcc <dec2bcd>:

static RTC_HandleTypeDef hrtc;

/****************Private Functions*************/
unsigned int dec2bcd(unsigned int num) // num is now 65535
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b087      	sub	sp, #28
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
    unsigned int ones = 0;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	617b      	str	r3, [r7, #20]
    unsigned int tens = 0;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	613b      	str	r3, [r7, #16]
    unsigned int temp = 0;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	60fb      	str	r3, [r7, #12]

    ones = num%10; // 65535%10 = 5
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	4b0e      	ldr	r3, [pc, #56]	; (800301c <dec2bcd+0x50>)
 8002fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8002fe8:	08d9      	lsrs	r1, r3, #3
 8002fea:	460b      	mov	r3, r1
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	440b      	add	r3, r1
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	617b      	str	r3, [r7, #20]
    temp = num/10; // 65535/10 = 6553
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a08      	ldr	r2, [pc, #32]	; (800301c <dec2bcd+0x50>)
 8002ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffe:	08db      	lsrs	r3, r3, #3
 8003000:	60fb      	str	r3, [r7, #12]
    tens = temp<<4;  // what's displayed is by tens is actually the lower
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	011b      	lsls	r3, r3, #4
 8003006:	613b      	str	r3, [r7, #16]
                     // 4 bits of tens, so tens is 6553%16=9
    return (tens + ones);// so the result is 95
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	4413      	add	r3, r2
}
 800300e:	4618      	mov	r0, r3
 8003010:	371c      	adds	r7, #28
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	cccccccd 	.word	0xcccccccd

08003020 <RTC_init>:

/* @brief RTC init function, 24 hour format, disabled ouput.
 * @param none
 * @retval none
 */
HAL_StatusTypeDef RTC_init(){
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0

	  hrtc.Instance = RTC;
 8003024:	4b0f      	ldr	r3, [pc, #60]	; (8003064 <RTC_init+0x44>)
 8003026:	4a10      	ldr	r2, [pc, #64]	; (8003068 <RTC_init+0x48>)
 8003028:	601a      	str	r2, [r3, #0]
	  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800302a:	4b0e      	ldr	r3, [pc, #56]	; (8003064 <RTC_init+0x44>)
 800302c:	2200      	movs	r2, #0
 800302e:	605a      	str	r2, [r3, #4]
	  hrtc.Init.AsynchPrediv = 127;
 8003030:	4b0c      	ldr	r3, [pc, #48]	; (8003064 <RTC_init+0x44>)
 8003032:	227f      	movs	r2, #127	; 0x7f
 8003034:	609a      	str	r2, [r3, #8]
	  hrtc.Init.SynchPrediv = 255;
 8003036:	4b0b      	ldr	r3, [pc, #44]	; (8003064 <RTC_init+0x44>)
 8003038:	22ff      	movs	r2, #255	; 0xff
 800303a:	60da      	str	r2, [r3, #12]
	  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800303c:	4b09      	ldr	r3, [pc, #36]	; (8003064 <RTC_init+0x44>)
 800303e:	2200      	movs	r2, #0
 8003040:	611a      	str	r2, [r3, #16]
	  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003042:	4b08      	ldr	r3, [pc, #32]	; (8003064 <RTC_init+0x44>)
 8003044:	2200      	movs	r2, #0
 8003046:	615a      	str	r2, [r3, #20]
	  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003048:	4b06      	ldr	r3, [pc, #24]	; (8003064 <RTC_init+0x44>)
 800304a:	2200      	movs	r2, #0
 800304c:	619a      	str	r2, [r3, #24]
	  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800304e:	4805      	ldr	r0, [pc, #20]	; (8003064 <RTC_init+0x44>)
 8003050:	f7fe feec 	bl	8001e2c <HAL_RTC_Init>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <RTC_init+0x3e>
	  {
	    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e000      	b.n	8003060 <RTC_init+0x40>
	  }
	  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	bd80      	pop	{r7, pc}
 8003064:	20000320 	.word	0x20000320
 8003068:	40002800 	.word	0x40002800

0800306c <RTC_set_time_and_date>:
/* @brief Sets the RTC date and time
 * @param All corresponding to their names, in BSD format
 * @retval HAL_OK, if setting was successful, HAL_error otherwise
 */
HAL_StatusTypeDef RTC_set_time_and_date(uint8_t RTChour, uint8_t RTCminute, uint8_t RTCSeconds, uint8_t RTCWeekDay,
		uint8_t RTCMonth, uint8_t RTCYear, uint8_t RTCDate){
 800306c:	b590      	push	{r4, r7, lr}
 800306e:	b089      	sub	sp, #36	; 0x24
 8003070:	af00      	add	r7, sp, #0
 8003072:	4604      	mov	r4, r0
 8003074:	4608      	mov	r0, r1
 8003076:	4611      	mov	r1, r2
 8003078:	461a      	mov	r2, r3
 800307a:	4623      	mov	r3, r4
 800307c:	71fb      	strb	r3, [r7, #7]
 800307e:	4603      	mov	r3, r0
 8003080:	71bb      	strb	r3, [r7, #6]
 8003082:	460b      	mov	r3, r1
 8003084:	717b      	strb	r3, [r7, #5]
 8003086:	4613      	mov	r3, r2
 8003088:	713b      	strb	r3, [r7, #4]

	  RTC_TimeTypeDef sTime = {0};
 800308a:	f107 030c 	add.w	r3, r7, #12
 800308e:	2200      	movs	r2, #0
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	605a      	str	r2, [r3, #4]
 8003094:	609a      	str	r2, [r3, #8]
 8003096:	60da      	str	r2, [r3, #12]
 8003098:	611a      	str	r2, [r3, #16]
	  RTC_DateTypeDef sDate = {0};
 800309a:	2300      	movs	r3, #0
 800309c:	60bb      	str	r3, [r7, #8]

	  sTime.Hours = RTChour;
 800309e:	79fb      	ldrb	r3, [r7, #7]
 80030a0:	733b      	strb	r3, [r7, #12]
	  sTime.Minutes = RTCminute;
 80030a2:	79bb      	ldrb	r3, [r7, #6]
 80030a4:	737b      	strb	r3, [r7, #13]
	  sTime.Seconds = RTCSeconds;
 80030a6:	797b      	ldrb	r3, [r7, #5]
 80030a8:	73bb      	strb	r3, [r7, #14]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80030aa:	2300      	movs	r3, #0
 80030ac:	61bb      	str	r3, [r7, #24]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80030ae:	2300      	movs	r3, #0
 80030b0:	61fb      	str	r3, [r7, #28]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80030b2:	f107 030c 	add.w	r3, r7, #12
 80030b6:	2201      	movs	r2, #1
 80030b8:	4619      	mov	r1, r3
 80030ba:	4812      	ldr	r0, [pc, #72]	; (8003104 <RTC_set_time_and_date+0x98>)
 80030bc:	f7fe ff47 	bl	8001f4e <HAL_RTC_SetTime>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <RTC_set_time_and_date+0x5e>
	  {
	    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e017      	b.n	80030fa <RTC_set_time_and_date+0x8e>
	  }
	  sDate.WeekDay = RTCWeekDay;
 80030ca:	793b      	ldrb	r3, [r7, #4]
 80030cc:	723b      	strb	r3, [r7, #8]
	  sDate.Month = RTCMonth;
 80030ce:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80030d2:	727b      	strb	r3, [r7, #9]
	  sDate.Date = RTCDate;
 80030d4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80030d8:	72bb      	strb	r3, [r7, #10]
	  sDate.Year = RTCYear;
 80030da:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80030de:	72fb      	strb	r3, [r7, #11]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80030e0:	f107 0308 	add.w	r3, r7, #8
 80030e4:	2201      	movs	r2, #1
 80030e6:	4619      	mov	r1, r3
 80030e8:	4806      	ldr	r0, [pc, #24]	; (8003104 <RTC_set_time_and_date+0x98>)
 80030ea:	f7ff f84b 	bl	8002184 <HAL_RTC_SetDate>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <RTC_set_time_and_date+0x8c>
	  {
	    return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e000      	b.n	80030fa <RTC_set_time_and_date+0x8e>
	  }
	  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3724      	adds	r7, #36	; 0x24
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd90      	pop	{r4, r7, pc}
 8003102:	bf00      	nop
 8003104:	20000320 	.word	0x20000320

08003108 <RTC_get_time>:

/* @brief Fills the time to a structure
 * @param sTime: pointer to a Structure of type RTC_TimeTypeDef
 * @retval HAL_OK if successful, HAL_ERROR otherwise
 */
HAL_StatusTypeDef RTC_get_time(RTC_TimeTypeDef *sTime){
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
	if(HAL_RTC_GetTime(&hrtc, sTime, RTC_FORMAT_BCD) != HAL_OK) return HAL_ERROR;
 8003110:	2201      	movs	r2, #1
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	4806      	ldr	r0, [pc, #24]	; (8003130 <RTC_get_time+0x28>)
 8003116:	f7fe ffd7 	bl	80020c8 <HAL_RTC_GetTime>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <RTC_get_time+0x1c>
 8003120:	2301      	movs	r3, #1
 8003122:	e000      	b.n	8003126 <RTC_get_time+0x1e>
	return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	20000320 	.word	0x20000320

08003134 <RTC_get_date>:

/* @brief Fills the date to a structure
 * @param sDate: pointer to a structure of type RTC_DateTypeDef
 * @retval HAL_OK if successful, HAL_ERROR otherwise
 */
HAL_StatusTypeDef RTC_get_date(RTC_DateTypeDef *sDate){
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
	if(HAL_RTC_GetDate(&hrtc, sDate, RTC_FORMAT_BCD) != HAL_OK) return HAL_ERROR;
 800313c:	2201      	movs	r2, #1
 800313e:	6879      	ldr	r1, [r7, #4]
 8003140:	4806      	ldr	r0, [pc, #24]	; (800315c <RTC_get_date+0x28>)
 8003142:	f7ff f8c6 	bl	80022d2 <HAL_RTC_GetDate>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <RTC_get_date+0x1c>
 800314c:	2301      	movs	r3, #1
 800314e:	e000      	b.n	8003152 <RTC_get_date+0x1e>

	return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	20000320 	.word	0x20000320

08003160 <RTC_parse_data_set_RTC>:
/* @brief Parses a string, obtains the date and time, and sets it
 * @param pstring: pointer to string containing the date and time
 * @retval HAL_OK
 */
HAL_StatusTypeDef RTC_parse_data_set_RTC(uint8_t * pstring){
 8003160:	b5b0      	push	{r4, r5, r7, lr}
 8003162:	b092      	sub	sp, #72	; 0x48
 8003164:	af04      	add	r7, sp, #16
 8003166:	6078      	str	r0, [r7, #4]

	/*TODO: Validate array*/

	/*parse time and date from array*/
	//hh:mm:ss dd/mm/yy
	hours[0] = *(pstring + 0);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	hours[1] = *(pstring + 1);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	785b      	ldrb	r3, [r3, #1]
 8003174:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	minutes[0] = *(pstring + 3);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	78db      	ldrb	r3, [r3, #3]
 800317c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	minutes[1] = *(pstring + 4);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	791b      	ldrb	r3, [r3, #4]
 8003184:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	seconds[0] = *(pstring + 6);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	799b      	ldrb	r3, [r3, #6]
 800318c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	seconds[1] = *(pstring +7);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	79db      	ldrb	r3, [r3, #7]
 8003194:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	date[0] = *(pstring + 9);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	7a5b      	ldrb	r3, [r3, #9]
 800319c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	date[1] = *(pstring + 10);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	7a9b      	ldrb	r3, [r3, #10]
 80031a4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	month[0] = *(pstring + 12);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	7b1b      	ldrb	r3, [r3, #12]
 80031ac:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	month[1] = *(pstring + 13);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	7b5b      	ldrb	r3, [r3, #13]
 80031b4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	year[0] = *(pstring + 15);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	7bdb      	ldrb	r3, [r3, #15]
 80031bc:	f887 3020 	strb.w	r3, [r7, #32]
	year[1] = *(pstring + 16);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	7c1b      	ldrb	r3, [r3, #16]
 80031c4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	//weekDay = *(pstring + 17);
	/*data to uint8_t*/
	sscanf((char*)hours, "%d", &hoursINT);
 80031c8:	f107 021c 	add.w	r2, r7, #28
 80031cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80031d0:	4934      	ldr	r1, [pc, #208]	; (80032a4 <RTC_parse_data_set_RTC+0x144>)
 80031d2:	4618      	mov	r0, r3
 80031d4:	f000 f99e 	bl	8003514 <siscanf>
	sscanf((char*)minutes, "%d", &minutesINT);
 80031d8:	f107 0218 	add.w	r2, r7, #24
 80031dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80031e0:	4930      	ldr	r1, [pc, #192]	; (80032a4 <RTC_parse_data_set_RTC+0x144>)
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 f996 	bl	8003514 <siscanf>
	sscanf((char*)seconds, "%d", &secondsINT);
 80031e8:	f107 0214 	add.w	r2, r7, #20
 80031ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031f0:	492c      	ldr	r1, [pc, #176]	; (80032a4 <RTC_parse_data_set_RTC+0x144>)
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 f98e 	bl	8003514 <siscanf>
	sscanf((char*)date, "%d", &dateINT);
 80031f8:	f107 0210 	add.w	r2, r7, #16
 80031fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003200:	4928      	ldr	r1, [pc, #160]	; (80032a4 <RTC_parse_data_set_RTC+0x144>)
 8003202:	4618      	mov	r0, r3
 8003204:	f000 f986 	bl	8003514 <siscanf>
	sscanf((char*)month, "%d", &monthINT);
 8003208:	f107 020c 	add.w	r2, r7, #12
 800320c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003210:	4924      	ldr	r1, [pc, #144]	; (80032a4 <RTC_parse_data_set_RTC+0x144>)
 8003212:	4618      	mov	r0, r3
 8003214:	f000 f97e 	bl	8003514 <siscanf>
	sscanf((char*)year, "%d", &yearINT);
 8003218:	f107 0208 	add.w	r2, r7, #8
 800321c:	f107 0320 	add.w	r3, r7, #32
 8003220:	4920      	ldr	r1, [pc, #128]	; (80032a4 <RTC_parse_data_set_RTC+0x144>)
 8003222:	4618      	mov	r0, r3
 8003224:	f000 f976 	bl	8003514 <siscanf>
	//sscanf(weekDay, "%d", &weekDayINT);
	//weekDayINT = 4;

	/*Convert to BSD*/
	hoursINT = dec2bcd(hoursINT);
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	4618      	mov	r0, r3
 800322c:	f7ff fece 	bl	8002fcc <dec2bcd>
 8003230:	4603      	mov	r3, r0
 8003232:	61fb      	str	r3, [r7, #28]
	minutesINT = dec2bcd(minutesINT);
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	4618      	mov	r0, r3
 8003238:	f7ff fec8 	bl	8002fcc <dec2bcd>
 800323c:	4603      	mov	r3, r0
 800323e:	61bb      	str	r3, [r7, #24]
	secondsINT = dec2bcd(secondsINT);
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	4618      	mov	r0, r3
 8003244:	f7ff fec2 	bl	8002fcc <dec2bcd>
 8003248:	4603      	mov	r3, r0
 800324a:	617b      	str	r3, [r7, #20]
	dateINT = dec2bcd(dateINT);
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	4618      	mov	r0, r3
 8003250:	f7ff febc 	bl	8002fcc <dec2bcd>
 8003254:	4603      	mov	r3, r0
 8003256:	613b      	str	r3, [r7, #16]
	monthINT = dec2bcd(monthINT);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	4618      	mov	r0, r3
 800325c:	f7ff feb6 	bl	8002fcc <dec2bcd>
 8003260:	4603      	mov	r3, r0
 8003262:	60fb      	str	r3, [r7, #12]
	yearINT = dec2bcd(yearINT);
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	4618      	mov	r0, r3
 8003268:	f7ff feb0 	bl	8002fcc <dec2bcd>
 800326c:	4603      	mov	r3, r0
 800326e:	60bb      	str	r3, [r7, #8]

	/*Set time and date*/
	RTC_set_time_and_date((uint8_t)hoursINT, (uint8_t)minutesINT, (uint8_t)secondsINT,
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	b2d8      	uxtb	r0, r3
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	b2dc      	uxtb	r4, r3
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	b2dd      	uxtb	r5, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	b2db      	uxtb	r3, r3
 8003280:	68ba      	ldr	r2, [r7, #8]
 8003282:	b2d2      	uxtb	r2, r2
 8003284:	6939      	ldr	r1, [r7, #16]
 8003286:	b2c9      	uxtb	r1, r1
 8003288:	9102      	str	r1, [sp, #8]
 800328a:	9201      	str	r2, [sp, #4]
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	2305      	movs	r3, #5
 8003290:	462a      	mov	r2, r5
 8003292:	4621      	mov	r1, r4
 8003294:	f7ff feea 	bl	800306c <RTC_set_time_and_date>
			RTC_WEEKDAY_FRIDAY, (uint8_t)monthINT, (uint8_t)yearINT, (uint8_t)dateINT);

	return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3738      	adds	r7, #56	; 0x38
 800329e:	46bd      	mov	sp, r7
 80032a0:	bdb0      	pop	{r4, r5, r7, pc}
 80032a2:	bf00      	nop
 80032a4:	080048c4 	.word	0x080048c4

080032a8 <Station_init>:
/* @brief Init "thisStation" structure to the parameters stored in flash memory
 * @param none
 * @retval none
 */

void Station_init(){
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
	/*TODO: Read flash memory, to obtain stored parameters*/

	/*Placeholder values, they should be the ones stored in flash*/
	sprintf(thisStation.name, "Generic Station");
 80032ac:	490c      	ldr	r1, [pc, #48]	; (80032e0 <Station_init+0x38>)
 80032ae:	480d      	ldr	r0, [pc, #52]	; (80032e4 <Station_init+0x3c>)
 80032b0:	f000 f910 	bl	80034d4 <siprintf>
	thisStation.ethernet = 1;
 80032b4:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <Station_init+0x3c>)
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	thisStation.cellular = 0;
 80032bc:	4b09      	ldr	r3, [pc, #36]	; (80032e4 <Station_init+0x3c>)
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	thisStation.txPeriod = 10;
 80032c4:	4b07      	ldr	r3, [pc, #28]	; (80032e4 <Station_init+0x3c>)
 80032c6:	220a      	movs	r2, #10
 80032c8:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	thisStation.TDR_315 = 0;
 80032cc:	4b05      	ldr	r3, [pc, #20]	; (80032e4 <Station_init+0x3c>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	thisStation.piranometerDavis = 0;
 80032d4:	4b03      	ldr	r3, [pc, #12]	; (80032e4 <Station_init+0x3c>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

}
 80032dc:	bf00      	nop
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	080048c8 	.word	0x080048c8
 80032e4:	20000340 	.word	0x20000340

080032e8 <Station_getName>:

/* @brief Used to get the station's name
 * @param none
 * @retval the station's name
 */
void Station_getName(char *pstring){
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
	sprintf(pstring, thisStation.name);
 80032f0:	4903      	ldr	r1, [pc, #12]	; (8003300 <Station_getName+0x18>)
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f8ee 	bl	80034d4 <siprintf>
}
 80032f8:	bf00      	nop
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	20000340 	.word	0x20000340

08003304 <Station_getEthernet>:

/* @brief Lets User application know if ethernet should be used
 * @param none
 * @retval 1 if there is an ethernet PHY, 0 if not
 */
uint8_t Station_getEthernet(){
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
	return thisStation.ethernet;
 8003308:	4b03      	ldr	r3, [pc, #12]	; (8003318 <Station_getEthernet+0x14>)
 800330a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
}
 800330e:	4618      	mov	r0, r3
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	20000340 	.word	0x20000340

0800331c <Station_getCellular>:

/* @brief Lets User application know if cellular should be used
 * @param none
 * @retval 1 if there is a cellular modem connected, 0 if not
 */
uint8_t Station_getCellular(){
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
	return thisStation.cellular;
 8003320:	4b03      	ldr	r3, [pc, #12]	; (8003330 <Station_getCellular+0x14>)
 8003322:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
}
 8003326:	4618      	mov	r0, r3
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	20000340 	.word	0x20000340

08003334 <Station_getTxperiod>:

/* @brief Lets User application know the transmission period
 * @param none
 * @retval the station's transmission period
 */
uint16_t Station_getTxperiod(){
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
	return thisStation.txPeriod;
 8003338:	4b03      	ldr	r3, [pc, #12]	; (8003348 <Station_getTxperiod+0x14>)
 800333a:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
}
 800333e:	4618      	mov	r0, r3
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	20000340 	.word	0x20000340

0800334c <Station_getTDR_315>:

/* @brief Lets User application know if there is a TDR-315 connected to the station
 * @param none
 * @retval 1 if a TDR-315 is connected to the station, 0 if not
 */
uint8_t Station_getTDR_315(){
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
	return thisStation.TDR_315;
 8003350:	4b03      	ldr	r3, [pc, #12]	; (8003360 <Station_getTDR_315+0x14>)
 8003352:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
}
 8003356:	4618      	mov	r0, r3
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr
 8003360:	20000340 	.word	0x20000340

08003364 <Station_piranometerDavis>:

/* @brief Lets User application know if there is davis piranometer connected to the station
 * @param none
 * @retval 1 if a piranometer is connected to the station, 0 if not
 */
uint8_t Station_piranometerDavis(){
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
	return thisStation.piranometerDavis;
 8003368:	4b03      	ldr	r3, [pc, #12]	; (8003378 <Station_piranometerDavis+0x14>)
 800336a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
}
 800336e:	4618      	mov	r0, r3
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	20000340 	.word	0x20000340

0800337c <Station_set_name>:
/* @brief Sets the station name
 * @param pstring: pointer to desired station name
 * @retval none
 */
void Station_set_name(char * pstring){
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
	sprintf(thisStation.name, "%s", pstring);
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	4904      	ldr	r1, [pc, #16]	; (8003398 <Station_set_name+0x1c>)
 8003388:	4804      	ldr	r0, [pc, #16]	; (800339c <Station_set_name+0x20>)
 800338a:	f000 f8a3 	bl	80034d4 <siprintf>
}
 800338e:	bf00      	nop
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	080048d8 	.word	0x080048d8
 800339c:	20000340 	.word	0x20000340

080033a0 <Station_set_ethernet>:
/* @brief Sets the station ethernet
 * @param val: 1 if there is an available ethernet connection, 0 otherwise
 * @retval none
 */
void Station_set_ethernet(uint8_t val){
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	4603      	mov	r3, r0
 80033a8:	71fb      	strb	r3, [r7, #7]
	thisStation.ethernet = val - '0';
 80033aa:	79fb      	ldrb	r3, [r7, #7]
 80033ac:	3b30      	subs	r3, #48	; 0x30
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	4b04      	ldr	r3, [pc, #16]	; (80033c4 <Station_set_ethernet+0x24>)
 80033b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	20000340 	.word	0x20000340

080033c8 <Station_set_cellular>:
/* @brief Sets the station cellular network
 * @param val: 1 if there is an available cellular modem, 0 otherwise
 * @retval none
 */
void Station_set_cellular(uint8_t val){
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	4603      	mov	r3, r0
 80033d0:	71fb      	strb	r3, [r7, #7]
	thisStation.cellular = val - '0';
 80033d2:	79fb      	ldrb	r3, [r7, #7]
 80033d4:	3b30      	subs	r3, #48	; 0x30
 80033d6:	b2da      	uxtb	r2, r3
 80033d8:	4b04      	ldr	r3, [pc, #16]	; (80033ec <Station_set_cellular+0x24>)
 80033da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80033de:	bf00      	nop
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	20000340 	.word	0x20000340

080033f0 <Station_set_txPeriod>:
/* @brief Sets the station transmission period to the server
 * @param pstring: pointer to array containing the transmission period
 * @retval none
 */
void Station_set_txPeriod(char * pstring){
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
	int txPeriod;
	sscanf((char*)pstring, "%d", &txPeriod);
 80033f8:	f107 030c 	add.w	r3, r7, #12
 80033fc:	461a      	mov	r2, r3
 80033fe:	4906      	ldr	r1, [pc, #24]	; (8003418 <Station_set_txPeriod+0x28>)
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 f887 	bl	8003514 <siscanf>

	thisStation.txPeriod = (uint16_t) txPeriod;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	b29a      	uxth	r2, r3
 800340a:	4b04      	ldr	r3, [pc, #16]	; (800341c <Station_set_txPeriod+0x2c>)
 800340c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
}
 8003410:	bf00      	nop
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	080048dc 	.word	0x080048dc
 800341c:	20000340 	.word	0x20000340

08003420 <Station_set_TDR315>:
/* @brief Set the station TDR315 sensor
 * @param val: 1 if there is a TDR315 connected to the datalogger, 0 otherwise
 * @retval none
 */
void Station_set_TDR315(uint8_t val){
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	4603      	mov	r3, r0
 8003428:	71fb      	strb	r3, [r7, #7]
	thisStation.TDR_315 = val - '0';
 800342a:	79fb      	ldrb	r3, [r7, #7]
 800342c:	3b30      	subs	r3, #48	; 0x30
 800342e:	b2da      	uxtb	r2, r3
 8003430:	4b04      	ldr	r3, [pc, #16]	; (8003444 <Station_set_TDR315+0x24>)
 8003432:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 8003436:	bf00      	nop
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	20000340 	.word	0x20000340

08003448 <Station_set_piranometerDavis>:
/* @brief Set the station davis piranometer
 * @param val: 1 if there is a davis piranometer connected to the datalogger, 0 otherwise
 * @retval none
 */
void Station_set_piranometerDavis(uint8_t val){
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	4603      	mov	r3, r0
 8003450:	71fb      	strb	r3, [r7, #7]
	thisStation.piranometerDavis = val - '0';
 8003452:	79fb      	ldrb	r3, [r7, #7]
 8003454:	3b30      	subs	r3, #48	; 0x30
 8003456:	b2da      	uxtb	r2, r3
 8003458:	4b04      	ldr	r3, [pc, #16]	; (800346c <Station_set_piranometerDavis+0x24>)
 800345a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	20000340 	.word	0x20000340

08003470 <__errno>:
 8003470:	4b01      	ldr	r3, [pc, #4]	; (8003478 <__errno+0x8>)
 8003472:	6818      	ldr	r0, [r3, #0]
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	20000198 	.word	0x20000198

0800347c <__libc_init_array>:
 800347c:	b570      	push	{r4, r5, r6, lr}
 800347e:	4d0d      	ldr	r5, [pc, #52]	; (80034b4 <__libc_init_array+0x38>)
 8003480:	4c0d      	ldr	r4, [pc, #52]	; (80034b8 <__libc_init_array+0x3c>)
 8003482:	1b64      	subs	r4, r4, r5
 8003484:	10a4      	asrs	r4, r4, #2
 8003486:	2600      	movs	r6, #0
 8003488:	42a6      	cmp	r6, r4
 800348a:	d109      	bne.n	80034a0 <__libc_init_array+0x24>
 800348c:	4d0b      	ldr	r5, [pc, #44]	; (80034bc <__libc_init_array+0x40>)
 800348e:	4c0c      	ldr	r4, [pc, #48]	; (80034c0 <__libc_init_array+0x44>)
 8003490:	f001 f912 	bl	80046b8 <_init>
 8003494:	1b64      	subs	r4, r4, r5
 8003496:	10a4      	asrs	r4, r4, #2
 8003498:	2600      	movs	r6, #0
 800349a:	42a6      	cmp	r6, r4
 800349c:	d105      	bne.n	80034aa <__libc_init_array+0x2e>
 800349e:	bd70      	pop	{r4, r5, r6, pc}
 80034a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80034a4:	4798      	blx	r3
 80034a6:	3601      	adds	r6, #1
 80034a8:	e7ee      	b.n	8003488 <__libc_init_array+0xc>
 80034aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80034ae:	4798      	blx	r3
 80034b0:	3601      	adds	r6, #1
 80034b2:	e7f2      	b.n	800349a <__libc_init_array+0x1e>
 80034b4:	08004abc 	.word	0x08004abc
 80034b8:	08004abc 	.word	0x08004abc
 80034bc:	08004abc 	.word	0x08004abc
 80034c0:	08004ac0 	.word	0x08004ac0

080034c4 <memset>:
 80034c4:	4402      	add	r2, r0
 80034c6:	4603      	mov	r3, r0
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d100      	bne.n	80034ce <memset+0xa>
 80034cc:	4770      	bx	lr
 80034ce:	f803 1b01 	strb.w	r1, [r3], #1
 80034d2:	e7f9      	b.n	80034c8 <memset+0x4>

080034d4 <siprintf>:
 80034d4:	b40e      	push	{r1, r2, r3}
 80034d6:	b500      	push	{lr}
 80034d8:	b09c      	sub	sp, #112	; 0x70
 80034da:	ab1d      	add	r3, sp, #116	; 0x74
 80034dc:	9002      	str	r0, [sp, #8]
 80034de:	9006      	str	r0, [sp, #24]
 80034e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80034e4:	4809      	ldr	r0, [pc, #36]	; (800350c <siprintf+0x38>)
 80034e6:	9107      	str	r1, [sp, #28]
 80034e8:	9104      	str	r1, [sp, #16]
 80034ea:	4909      	ldr	r1, [pc, #36]	; (8003510 <siprintf+0x3c>)
 80034ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80034f0:	9105      	str	r1, [sp, #20]
 80034f2:	6800      	ldr	r0, [r0, #0]
 80034f4:	9301      	str	r3, [sp, #4]
 80034f6:	a902      	add	r1, sp, #8
 80034f8:	f000 f896 	bl	8003628 <_svfiprintf_r>
 80034fc:	9b02      	ldr	r3, [sp, #8]
 80034fe:	2200      	movs	r2, #0
 8003500:	701a      	strb	r2, [r3, #0]
 8003502:	b01c      	add	sp, #112	; 0x70
 8003504:	f85d eb04 	ldr.w	lr, [sp], #4
 8003508:	b003      	add	sp, #12
 800350a:	4770      	bx	lr
 800350c:	20000198 	.word	0x20000198
 8003510:	ffff0208 	.word	0xffff0208

08003514 <siscanf>:
 8003514:	b40e      	push	{r1, r2, r3}
 8003516:	b510      	push	{r4, lr}
 8003518:	b09f      	sub	sp, #124	; 0x7c
 800351a:	ac21      	add	r4, sp, #132	; 0x84
 800351c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8003520:	f854 2b04 	ldr.w	r2, [r4], #4
 8003524:	9201      	str	r2, [sp, #4]
 8003526:	f8ad 101c 	strh.w	r1, [sp, #28]
 800352a:	9004      	str	r0, [sp, #16]
 800352c:	9008      	str	r0, [sp, #32]
 800352e:	f7fc fe69 	bl	8000204 <strlen>
 8003532:	4b0c      	ldr	r3, [pc, #48]	; (8003564 <siscanf+0x50>)
 8003534:	9005      	str	r0, [sp, #20]
 8003536:	9009      	str	r0, [sp, #36]	; 0x24
 8003538:	930d      	str	r3, [sp, #52]	; 0x34
 800353a:	480b      	ldr	r0, [pc, #44]	; (8003568 <siscanf+0x54>)
 800353c:	9a01      	ldr	r2, [sp, #4]
 800353e:	6800      	ldr	r0, [r0, #0]
 8003540:	9403      	str	r4, [sp, #12]
 8003542:	2300      	movs	r3, #0
 8003544:	9311      	str	r3, [sp, #68]	; 0x44
 8003546:	9316      	str	r3, [sp, #88]	; 0x58
 8003548:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800354c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8003550:	a904      	add	r1, sp, #16
 8003552:	4623      	mov	r3, r4
 8003554:	f000 f9c2 	bl	80038dc <__ssvfiscanf_r>
 8003558:	b01f      	add	sp, #124	; 0x7c
 800355a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800355e:	b003      	add	sp, #12
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	0800356d 	.word	0x0800356d
 8003568:	20000198 	.word	0x20000198

0800356c <__seofread>:
 800356c:	2000      	movs	r0, #0
 800356e:	4770      	bx	lr

08003570 <__ssputs_r>:
 8003570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003574:	688e      	ldr	r6, [r1, #8]
 8003576:	429e      	cmp	r6, r3
 8003578:	4682      	mov	sl, r0
 800357a:	460c      	mov	r4, r1
 800357c:	4690      	mov	r8, r2
 800357e:	461f      	mov	r7, r3
 8003580:	d838      	bhi.n	80035f4 <__ssputs_r+0x84>
 8003582:	898a      	ldrh	r2, [r1, #12]
 8003584:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003588:	d032      	beq.n	80035f0 <__ssputs_r+0x80>
 800358a:	6825      	ldr	r5, [r4, #0]
 800358c:	6909      	ldr	r1, [r1, #16]
 800358e:	eba5 0901 	sub.w	r9, r5, r1
 8003592:	6965      	ldr	r5, [r4, #20]
 8003594:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003598:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800359c:	3301      	adds	r3, #1
 800359e:	444b      	add	r3, r9
 80035a0:	106d      	asrs	r5, r5, #1
 80035a2:	429d      	cmp	r5, r3
 80035a4:	bf38      	it	cc
 80035a6:	461d      	movcc	r5, r3
 80035a8:	0553      	lsls	r3, r2, #21
 80035aa:	d531      	bpl.n	8003610 <__ssputs_r+0xa0>
 80035ac:	4629      	mov	r1, r5
 80035ae:	f000 ffdf 	bl	8004570 <_malloc_r>
 80035b2:	4606      	mov	r6, r0
 80035b4:	b950      	cbnz	r0, 80035cc <__ssputs_r+0x5c>
 80035b6:	230c      	movs	r3, #12
 80035b8:	f8ca 3000 	str.w	r3, [sl]
 80035bc:	89a3      	ldrh	r3, [r4, #12]
 80035be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035c2:	81a3      	strh	r3, [r4, #12]
 80035c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035cc:	6921      	ldr	r1, [r4, #16]
 80035ce:	464a      	mov	r2, r9
 80035d0:	f000 ff56 	bl	8004480 <memcpy>
 80035d4:	89a3      	ldrh	r3, [r4, #12]
 80035d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80035da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035de:	81a3      	strh	r3, [r4, #12]
 80035e0:	6126      	str	r6, [r4, #16]
 80035e2:	6165      	str	r5, [r4, #20]
 80035e4:	444e      	add	r6, r9
 80035e6:	eba5 0509 	sub.w	r5, r5, r9
 80035ea:	6026      	str	r6, [r4, #0]
 80035ec:	60a5      	str	r5, [r4, #8]
 80035ee:	463e      	mov	r6, r7
 80035f0:	42be      	cmp	r6, r7
 80035f2:	d900      	bls.n	80035f6 <__ssputs_r+0x86>
 80035f4:	463e      	mov	r6, r7
 80035f6:	4632      	mov	r2, r6
 80035f8:	6820      	ldr	r0, [r4, #0]
 80035fa:	4641      	mov	r1, r8
 80035fc:	f000 ff4e 	bl	800449c <memmove>
 8003600:	68a3      	ldr	r3, [r4, #8]
 8003602:	6822      	ldr	r2, [r4, #0]
 8003604:	1b9b      	subs	r3, r3, r6
 8003606:	4432      	add	r2, r6
 8003608:	60a3      	str	r3, [r4, #8]
 800360a:	6022      	str	r2, [r4, #0]
 800360c:	2000      	movs	r0, #0
 800360e:	e7db      	b.n	80035c8 <__ssputs_r+0x58>
 8003610:	462a      	mov	r2, r5
 8003612:	f001 f807 	bl	8004624 <_realloc_r>
 8003616:	4606      	mov	r6, r0
 8003618:	2800      	cmp	r0, #0
 800361a:	d1e1      	bne.n	80035e0 <__ssputs_r+0x70>
 800361c:	6921      	ldr	r1, [r4, #16]
 800361e:	4650      	mov	r0, sl
 8003620:	f000 ff56 	bl	80044d0 <_free_r>
 8003624:	e7c7      	b.n	80035b6 <__ssputs_r+0x46>
	...

08003628 <_svfiprintf_r>:
 8003628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800362c:	4698      	mov	r8, r3
 800362e:	898b      	ldrh	r3, [r1, #12]
 8003630:	061b      	lsls	r3, r3, #24
 8003632:	b09d      	sub	sp, #116	; 0x74
 8003634:	4607      	mov	r7, r0
 8003636:	460d      	mov	r5, r1
 8003638:	4614      	mov	r4, r2
 800363a:	d50e      	bpl.n	800365a <_svfiprintf_r+0x32>
 800363c:	690b      	ldr	r3, [r1, #16]
 800363e:	b963      	cbnz	r3, 800365a <_svfiprintf_r+0x32>
 8003640:	2140      	movs	r1, #64	; 0x40
 8003642:	f000 ff95 	bl	8004570 <_malloc_r>
 8003646:	6028      	str	r0, [r5, #0]
 8003648:	6128      	str	r0, [r5, #16]
 800364a:	b920      	cbnz	r0, 8003656 <_svfiprintf_r+0x2e>
 800364c:	230c      	movs	r3, #12
 800364e:	603b      	str	r3, [r7, #0]
 8003650:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003654:	e0d1      	b.n	80037fa <_svfiprintf_r+0x1d2>
 8003656:	2340      	movs	r3, #64	; 0x40
 8003658:	616b      	str	r3, [r5, #20]
 800365a:	2300      	movs	r3, #0
 800365c:	9309      	str	r3, [sp, #36]	; 0x24
 800365e:	2320      	movs	r3, #32
 8003660:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003664:	f8cd 800c 	str.w	r8, [sp, #12]
 8003668:	2330      	movs	r3, #48	; 0x30
 800366a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003814 <_svfiprintf_r+0x1ec>
 800366e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003672:	f04f 0901 	mov.w	r9, #1
 8003676:	4623      	mov	r3, r4
 8003678:	469a      	mov	sl, r3
 800367a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800367e:	b10a      	cbz	r2, 8003684 <_svfiprintf_r+0x5c>
 8003680:	2a25      	cmp	r2, #37	; 0x25
 8003682:	d1f9      	bne.n	8003678 <_svfiprintf_r+0x50>
 8003684:	ebba 0b04 	subs.w	fp, sl, r4
 8003688:	d00b      	beq.n	80036a2 <_svfiprintf_r+0x7a>
 800368a:	465b      	mov	r3, fp
 800368c:	4622      	mov	r2, r4
 800368e:	4629      	mov	r1, r5
 8003690:	4638      	mov	r0, r7
 8003692:	f7ff ff6d 	bl	8003570 <__ssputs_r>
 8003696:	3001      	adds	r0, #1
 8003698:	f000 80aa 	beq.w	80037f0 <_svfiprintf_r+0x1c8>
 800369c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800369e:	445a      	add	r2, fp
 80036a0:	9209      	str	r2, [sp, #36]	; 0x24
 80036a2:	f89a 3000 	ldrb.w	r3, [sl]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 80a2 	beq.w	80037f0 <_svfiprintf_r+0x1c8>
 80036ac:	2300      	movs	r3, #0
 80036ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036b6:	f10a 0a01 	add.w	sl, sl, #1
 80036ba:	9304      	str	r3, [sp, #16]
 80036bc:	9307      	str	r3, [sp, #28]
 80036be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80036c2:	931a      	str	r3, [sp, #104]	; 0x68
 80036c4:	4654      	mov	r4, sl
 80036c6:	2205      	movs	r2, #5
 80036c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036cc:	4851      	ldr	r0, [pc, #324]	; (8003814 <_svfiprintf_r+0x1ec>)
 80036ce:	f7fc fda7 	bl	8000220 <memchr>
 80036d2:	9a04      	ldr	r2, [sp, #16]
 80036d4:	b9d8      	cbnz	r0, 800370e <_svfiprintf_r+0xe6>
 80036d6:	06d0      	lsls	r0, r2, #27
 80036d8:	bf44      	itt	mi
 80036da:	2320      	movmi	r3, #32
 80036dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036e0:	0711      	lsls	r1, r2, #28
 80036e2:	bf44      	itt	mi
 80036e4:	232b      	movmi	r3, #43	; 0x2b
 80036e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036ea:	f89a 3000 	ldrb.w	r3, [sl]
 80036ee:	2b2a      	cmp	r3, #42	; 0x2a
 80036f0:	d015      	beq.n	800371e <_svfiprintf_r+0xf6>
 80036f2:	9a07      	ldr	r2, [sp, #28]
 80036f4:	4654      	mov	r4, sl
 80036f6:	2000      	movs	r0, #0
 80036f8:	f04f 0c0a 	mov.w	ip, #10
 80036fc:	4621      	mov	r1, r4
 80036fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003702:	3b30      	subs	r3, #48	; 0x30
 8003704:	2b09      	cmp	r3, #9
 8003706:	d94e      	bls.n	80037a6 <_svfiprintf_r+0x17e>
 8003708:	b1b0      	cbz	r0, 8003738 <_svfiprintf_r+0x110>
 800370a:	9207      	str	r2, [sp, #28]
 800370c:	e014      	b.n	8003738 <_svfiprintf_r+0x110>
 800370e:	eba0 0308 	sub.w	r3, r0, r8
 8003712:	fa09 f303 	lsl.w	r3, r9, r3
 8003716:	4313      	orrs	r3, r2
 8003718:	9304      	str	r3, [sp, #16]
 800371a:	46a2      	mov	sl, r4
 800371c:	e7d2      	b.n	80036c4 <_svfiprintf_r+0x9c>
 800371e:	9b03      	ldr	r3, [sp, #12]
 8003720:	1d19      	adds	r1, r3, #4
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	9103      	str	r1, [sp, #12]
 8003726:	2b00      	cmp	r3, #0
 8003728:	bfbb      	ittet	lt
 800372a:	425b      	neglt	r3, r3
 800372c:	f042 0202 	orrlt.w	r2, r2, #2
 8003730:	9307      	strge	r3, [sp, #28]
 8003732:	9307      	strlt	r3, [sp, #28]
 8003734:	bfb8      	it	lt
 8003736:	9204      	strlt	r2, [sp, #16]
 8003738:	7823      	ldrb	r3, [r4, #0]
 800373a:	2b2e      	cmp	r3, #46	; 0x2e
 800373c:	d10c      	bne.n	8003758 <_svfiprintf_r+0x130>
 800373e:	7863      	ldrb	r3, [r4, #1]
 8003740:	2b2a      	cmp	r3, #42	; 0x2a
 8003742:	d135      	bne.n	80037b0 <_svfiprintf_r+0x188>
 8003744:	9b03      	ldr	r3, [sp, #12]
 8003746:	1d1a      	adds	r2, r3, #4
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	9203      	str	r2, [sp, #12]
 800374c:	2b00      	cmp	r3, #0
 800374e:	bfb8      	it	lt
 8003750:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003754:	3402      	adds	r4, #2
 8003756:	9305      	str	r3, [sp, #20]
 8003758:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003824 <_svfiprintf_r+0x1fc>
 800375c:	7821      	ldrb	r1, [r4, #0]
 800375e:	2203      	movs	r2, #3
 8003760:	4650      	mov	r0, sl
 8003762:	f7fc fd5d 	bl	8000220 <memchr>
 8003766:	b140      	cbz	r0, 800377a <_svfiprintf_r+0x152>
 8003768:	2340      	movs	r3, #64	; 0x40
 800376a:	eba0 000a 	sub.w	r0, r0, sl
 800376e:	fa03 f000 	lsl.w	r0, r3, r0
 8003772:	9b04      	ldr	r3, [sp, #16]
 8003774:	4303      	orrs	r3, r0
 8003776:	3401      	adds	r4, #1
 8003778:	9304      	str	r3, [sp, #16]
 800377a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800377e:	4826      	ldr	r0, [pc, #152]	; (8003818 <_svfiprintf_r+0x1f0>)
 8003780:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003784:	2206      	movs	r2, #6
 8003786:	f7fc fd4b 	bl	8000220 <memchr>
 800378a:	2800      	cmp	r0, #0
 800378c:	d038      	beq.n	8003800 <_svfiprintf_r+0x1d8>
 800378e:	4b23      	ldr	r3, [pc, #140]	; (800381c <_svfiprintf_r+0x1f4>)
 8003790:	bb1b      	cbnz	r3, 80037da <_svfiprintf_r+0x1b2>
 8003792:	9b03      	ldr	r3, [sp, #12]
 8003794:	3307      	adds	r3, #7
 8003796:	f023 0307 	bic.w	r3, r3, #7
 800379a:	3308      	adds	r3, #8
 800379c:	9303      	str	r3, [sp, #12]
 800379e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037a0:	4433      	add	r3, r6
 80037a2:	9309      	str	r3, [sp, #36]	; 0x24
 80037a4:	e767      	b.n	8003676 <_svfiprintf_r+0x4e>
 80037a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80037aa:	460c      	mov	r4, r1
 80037ac:	2001      	movs	r0, #1
 80037ae:	e7a5      	b.n	80036fc <_svfiprintf_r+0xd4>
 80037b0:	2300      	movs	r3, #0
 80037b2:	3401      	adds	r4, #1
 80037b4:	9305      	str	r3, [sp, #20]
 80037b6:	4619      	mov	r1, r3
 80037b8:	f04f 0c0a 	mov.w	ip, #10
 80037bc:	4620      	mov	r0, r4
 80037be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037c2:	3a30      	subs	r2, #48	; 0x30
 80037c4:	2a09      	cmp	r2, #9
 80037c6:	d903      	bls.n	80037d0 <_svfiprintf_r+0x1a8>
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d0c5      	beq.n	8003758 <_svfiprintf_r+0x130>
 80037cc:	9105      	str	r1, [sp, #20]
 80037ce:	e7c3      	b.n	8003758 <_svfiprintf_r+0x130>
 80037d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80037d4:	4604      	mov	r4, r0
 80037d6:	2301      	movs	r3, #1
 80037d8:	e7f0      	b.n	80037bc <_svfiprintf_r+0x194>
 80037da:	ab03      	add	r3, sp, #12
 80037dc:	9300      	str	r3, [sp, #0]
 80037de:	462a      	mov	r2, r5
 80037e0:	4b0f      	ldr	r3, [pc, #60]	; (8003820 <_svfiprintf_r+0x1f8>)
 80037e2:	a904      	add	r1, sp, #16
 80037e4:	4638      	mov	r0, r7
 80037e6:	f3af 8000 	nop.w
 80037ea:	1c42      	adds	r2, r0, #1
 80037ec:	4606      	mov	r6, r0
 80037ee:	d1d6      	bne.n	800379e <_svfiprintf_r+0x176>
 80037f0:	89ab      	ldrh	r3, [r5, #12]
 80037f2:	065b      	lsls	r3, r3, #25
 80037f4:	f53f af2c 	bmi.w	8003650 <_svfiprintf_r+0x28>
 80037f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80037fa:	b01d      	add	sp, #116	; 0x74
 80037fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003800:	ab03      	add	r3, sp, #12
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	462a      	mov	r2, r5
 8003806:	4b06      	ldr	r3, [pc, #24]	; (8003820 <_svfiprintf_r+0x1f8>)
 8003808:	a904      	add	r1, sp, #16
 800380a:	4638      	mov	r0, r7
 800380c:	f000 fa4c 	bl	8003ca8 <_printf_i>
 8003810:	e7eb      	b.n	80037ea <_svfiprintf_r+0x1c2>
 8003812:	bf00      	nop
 8003814:	08004904 	.word	0x08004904
 8003818:	0800490e 	.word	0x0800490e
 800381c:	00000000 	.word	0x00000000
 8003820:	08003571 	.word	0x08003571
 8003824:	0800490a 	.word	0x0800490a

08003828 <_sungetc_r>:
 8003828:	b538      	push	{r3, r4, r5, lr}
 800382a:	1c4b      	adds	r3, r1, #1
 800382c:	4614      	mov	r4, r2
 800382e:	d103      	bne.n	8003838 <_sungetc_r+0x10>
 8003830:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003834:	4628      	mov	r0, r5
 8003836:	bd38      	pop	{r3, r4, r5, pc}
 8003838:	8993      	ldrh	r3, [r2, #12]
 800383a:	f023 0320 	bic.w	r3, r3, #32
 800383e:	8193      	strh	r3, [r2, #12]
 8003840:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003842:	6852      	ldr	r2, [r2, #4]
 8003844:	b2cd      	uxtb	r5, r1
 8003846:	b18b      	cbz	r3, 800386c <_sungetc_r+0x44>
 8003848:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800384a:	4293      	cmp	r3, r2
 800384c:	dd08      	ble.n	8003860 <_sungetc_r+0x38>
 800384e:	6823      	ldr	r3, [r4, #0]
 8003850:	1e5a      	subs	r2, r3, #1
 8003852:	6022      	str	r2, [r4, #0]
 8003854:	f803 5c01 	strb.w	r5, [r3, #-1]
 8003858:	6863      	ldr	r3, [r4, #4]
 800385a:	3301      	adds	r3, #1
 800385c:	6063      	str	r3, [r4, #4]
 800385e:	e7e9      	b.n	8003834 <_sungetc_r+0xc>
 8003860:	4621      	mov	r1, r4
 8003862:	f000 fdd1 	bl	8004408 <__submore>
 8003866:	2800      	cmp	r0, #0
 8003868:	d0f1      	beq.n	800384e <_sungetc_r+0x26>
 800386a:	e7e1      	b.n	8003830 <_sungetc_r+0x8>
 800386c:	6921      	ldr	r1, [r4, #16]
 800386e:	6823      	ldr	r3, [r4, #0]
 8003870:	b151      	cbz	r1, 8003888 <_sungetc_r+0x60>
 8003872:	4299      	cmp	r1, r3
 8003874:	d208      	bcs.n	8003888 <_sungetc_r+0x60>
 8003876:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800387a:	42a9      	cmp	r1, r5
 800387c:	d104      	bne.n	8003888 <_sungetc_r+0x60>
 800387e:	3b01      	subs	r3, #1
 8003880:	3201      	adds	r2, #1
 8003882:	6023      	str	r3, [r4, #0]
 8003884:	6062      	str	r2, [r4, #4]
 8003886:	e7d5      	b.n	8003834 <_sungetc_r+0xc>
 8003888:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800388c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003890:	6363      	str	r3, [r4, #52]	; 0x34
 8003892:	2303      	movs	r3, #3
 8003894:	63a3      	str	r3, [r4, #56]	; 0x38
 8003896:	4623      	mov	r3, r4
 8003898:	f803 5f46 	strb.w	r5, [r3, #70]!
 800389c:	6023      	str	r3, [r4, #0]
 800389e:	2301      	movs	r3, #1
 80038a0:	e7dc      	b.n	800385c <_sungetc_r+0x34>

080038a2 <__ssrefill_r>:
 80038a2:	b510      	push	{r4, lr}
 80038a4:	460c      	mov	r4, r1
 80038a6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80038a8:	b169      	cbz	r1, 80038c6 <__ssrefill_r+0x24>
 80038aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80038ae:	4299      	cmp	r1, r3
 80038b0:	d001      	beq.n	80038b6 <__ssrefill_r+0x14>
 80038b2:	f000 fe0d 	bl	80044d0 <_free_r>
 80038b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80038b8:	6063      	str	r3, [r4, #4]
 80038ba:	2000      	movs	r0, #0
 80038bc:	6360      	str	r0, [r4, #52]	; 0x34
 80038be:	b113      	cbz	r3, 80038c6 <__ssrefill_r+0x24>
 80038c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80038c2:	6023      	str	r3, [r4, #0]
 80038c4:	bd10      	pop	{r4, pc}
 80038c6:	6923      	ldr	r3, [r4, #16]
 80038c8:	6023      	str	r3, [r4, #0]
 80038ca:	2300      	movs	r3, #0
 80038cc:	6063      	str	r3, [r4, #4]
 80038ce:	89a3      	ldrh	r3, [r4, #12]
 80038d0:	f043 0320 	orr.w	r3, r3, #32
 80038d4:	81a3      	strh	r3, [r4, #12]
 80038d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038da:	e7f3      	b.n	80038c4 <__ssrefill_r+0x22>

080038dc <__ssvfiscanf_r>:
 80038dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038e0:	460c      	mov	r4, r1
 80038e2:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80038e6:	2100      	movs	r1, #0
 80038e8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80038ec:	49b2      	ldr	r1, [pc, #712]	; (8003bb8 <__ssvfiscanf_r+0x2dc>)
 80038ee:	91a0      	str	r1, [sp, #640]	; 0x280
 80038f0:	f10d 0804 	add.w	r8, sp, #4
 80038f4:	49b1      	ldr	r1, [pc, #708]	; (8003bbc <__ssvfiscanf_r+0x2e0>)
 80038f6:	4fb2      	ldr	r7, [pc, #712]	; (8003bc0 <__ssvfiscanf_r+0x2e4>)
 80038f8:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8003bc4 <__ssvfiscanf_r+0x2e8>
 80038fc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8003900:	4606      	mov	r6, r0
 8003902:	91a1      	str	r1, [sp, #644]	; 0x284
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	f892 a000 	ldrb.w	sl, [r2]
 800390a:	f1ba 0f00 	cmp.w	sl, #0
 800390e:	f000 8151 	beq.w	8003bb4 <__ssvfiscanf_r+0x2d8>
 8003912:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8003916:	f013 0308 	ands.w	r3, r3, #8
 800391a:	f102 0501 	add.w	r5, r2, #1
 800391e:	d019      	beq.n	8003954 <__ssvfiscanf_r+0x78>
 8003920:	6863      	ldr	r3, [r4, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	dd0f      	ble.n	8003946 <__ssvfiscanf_r+0x6a>
 8003926:	6823      	ldr	r3, [r4, #0]
 8003928:	781a      	ldrb	r2, [r3, #0]
 800392a:	5cba      	ldrb	r2, [r7, r2]
 800392c:	0712      	lsls	r2, r2, #28
 800392e:	d401      	bmi.n	8003934 <__ssvfiscanf_r+0x58>
 8003930:	462a      	mov	r2, r5
 8003932:	e7e8      	b.n	8003906 <__ssvfiscanf_r+0x2a>
 8003934:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003936:	3201      	adds	r2, #1
 8003938:	9245      	str	r2, [sp, #276]	; 0x114
 800393a:	6862      	ldr	r2, [r4, #4]
 800393c:	3301      	adds	r3, #1
 800393e:	3a01      	subs	r2, #1
 8003940:	6062      	str	r2, [r4, #4]
 8003942:	6023      	str	r3, [r4, #0]
 8003944:	e7ec      	b.n	8003920 <__ssvfiscanf_r+0x44>
 8003946:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003948:	4621      	mov	r1, r4
 800394a:	4630      	mov	r0, r6
 800394c:	4798      	blx	r3
 800394e:	2800      	cmp	r0, #0
 8003950:	d0e9      	beq.n	8003926 <__ssvfiscanf_r+0x4a>
 8003952:	e7ed      	b.n	8003930 <__ssvfiscanf_r+0x54>
 8003954:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8003958:	f040 8083 	bne.w	8003a62 <__ssvfiscanf_r+0x186>
 800395c:	9341      	str	r3, [sp, #260]	; 0x104
 800395e:	9343      	str	r3, [sp, #268]	; 0x10c
 8003960:	7853      	ldrb	r3, [r2, #1]
 8003962:	2b2a      	cmp	r3, #42	; 0x2a
 8003964:	bf02      	ittt	eq
 8003966:	2310      	moveq	r3, #16
 8003968:	1c95      	addeq	r5, r2, #2
 800396a:	9341      	streq	r3, [sp, #260]	; 0x104
 800396c:	220a      	movs	r2, #10
 800396e:	46ab      	mov	fp, r5
 8003970:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8003974:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8003978:	2b09      	cmp	r3, #9
 800397a:	d91d      	bls.n	80039b8 <__ssvfiscanf_r+0xdc>
 800397c:	4891      	ldr	r0, [pc, #580]	; (8003bc4 <__ssvfiscanf_r+0x2e8>)
 800397e:	2203      	movs	r2, #3
 8003980:	f7fc fc4e 	bl	8000220 <memchr>
 8003984:	b140      	cbz	r0, 8003998 <__ssvfiscanf_r+0xbc>
 8003986:	2301      	movs	r3, #1
 8003988:	eba0 0009 	sub.w	r0, r0, r9
 800398c:	fa03 f000 	lsl.w	r0, r3, r0
 8003990:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003992:	4318      	orrs	r0, r3
 8003994:	9041      	str	r0, [sp, #260]	; 0x104
 8003996:	465d      	mov	r5, fp
 8003998:	f815 3b01 	ldrb.w	r3, [r5], #1
 800399c:	2b78      	cmp	r3, #120	; 0x78
 800399e:	d806      	bhi.n	80039ae <__ssvfiscanf_r+0xd2>
 80039a0:	2b57      	cmp	r3, #87	; 0x57
 80039a2:	d810      	bhi.n	80039c6 <__ssvfiscanf_r+0xea>
 80039a4:	2b25      	cmp	r3, #37	; 0x25
 80039a6:	d05c      	beq.n	8003a62 <__ssvfiscanf_r+0x186>
 80039a8:	d856      	bhi.n	8003a58 <__ssvfiscanf_r+0x17c>
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d074      	beq.n	8003a98 <__ssvfiscanf_r+0x1bc>
 80039ae:	2303      	movs	r3, #3
 80039b0:	9347      	str	r3, [sp, #284]	; 0x11c
 80039b2:	230a      	movs	r3, #10
 80039b4:	9342      	str	r3, [sp, #264]	; 0x108
 80039b6:	e081      	b.n	8003abc <__ssvfiscanf_r+0x1e0>
 80039b8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80039ba:	fb02 1303 	mla	r3, r2, r3, r1
 80039be:	3b30      	subs	r3, #48	; 0x30
 80039c0:	9343      	str	r3, [sp, #268]	; 0x10c
 80039c2:	465d      	mov	r5, fp
 80039c4:	e7d3      	b.n	800396e <__ssvfiscanf_r+0x92>
 80039c6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80039ca:	2a20      	cmp	r2, #32
 80039cc:	d8ef      	bhi.n	80039ae <__ssvfiscanf_r+0xd2>
 80039ce:	a101      	add	r1, pc, #4	; (adr r1, 80039d4 <__ssvfiscanf_r+0xf8>)
 80039d0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80039d4:	08003aa7 	.word	0x08003aa7
 80039d8:	080039af 	.word	0x080039af
 80039dc:	080039af 	.word	0x080039af
 80039e0:	08003b05 	.word	0x08003b05
 80039e4:	080039af 	.word	0x080039af
 80039e8:	080039af 	.word	0x080039af
 80039ec:	080039af 	.word	0x080039af
 80039f0:	080039af 	.word	0x080039af
 80039f4:	080039af 	.word	0x080039af
 80039f8:	080039af 	.word	0x080039af
 80039fc:	080039af 	.word	0x080039af
 8003a00:	08003b1b 	.word	0x08003b1b
 8003a04:	08003af1 	.word	0x08003af1
 8003a08:	08003a5f 	.word	0x08003a5f
 8003a0c:	08003a5f 	.word	0x08003a5f
 8003a10:	08003a5f 	.word	0x08003a5f
 8003a14:	080039af 	.word	0x080039af
 8003a18:	08003af5 	.word	0x08003af5
 8003a1c:	080039af 	.word	0x080039af
 8003a20:	080039af 	.word	0x080039af
 8003a24:	080039af 	.word	0x080039af
 8003a28:	080039af 	.word	0x080039af
 8003a2c:	08003b2b 	.word	0x08003b2b
 8003a30:	08003afd 	.word	0x08003afd
 8003a34:	08003a9f 	.word	0x08003a9f
 8003a38:	080039af 	.word	0x080039af
 8003a3c:	080039af 	.word	0x080039af
 8003a40:	08003b27 	.word	0x08003b27
 8003a44:	080039af 	.word	0x080039af
 8003a48:	08003af1 	.word	0x08003af1
 8003a4c:	080039af 	.word	0x080039af
 8003a50:	080039af 	.word	0x080039af
 8003a54:	08003aa7 	.word	0x08003aa7
 8003a58:	3b45      	subs	r3, #69	; 0x45
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d8a7      	bhi.n	80039ae <__ssvfiscanf_r+0xd2>
 8003a5e:	2305      	movs	r3, #5
 8003a60:	e02b      	b.n	8003aba <__ssvfiscanf_r+0x1de>
 8003a62:	6863      	ldr	r3, [r4, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	dd0d      	ble.n	8003a84 <__ssvfiscanf_r+0x1a8>
 8003a68:	6823      	ldr	r3, [r4, #0]
 8003a6a:	781a      	ldrb	r2, [r3, #0]
 8003a6c:	4552      	cmp	r2, sl
 8003a6e:	f040 80a1 	bne.w	8003bb4 <__ssvfiscanf_r+0x2d8>
 8003a72:	3301      	adds	r3, #1
 8003a74:	6862      	ldr	r2, [r4, #4]
 8003a76:	6023      	str	r3, [r4, #0]
 8003a78:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8003a7a:	3a01      	subs	r2, #1
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	6062      	str	r2, [r4, #4]
 8003a80:	9345      	str	r3, [sp, #276]	; 0x114
 8003a82:	e755      	b.n	8003930 <__ssvfiscanf_r+0x54>
 8003a84:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003a86:	4621      	mov	r1, r4
 8003a88:	4630      	mov	r0, r6
 8003a8a:	4798      	blx	r3
 8003a8c:	2800      	cmp	r0, #0
 8003a8e:	d0eb      	beq.n	8003a68 <__ssvfiscanf_r+0x18c>
 8003a90:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003a92:	2800      	cmp	r0, #0
 8003a94:	f040 8084 	bne.w	8003ba0 <__ssvfiscanf_r+0x2c4>
 8003a98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a9c:	e086      	b.n	8003bac <__ssvfiscanf_r+0x2d0>
 8003a9e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003aa0:	f042 0220 	orr.w	r2, r2, #32
 8003aa4:	9241      	str	r2, [sp, #260]	; 0x104
 8003aa6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003aa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aac:	9241      	str	r2, [sp, #260]	; 0x104
 8003aae:	2210      	movs	r2, #16
 8003ab0:	2b6f      	cmp	r3, #111	; 0x6f
 8003ab2:	9242      	str	r2, [sp, #264]	; 0x108
 8003ab4:	bf34      	ite	cc
 8003ab6:	2303      	movcc	r3, #3
 8003ab8:	2304      	movcs	r3, #4
 8003aba:	9347      	str	r3, [sp, #284]	; 0x11c
 8003abc:	6863      	ldr	r3, [r4, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	dd41      	ble.n	8003b46 <__ssvfiscanf_r+0x26a>
 8003ac2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003ac4:	0659      	lsls	r1, r3, #25
 8003ac6:	d404      	bmi.n	8003ad2 <__ssvfiscanf_r+0x1f6>
 8003ac8:	6823      	ldr	r3, [r4, #0]
 8003aca:	781a      	ldrb	r2, [r3, #0]
 8003acc:	5cba      	ldrb	r2, [r7, r2]
 8003ace:	0712      	lsls	r2, r2, #28
 8003ad0:	d440      	bmi.n	8003b54 <__ssvfiscanf_r+0x278>
 8003ad2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	dc4f      	bgt.n	8003b78 <__ssvfiscanf_r+0x29c>
 8003ad8:	466b      	mov	r3, sp
 8003ada:	4622      	mov	r2, r4
 8003adc:	a941      	add	r1, sp, #260	; 0x104
 8003ade:	4630      	mov	r0, r6
 8003ae0:	f000 fa08 	bl	8003ef4 <_scanf_chars>
 8003ae4:	2801      	cmp	r0, #1
 8003ae6:	d065      	beq.n	8003bb4 <__ssvfiscanf_r+0x2d8>
 8003ae8:	2802      	cmp	r0, #2
 8003aea:	f47f af21 	bne.w	8003930 <__ssvfiscanf_r+0x54>
 8003aee:	e7cf      	b.n	8003a90 <__ssvfiscanf_r+0x1b4>
 8003af0:	220a      	movs	r2, #10
 8003af2:	e7dd      	b.n	8003ab0 <__ssvfiscanf_r+0x1d4>
 8003af4:	2300      	movs	r3, #0
 8003af6:	9342      	str	r3, [sp, #264]	; 0x108
 8003af8:	2303      	movs	r3, #3
 8003afa:	e7de      	b.n	8003aba <__ssvfiscanf_r+0x1de>
 8003afc:	2308      	movs	r3, #8
 8003afe:	9342      	str	r3, [sp, #264]	; 0x108
 8003b00:	2304      	movs	r3, #4
 8003b02:	e7da      	b.n	8003aba <__ssvfiscanf_r+0x1de>
 8003b04:	4629      	mov	r1, r5
 8003b06:	4640      	mov	r0, r8
 8003b08:	f000 fb40 	bl	800418c <__sccl>
 8003b0c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003b0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b12:	9341      	str	r3, [sp, #260]	; 0x104
 8003b14:	4605      	mov	r5, r0
 8003b16:	2301      	movs	r3, #1
 8003b18:	e7cf      	b.n	8003aba <__ssvfiscanf_r+0x1de>
 8003b1a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b20:	9341      	str	r3, [sp, #260]	; 0x104
 8003b22:	2300      	movs	r3, #0
 8003b24:	e7c9      	b.n	8003aba <__ssvfiscanf_r+0x1de>
 8003b26:	2302      	movs	r3, #2
 8003b28:	e7c7      	b.n	8003aba <__ssvfiscanf_r+0x1de>
 8003b2a:	9841      	ldr	r0, [sp, #260]	; 0x104
 8003b2c:	06c3      	lsls	r3, r0, #27
 8003b2e:	f53f aeff 	bmi.w	8003930 <__ssvfiscanf_r+0x54>
 8003b32:	9b00      	ldr	r3, [sp, #0]
 8003b34:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003b36:	1d19      	adds	r1, r3, #4
 8003b38:	9100      	str	r1, [sp, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	07c0      	lsls	r0, r0, #31
 8003b3e:	bf4c      	ite	mi
 8003b40:	801a      	strhmi	r2, [r3, #0]
 8003b42:	601a      	strpl	r2, [r3, #0]
 8003b44:	e6f4      	b.n	8003930 <__ssvfiscanf_r+0x54>
 8003b46:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003b48:	4621      	mov	r1, r4
 8003b4a:	4630      	mov	r0, r6
 8003b4c:	4798      	blx	r3
 8003b4e:	2800      	cmp	r0, #0
 8003b50:	d0b7      	beq.n	8003ac2 <__ssvfiscanf_r+0x1e6>
 8003b52:	e79d      	b.n	8003a90 <__ssvfiscanf_r+0x1b4>
 8003b54:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003b56:	3201      	adds	r2, #1
 8003b58:	9245      	str	r2, [sp, #276]	; 0x114
 8003b5a:	6862      	ldr	r2, [r4, #4]
 8003b5c:	3a01      	subs	r2, #1
 8003b5e:	2a00      	cmp	r2, #0
 8003b60:	6062      	str	r2, [r4, #4]
 8003b62:	dd02      	ble.n	8003b6a <__ssvfiscanf_r+0x28e>
 8003b64:	3301      	adds	r3, #1
 8003b66:	6023      	str	r3, [r4, #0]
 8003b68:	e7ae      	b.n	8003ac8 <__ssvfiscanf_r+0x1ec>
 8003b6a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003b6c:	4621      	mov	r1, r4
 8003b6e:	4630      	mov	r0, r6
 8003b70:	4798      	blx	r3
 8003b72:	2800      	cmp	r0, #0
 8003b74:	d0a8      	beq.n	8003ac8 <__ssvfiscanf_r+0x1ec>
 8003b76:	e78b      	b.n	8003a90 <__ssvfiscanf_r+0x1b4>
 8003b78:	2b04      	cmp	r3, #4
 8003b7a:	dc06      	bgt.n	8003b8a <__ssvfiscanf_r+0x2ae>
 8003b7c:	466b      	mov	r3, sp
 8003b7e:	4622      	mov	r2, r4
 8003b80:	a941      	add	r1, sp, #260	; 0x104
 8003b82:	4630      	mov	r0, r6
 8003b84:	f000 fa0e 	bl	8003fa4 <_scanf_i>
 8003b88:	e7ac      	b.n	8003ae4 <__ssvfiscanf_r+0x208>
 8003b8a:	4b0f      	ldr	r3, [pc, #60]	; (8003bc8 <__ssvfiscanf_r+0x2ec>)
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f43f aecf 	beq.w	8003930 <__ssvfiscanf_r+0x54>
 8003b92:	466b      	mov	r3, sp
 8003b94:	4622      	mov	r2, r4
 8003b96:	a941      	add	r1, sp, #260	; 0x104
 8003b98:	4630      	mov	r0, r6
 8003b9a:	f3af 8000 	nop.w
 8003b9e:	e7a1      	b.n	8003ae4 <__ssvfiscanf_r+0x208>
 8003ba0:	89a3      	ldrh	r3, [r4, #12]
 8003ba2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003ba6:	bf18      	it	ne
 8003ba8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8003bac:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8003bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bb4:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003bb6:	e7f9      	b.n	8003bac <__ssvfiscanf_r+0x2d0>
 8003bb8:	08003829 	.word	0x08003829
 8003bbc:	080038a3 	.word	0x080038a3
 8003bc0:	08004953 	.word	0x08004953
 8003bc4:	0800490a 	.word	0x0800490a
 8003bc8:	00000000 	.word	0x00000000

08003bcc <_printf_common>:
 8003bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bd0:	4616      	mov	r6, r2
 8003bd2:	4699      	mov	r9, r3
 8003bd4:	688a      	ldr	r2, [r1, #8]
 8003bd6:	690b      	ldr	r3, [r1, #16]
 8003bd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	bfb8      	it	lt
 8003be0:	4613      	movlt	r3, r2
 8003be2:	6033      	str	r3, [r6, #0]
 8003be4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003be8:	4607      	mov	r7, r0
 8003bea:	460c      	mov	r4, r1
 8003bec:	b10a      	cbz	r2, 8003bf2 <_printf_common+0x26>
 8003bee:	3301      	adds	r3, #1
 8003bf0:	6033      	str	r3, [r6, #0]
 8003bf2:	6823      	ldr	r3, [r4, #0]
 8003bf4:	0699      	lsls	r1, r3, #26
 8003bf6:	bf42      	ittt	mi
 8003bf8:	6833      	ldrmi	r3, [r6, #0]
 8003bfa:	3302      	addmi	r3, #2
 8003bfc:	6033      	strmi	r3, [r6, #0]
 8003bfe:	6825      	ldr	r5, [r4, #0]
 8003c00:	f015 0506 	ands.w	r5, r5, #6
 8003c04:	d106      	bne.n	8003c14 <_printf_common+0x48>
 8003c06:	f104 0a19 	add.w	sl, r4, #25
 8003c0a:	68e3      	ldr	r3, [r4, #12]
 8003c0c:	6832      	ldr	r2, [r6, #0]
 8003c0e:	1a9b      	subs	r3, r3, r2
 8003c10:	42ab      	cmp	r3, r5
 8003c12:	dc26      	bgt.n	8003c62 <_printf_common+0x96>
 8003c14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c18:	1e13      	subs	r3, r2, #0
 8003c1a:	6822      	ldr	r2, [r4, #0]
 8003c1c:	bf18      	it	ne
 8003c1e:	2301      	movne	r3, #1
 8003c20:	0692      	lsls	r2, r2, #26
 8003c22:	d42b      	bmi.n	8003c7c <_printf_common+0xb0>
 8003c24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c28:	4649      	mov	r1, r9
 8003c2a:	4638      	mov	r0, r7
 8003c2c:	47c0      	blx	r8
 8003c2e:	3001      	adds	r0, #1
 8003c30:	d01e      	beq.n	8003c70 <_printf_common+0xa4>
 8003c32:	6823      	ldr	r3, [r4, #0]
 8003c34:	68e5      	ldr	r5, [r4, #12]
 8003c36:	6832      	ldr	r2, [r6, #0]
 8003c38:	f003 0306 	and.w	r3, r3, #6
 8003c3c:	2b04      	cmp	r3, #4
 8003c3e:	bf08      	it	eq
 8003c40:	1aad      	subeq	r5, r5, r2
 8003c42:	68a3      	ldr	r3, [r4, #8]
 8003c44:	6922      	ldr	r2, [r4, #16]
 8003c46:	bf0c      	ite	eq
 8003c48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c4c:	2500      	movne	r5, #0
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	bfc4      	itt	gt
 8003c52:	1a9b      	subgt	r3, r3, r2
 8003c54:	18ed      	addgt	r5, r5, r3
 8003c56:	2600      	movs	r6, #0
 8003c58:	341a      	adds	r4, #26
 8003c5a:	42b5      	cmp	r5, r6
 8003c5c:	d11a      	bne.n	8003c94 <_printf_common+0xc8>
 8003c5e:	2000      	movs	r0, #0
 8003c60:	e008      	b.n	8003c74 <_printf_common+0xa8>
 8003c62:	2301      	movs	r3, #1
 8003c64:	4652      	mov	r2, sl
 8003c66:	4649      	mov	r1, r9
 8003c68:	4638      	mov	r0, r7
 8003c6a:	47c0      	blx	r8
 8003c6c:	3001      	adds	r0, #1
 8003c6e:	d103      	bne.n	8003c78 <_printf_common+0xac>
 8003c70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c78:	3501      	adds	r5, #1
 8003c7a:	e7c6      	b.n	8003c0a <_printf_common+0x3e>
 8003c7c:	18e1      	adds	r1, r4, r3
 8003c7e:	1c5a      	adds	r2, r3, #1
 8003c80:	2030      	movs	r0, #48	; 0x30
 8003c82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c86:	4422      	add	r2, r4
 8003c88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c90:	3302      	adds	r3, #2
 8003c92:	e7c7      	b.n	8003c24 <_printf_common+0x58>
 8003c94:	2301      	movs	r3, #1
 8003c96:	4622      	mov	r2, r4
 8003c98:	4649      	mov	r1, r9
 8003c9a:	4638      	mov	r0, r7
 8003c9c:	47c0      	blx	r8
 8003c9e:	3001      	adds	r0, #1
 8003ca0:	d0e6      	beq.n	8003c70 <_printf_common+0xa4>
 8003ca2:	3601      	adds	r6, #1
 8003ca4:	e7d9      	b.n	8003c5a <_printf_common+0x8e>
	...

08003ca8 <_printf_i>:
 8003ca8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003cac:	460c      	mov	r4, r1
 8003cae:	4691      	mov	r9, r2
 8003cb0:	7e27      	ldrb	r7, [r4, #24]
 8003cb2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003cb4:	2f78      	cmp	r7, #120	; 0x78
 8003cb6:	4680      	mov	r8, r0
 8003cb8:	469a      	mov	sl, r3
 8003cba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003cbe:	d807      	bhi.n	8003cd0 <_printf_i+0x28>
 8003cc0:	2f62      	cmp	r7, #98	; 0x62
 8003cc2:	d80a      	bhi.n	8003cda <_printf_i+0x32>
 8003cc4:	2f00      	cmp	r7, #0
 8003cc6:	f000 80d8 	beq.w	8003e7a <_printf_i+0x1d2>
 8003cca:	2f58      	cmp	r7, #88	; 0x58
 8003ccc:	f000 80a3 	beq.w	8003e16 <_printf_i+0x16e>
 8003cd0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003cd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003cd8:	e03a      	b.n	8003d50 <_printf_i+0xa8>
 8003cda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003cde:	2b15      	cmp	r3, #21
 8003ce0:	d8f6      	bhi.n	8003cd0 <_printf_i+0x28>
 8003ce2:	a001      	add	r0, pc, #4	; (adr r0, 8003ce8 <_printf_i+0x40>)
 8003ce4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003ce8:	08003d41 	.word	0x08003d41
 8003cec:	08003d55 	.word	0x08003d55
 8003cf0:	08003cd1 	.word	0x08003cd1
 8003cf4:	08003cd1 	.word	0x08003cd1
 8003cf8:	08003cd1 	.word	0x08003cd1
 8003cfc:	08003cd1 	.word	0x08003cd1
 8003d00:	08003d55 	.word	0x08003d55
 8003d04:	08003cd1 	.word	0x08003cd1
 8003d08:	08003cd1 	.word	0x08003cd1
 8003d0c:	08003cd1 	.word	0x08003cd1
 8003d10:	08003cd1 	.word	0x08003cd1
 8003d14:	08003e61 	.word	0x08003e61
 8003d18:	08003d85 	.word	0x08003d85
 8003d1c:	08003e43 	.word	0x08003e43
 8003d20:	08003cd1 	.word	0x08003cd1
 8003d24:	08003cd1 	.word	0x08003cd1
 8003d28:	08003e83 	.word	0x08003e83
 8003d2c:	08003cd1 	.word	0x08003cd1
 8003d30:	08003d85 	.word	0x08003d85
 8003d34:	08003cd1 	.word	0x08003cd1
 8003d38:	08003cd1 	.word	0x08003cd1
 8003d3c:	08003e4b 	.word	0x08003e4b
 8003d40:	680b      	ldr	r3, [r1, #0]
 8003d42:	1d1a      	adds	r2, r3, #4
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	600a      	str	r2, [r1, #0]
 8003d48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003d4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d50:	2301      	movs	r3, #1
 8003d52:	e0a3      	b.n	8003e9c <_printf_i+0x1f4>
 8003d54:	6825      	ldr	r5, [r4, #0]
 8003d56:	6808      	ldr	r0, [r1, #0]
 8003d58:	062e      	lsls	r6, r5, #24
 8003d5a:	f100 0304 	add.w	r3, r0, #4
 8003d5e:	d50a      	bpl.n	8003d76 <_printf_i+0xce>
 8003d60:	6805      	ldr	r5, [r0, #0]
 8003d62:	600b      	str	r3, [r1, #0]
 8003d64:	2d00      	cmp	r5, #0
 8003d66:	da03      	bge.n	8003d70 <_printf_i+0xc8>
 8003d68:	232d      	movs	r3, #45	; 0x2d
 8003d6a:	426d      	negs	r5, r5
 8003d6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d70:	485e      	ldr	r0, [pc, #376]	; (8003eec <_printf_i+0x244>)
 8003d72:	230a      	movs	r3, #10
 8003d74:	e019      	b.n	8003daa <_printf_i+0x102>
 8003d76:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003d7a:	6805      	ldr	r5, [r0, #0]
 8003d7c:	600b      	str	r3, [r1, #0]
 8003d7e:	bf18      	it	ne
 8003d80:	b22d      	sxthne	r5, r5
 8003d82:	e7ef      	b.n	8003d64 <_printf_i+0xbc>
 8003d84:	680b      	ldr	r3, [r1, #0]
 8003d86:	6825      	ldr	r5, [r4, #0]
 8003d88:	1d18      	adds	r0, r3, #4
 8003d8a:	6008      	str	r0, [r1, #0]
 8003d8c:	0628      	lsls	r0, r5, #24
 8003d8e:	d501      	bpl.n	8003d94 <_printf_i+0xec>
 8003d90:	681d      	ldr	r5, [r3, #0]
 8003d92:	e002      	b.n	8003d9a <_printf_i+0xf2>
 8003d94:	0669      	lsls	r1, r5, #25
 8003d96:	d5fb      	bpl.n	8003d90 <_printf_i+0xe8>
 8003d98:	881d      	ldrh	r5, [r3, #0]
 8003d9a:	4854      	ldr	r0, [pc, #336]	; (8003eec <_printf_i+0x244>)
 8003d9c:	2f6f      	cmp	r7, #111	; 0x6f
 8003d9e:	bf0c      	ite	eq
 8003da0:	2308      	moveq	r3, #8
 8003da2:	230a      	movne	r3, #10
 8003da4:	2100      	movs	r1, #0
 8003da6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003daa:	6866      	ldr	r6, [r4, #4]
 8003dac:	60a6      	str	r6, [r4, #8]
 8003dae:	2e00      	cmp	r6, #0
 8003db0:	bfa2      	ittt	ge
 8003db2:	6821      	ldrge	r1, [r4, #0]
 8003db4:	f021 0104 	bicge.w	r1, r1, #4
 8003db8:	6021      	strge	r1, [r4, #0]
 8003dba:	b90d      	cbnz	r5, 8003dc0 <_printf_i+0x118>
 8003dbc:	2e00      	cmp	r6, #0
 8003dbe:	d04d      	beq.n	8003e5c <_printf_i+0x1b4>
 8003dc0:	4616      	mov	r6, r2
 8003dc2:	fbb5 f1f3 	udiv	r1, r5, r3
 8003dc6:	fb03 5711 	mls	r7, r3, r1, r5
 8003dca:	5dc7      	ldrb	r7, [r0, r7]
 8003dcc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003dd0:	462f      	mov	r7, r5
 8003dd2:	42bb      	cmp	r3, r7
 8003dd4:	460d      	mov	r5, r1
 8003dd6:	d9f4      	bls.n	8003dc2 <_printf_i+0x11a>
 8003dd8:	2b08      	cmp	r3, #8
 8003dda:	d10b      	bne.n	8003df4 <_printf_i+0x14c>
 8003ddc:	6823      	ldr	r3, [r4, #0]
 8003dde:	07df      	lsls	r7, r3, #31
 8003de0:	d508      	bpl.n	8003df4 <_printf_i+0x14c>
 8003de2:	6923      	ldr	r3, [r4, #16]
 8003de4:	6861      	ldr	r1, [r4, #4]
 8003de6:	4299      	cmp	r1, r3
 8003de8:	bfde      	ittt	le
 8003dea:	2330      	movle	r3, #48	; 0x30
 8003dec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003df0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8003df4:	1b92      	subs	r2, r2, r6
 8003df6:	6122      	str	r2, [r4, #16]
 8003df8:	f8cd a000 	str.w	sl, [sp]
 8003dfc:	464b      	mov	r3, r9
 8003dfe:	aa03      	add	r2, sp, #12
 8003e00:	4621      	mov	r1, r4
 8003e02:	4640      	mov	r0, r8
 8003e04:	f7ff fee2 	bl	8003bcc <_printf_common>
 8003e08:	3001      	adds	r0, #1
 8003e0a:	d14c      	bne.n	8003ea6 <_printf_i+0x1fe>
 8003e0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e10:	b004      	add	sp, #16
 8003e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e16:	4835      	ldr	r0, [pc, #212]	; (8003eec <_printf_i+0x244>)
 8003e18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003e1c:	6823      	ldr	r3, [r4, #0]
 8003e1e:	680e      	ldr	r6, [r1, #0]
 8003e20:	061f      	lsls	r7, r3, #24
 8003e22:	f856 5b04 	ldr.w	r5, [r6], #4
 8003e26:	600e      	str	r6, [r1, #0]
 8003e28:	d514      	bpl.n	8003e54 <_printf_i+0x1ac>
 8003e2a:	07d9      	lsls	r1, r3, #31
 8003e2c:	bf44      	itt	mi
 8003e2e:	f043 0320 	orrmi.w	r3, r3, #32
 8003e32:	6023      	strmi	r3, [r4, #0]
 8003e34:	b91d      	cbnz	r5, 8003e3e <_printf_i+0x196>
 8003e36:	6823      	ldr	r3, [r4, #0]
 8003e38:	f023 0320 	bic.w	r3, r3, #32
 8003e3c:	6023      	str	r3, [r4, #0]
 8003e3e:	2310      	movs	r3, #16
 8003e40:	e7b0      	b.n	8003da4 <_printf_i+0xfc>
 8003e42:	6823      	ldr	r3, [r4, #0]
 8003e44:	f043 0320 	orr.w	r3, r3, #32
 8003e48:	6023      	str	r3, [r4, #0]
 8003e4a:	2378      	movs	r3, #120	; 0x78
 8003e4c:	4828      	ldr	r0, [pc, #160]	; (8003ef0 <_printf_i+0x248>)
 8003e4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e52:	e7e3      	b.n	8003e1c <_printf_i+0x174>
 8003e54:	065e      	lsls	r6, r3, #25
 8003e56:	bf48      	it	mi
 8003e58:	b2ad      	uxthmi	r5, r5
 8003e5a:	e7e6      	b.n	8003e2a <_printf_i+0x182>
 8003e5c:	4616      	mov	r6, r2
 8003e5e:	e7bb      	b.n	8003dd8 <_printf_i+0x130>
 8003e60:	680b      	ldr	r3, [r1, #0]
 8003e62:	6826      	ldr	r6, [r4, #0]
 8003e64:	6960      	ldr	r0, [r4, #20]
 8003e66:	1d1d      	adds	r5, r3, #4
 8003e68:	600d      	str	r5, [r1, #0]
 8003e6a:	0635      	lsls	r5, r6, #24
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	d501      	bpl.n	8003e74 <_printf_i+0x1cc>
 8003e70:	6018      	str	r0, [r3, #0]
 8003e72:	e002      	b.n	8003e7a <_printf_i+0x1d2>
 8003e74:	0671      	lsls	r1, r6, #25
 8003e76:	d5fb      	bpl.n	8003e70 <_printf_i+0x1c8>
 8003e78:	8018      	strh	r0, [r3, #0]
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	6123      	str	r3, [r4, #16]
 8003e7e:	4616      	mov	r6, r2
 8003e80:	e7ba      	b.n	8003df8 <_printf_i+0x150>
 8003e82:	680b      	ldr	r3, [r1, #0]
 8003e84:	1d1a      	adds	r2, r3, #4
 8003e86:	600a      	str	r2, [r1, #0]
 8003e88:	681e      	ldr	r6, [r3, #0]
 8003e8a:	6862      	ldr	r2, [r4, #4]
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	4630      	mov	r0, r6
 8003e90:	f7fc f9c6 	bl	8000220 <memchr>
 8003e94:	b108      	cbz	r0, 8003e9a <_printf_i+0x1f2>
 8003e96:	1b80      	subs	r0, r0, r6
 8003e98:	6060      	str	r0, [r4, #4]
 8003e9a:	6863      	ldr	r3, [r4, #4]
 8003e9c:	6123      	str	r3, [r4, #16]
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ea4:	e7a8      	b.n	8003df8 <_printf_i+0x150>
 8003ea6:	6923      	ldr	r3, [r4, #16]
 8003ea8:	4632      	mov	r2, r6
 8003eaa:	4649      	mov	r1, r9
 8003eac:	4640      	mov	r0, r8
 8003eae:	47d0      	blx	sl
 8003eb0:	3001      	adds	r0, #1
 8003eb2:	d0ab      	beq.n	8003e0c <_printf_i+0x164>
 8003eb4:	6823      	ldr	r3, [r4, #0]
 8003eb6:	079b      	lsls	r3, r3, #30
 8003eb8:	d413      	bmi.n	8003ee2 <_printf_i+0x23a>
 8003eba:	68e0      	ldr	r0, [r4, #12]
 8003ebc:	9b03      	ldr	r3, [sp, #12]
 8003ebe:	4298      	cmp	r0, r3
 8003ec0:	bfb8      	it	lt
 8003ec2:	4618      	movlt	r0, r3
 8003ec4:	e7a4      	b.n	8003e10 <_printf_i+0x168>
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	4632      	mov	r2, r6
 8003eca:	4649      	mov	r1, r9
 8003ecc:	4640      	mov	r0, r8
 8003ece:	47d0      	blx	sl
 8003ed0:	3001      	adds	r0, #1
 8003ed2:	d09b      	beq.n	8003e0c <_printf_i+0x164>
 8003ed4:	3501      	adds	r5, #1
 8003ed6:	68e3      	ldr	r3, [r4, #12]
 8003ed8:	9903      	ldr	r1, [sp, #12]
 8003eda:	1a5b      	subs	r3, r3, r1
 8003edc:	42ab      	cmp	r3, r5
 8003ede:	dcf2      	bgt.n	8003ec6 <_printf_i+0x21e>
 8003ee0:	e7eb      	b.n	8003eba <_printf_i+0x212>
 8003ee2:	2500      	movs	r5, #0
 8003ee4:	f104 0619 	add.w	r6, r4, #25
 8003ee8:	e7f5      	b.n	8003ed6 <_printf_i+0x22e>
 8003eea:	bf00      	nop
 8003eec:	08004915 	.word	0x08004915
 8003ef0:	08004926 	.word	0x08004926

08003ef4 <_scanf_chars>:
 8003ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ef8:	4615      	mov	r5, r2
 8003efa:	688a      	ldr	r2, [r1, #8]
 8003efc:	4680      	mov	r8, r0
 8003efe:	460c      	mov	r4, r1
 8003f00:	b932      	cbnz	r2, 8003f10 <_scanf_chars+0x1c>
 8003f02:	698a      	ldr	r2, [r1, #24]
 8003f04:	2a00      	cmp	r2, #0
 8003f06:	bf0c      	ite	eq
 8003f08:	2201      	moveq	r2, #1
 8003f0a:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8003f0e:	608a      	str	r2, [r1, #8]
 8003f10:	6822      	ldr	r2, [r4, #0]
 8003f12:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8003fa0 <_scanf_chars+0xac>
 8003f16:	06d1      	lsls	r1, r2, #27
 8003f18:	bf5f      	itttt	pl
 8003f1a:	681a      	ldrpl	r2, [r3, #0]
 8003f1c:	1d11      	addpl	r1, r2, #4
 8003f1e:	6019      	strpl	r1, [r3, #0]
 8003f20:	6816      	ldrpl	r6, [r2, #0]
 8003f22:	2700      	movs	r7, #0
 8003f24:	69a0      	ldr	r0, [r4, #24]
 8003f26:	b188      	cbz	r0, 8003f4c <_scanf_chars+0x58>
 8003f28:	2801      	cmp	r0, #1
 8003f2a:	d107      	bne.n	8003f3c <_scanf_chars+0x48>
 8003f2c:	682b      	ldr	r3, [r5, #0]
 8003f2e:	781a      	ldrb	r2, [r3, #0]
 8003f30:	6963      	ldr	r3, [r4, #20]
 8003f32:	5c9b      	ldrb	r3, [r3, r2]
 8003f34:	b953      	cbnz	r3, 8003f4c <_scanf_chars+0x58>
 8003f36:	bb27      	cbnz	r7, 8003f82 <_scanf_chars+0x8e>
 8003f38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f3c:	2802      	cmp	r0, #2
 8003f3e:	d120      	bne.n	8003f82 <_scanf_chars+0x8e>
 8003f40:	682b      	ldr	r3, [r5, #0]
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	f813 3009 	ldrb.w	r3, [r3, r9]
 8003f48:	071b      	lsls	r3, r3, #28
 8003f4a:	d41a      	bmi.n	8003f82 <_scanf_chars+0x8e>
 8003f4c:	6823      	ldr	r3, [r4, #0]
 8003f4e:	06da      	lsls	r2, r3, #27
 8003f50:	bf5e      	ittt	pl
 8003f52:	682b      	ldrpl	r3, [r5, #0]
 8003f54:	781b      	ldrbpl	r3, [r3, #0]
 8003f56:	f806 3b01 	strbpl.w	r3, [r6], #1
 8003f5a:	682a      	ldr	r2, [r5, #0]
 8003f5c:	686b      	ldr	r3, [r5, #4]
 8003f5e:	3201      	adds	r2, #1
 8003f60:	602a      	str	r2, [r5, #0]
 8003f62:	68a2      	ldr	r2, [r4, #8]
 8003f64:	3b01      	subs	r3, #1
 8003f66:	3a01      	subs	r2, #1
 8003f68:	606b      	str	r3, [r5, #4]
 8003f6a:	3701      	adds	r7, #1
 8003f6c:	60a2      	str	r2, [r4, #8]
 8003f6e:	b142      	cbz	r2, 8003f82 <_scanf_chars+0x8e>
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	dcd7      	bgt.n	8003f24 <_scanf_chars+0x30>
 8003f74:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003f78:	4629      	mov	r1, r5
 8003f7a:	4640      	mov	r0, r8
 8003f7c:	4798      	blx	r3
 8003f7e:	2800      	cmp	r0, #0
 8003f80:	d0d0      	beq.n	8003f24 <_scanf_chars+0x30>
 8003f82:	6823      	ldr	r3, [r4, #0]
 8003f84:	f013 0310 	ands.w	r3, r3, #16
 8003f88:	d105      	bne.n	8003f96 <_scanf_chars+0xa2>
 8003f8a:	68e2      	ldr	r2, [r4, #12]
 8003f8c:	3201      	adds	r2, #1
 8003f8e:	60e2      	str	r2, [r4, #12]
 8003f90:	69a2      	ldr	r2, [r4, #24]
 8003f92:	b102      	cbz	r2, 8003f96 <_scanf_chars+0xa2>
 8003f94:	7033      	strb	r3, [r6, #0]
 8003f96:	6923      	ldr	r3, [r4, #16]
 8003f98:	441f      	add	r7, r3
 8003f9a:	6127      	str	r7, [r4, #16]
 8003f9c:	2000      	movs	r0, #0
 8003f9e:	e7cb      	b.n	8003f38 <_scanf_chars+0x44>
 8003fa0:	08004953 	.word	0x08004953

08003fa4 <_scanf_i>:
 8003fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fa8:	4698      	mov	r8, r3
 8003faa:	4b74      	ldr	r3, [pc, #464]	; (800417c <_scanf_i+0x1d8>)
 8003fac:	460c      	mov	r4, r1
 8003fae:	4682      	mov	sl, r0
 8003fb0:	4616      	mov	r6, r2
 8003fb2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003fb6:	b087      	sub	sp, #28
 8003fb8:	ab03      	add	r3, sp, #12
 8003fba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003fbe:	4b70      	ldr	r3, [pc, #448]	; (8004180 <_scanf_i+0x1dc>)
 8003fc0:	69a1      	ldr	r1, [r4, #24]
 8003fc2:	4a70      	ldr	r2, [pc, #448]	; (8004184 <_scanf_i+0x1e0>)
 8003fc4:	2903      	cmp	r1, #3
 8003fc6:	bf18      	it	ne
 8003fc8:	461a      	movne	r2, r3
 8003fca:	68a3      	ldr	r3, [r4, #8]
 8003fcc:	9201      	str	r2, [sp, #4]
 8003fce:	1e5a      	subs	r2, r3, #1
 8003fd0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003fd4:	bf88      	it	hi
 8003fd6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003fda:	4627      	mov	r7, r4
 8003fdc:	bf82      	ittt	hi
 8003fde:	eb03 0905 	addhi.w	r9, r3, r5
 8003fe2:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003fe6:	60a3      	strhi	r3, [r4, #8]
 8003fe8:	f857 3b1c 	ldr.w	r3, [r7], #28
 8003fec:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8003ff0:	bf98      	it	ls
 8003ff2:	f04f 0900 	movls.w	r9, #0
 8003ff6:	6023      	str	r3, [r4, #0]
 8003ff8:	463d      	mov	r5, r7
 8003ffa:	f04f 0b00 	mov.w	fp, #0
 8003ffe:	6831      	ldr	r1, [r6, #0]
 8004000:	ab03      	add	r3, sp, #12
 8004002:	7809      	ldrb	r1, [r1, #0]
 8004004:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8004008:	2202      	movs	r2, #2
 800400a:	f7fc f909 	bl	8000220 <memchr>
 800400e:	b328      	cbz	r0, 800405c <_scanf_i+0xb8>
 8004010:	f1bb 0f01 	cmp.w	fp, #1
 8004014:	d159      	bne.n	80040ca <_scanf_i+0x126>
 8004016:	6862      	ldr	r2, [r4, #4]
 8004018:	b92a      	cbnz	r2, 8004026 <_scanf_i+0x82>
 800401a:	6822      	ldr	r2, [r4, #0]
 800401c:	2308      	movs	r3, #8
 800401e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004022:	6063      	str	r3, [r4, #4]
 8004024:	6022      	str	r2, [r4, #0]
 8004026:	6822      	ldr	r2, [r4, #0]
 8004028:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800402c:	6022      	str	r2, [r4, #0]
 800402e:	68a2      	ldr	r2, [r4, #8]
 8004030:	1e51      	subs	r1, r2, #1
 8004032:	60a1      	str	r1, [r4, #8]
 8004034:	b192      	cbz	r2, 800405c <_scanf_i+0xb8>
 8004036:	6832      	ldr	r2, [r6, #0]
 8004038:	1c51      	adds	r1, r2, #1
 800403a:	6031      	str	r1, [r6, #0]
 800403c:	7812      	ldrb	r2, [r2, #0]
 800403e:	f805 2b01 	strb.w	r2, [r5], #1
 8004042:	6872      	ldr	r2, [r6, #4]
 8004044:	3a01      	subs	r2, #1
 8004046:	2a00      	cmp	r2, #0
 8004048:	6072      	str	r2, [r6, #4]
 800404a:	dc07      	bgt.n	800405c <_scanf_i+0xb8>
 800404c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8004050:	4631      	mov	r1, r6
 8004052:	4650      	mov	r0, sl
 8004054:	4790      	blx	r2
 8004056:	2800      	cmp	r0, #0
 8004058:	f040 8085 	bne.w	8004166 <_scanf_i+0x1c2>
 800405c:	f10b 0b01 	add.w	fp, fp, #1
 8004060:	f1bb 0f03 	cmp.w	fp, #3
 8004064:	d1cb      	bne.n	8003ffe <_scanf_i+0x5a>
 8004066:	6863      	ldr	r3, [r4, #4]
 8004068:	b90b      	cbnz	r3, 800406e <_scanf_i+0xca>
 800406a:	230a      	movs	r3, #10
 800406c:	6063      	str	r3, [r4, #4]
 800406e:	6863      	ldr	r3, [r4, #4]
 8004070:	4945      	ldr	r1, [pc, #276]	; (8004188 <_scanf_i+0x1e4>)
 8004072:	6960      	ldr	r0, [r4, #20]
 8004074:	1ac9      	subs	r1, r1, r3
 8004076:	f000 f889 	bl	800418c <__sccl>
 800407a:	f04f 0b00 	mov.w	fp, #0
 800407e:	68a3      	ldr	r3, [r4, #8]
 8004080:	6822      	ldr	r2, [r4, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d03d      	beq.n	8004102 <_scanf_i+0x15e>
 8004086:	6831      	ldr	r1, [r6, #0]
 8004088:	6960      	ldr	r0, [r4, #20]
 800408a:	f891 c000 	ldrb.w	ip, [r1]
 800408e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8004092:	2800      	cmp	r0, #0
 8004094:	d035      	beq.n	8004102 <_scanf_i+0x15e>
 8004096:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800409a:	d124      	bne.n	80040e6 <_scanf_i+0x142>
 800409c:	0510      	lsls	r0, r2, #20
 800409e:	d522      	bpl.n	80040e6 <_scanf_i+0x142>
 80040a0:	f10b 0b01 	add.w	fp, fp, #1
 80040a4:	f1b9 0f00 	cmp.w	r9, #0
 80040a8:	d003      	beq.n	80040b2 <_scanf_i+0x10e>
 80040aa:	3301      	adds	r3, #1
 80040ac:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80040b0:	60a3      	str	r3, [r4, #8]
 80040b2:	6873      	ldr	r3, [r6, #4]
 80040b4:	3b01      	subs	r3, #1
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	6073      	str	r3, [r6, #4]
 80040ba:	dd1b      	ble.n	80040f4 <_scanf_i+0x150>
 80040bc:	6833      	ldr	r3, [r6, #0]
 80040be:	3301      	adds	r3, #1
 80040c0:	6033      	str	r3, [r6, #0]
 80040c2:	68a3      	ldr	r3, [r4, #8]
 80040c4:	3b01      	subs	r3, #1
 80040c6:	60a3      	str	r3, [r4, #8]
 80040c8:	e7d9      	b.n	800407e <_scanf_i+0xda>
 80040ca:	f1bb 0f02 	cmp.w	fp, #2
 80040ce:	d1ae      	bne.n	800402e <_scanf_i+0x8a>
 80040d0:	6822      	ldr	r2, [r4, #0]
 80040d2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80040d6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80040da:	d1bf      	bne.n	800405c <_scanf_i+0xb8>
 80040dc:	2310      	movs	r3, #16
 80040de:	6063      	str	r3, [r4, #4]
 80040e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040e4:	e7a2      	b.n	800402c <_scanf_i+0x88>
 80040e6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80040ea:	6022      	str	r2, [r4, #0]
 80040ec:	780b      	ldrb	r3, [r1, #0]
 80040ee:	f805 3b01 	strb.w	r3, [r5], #1
 80040f2:	e7de      	b.n	80040b2 <_scanf_i+0x10e>
 80040f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80040f8:	4631      	mov	r1, r6
 80040fa:	4650      	mov	r0, sl
 80040fc:	4798      	blx	r3
 80040fe:	2800      	cmp	r0, #0
 8004100:	d0df      	beq.n	80040c2 <_scanf_i+0x11e>
 8004102:	6823      	ldr	r3, [r4, #0]
 8004104:	05d9      	lsls	r1, r3, #23
 8004106:	d50d      	bpl.n	8004124 <_scanf_i+0x180>
 8004108:	42bd      	cmp	r5, r7
 800410a:	d909      	bls.n	8004120 <_scanf_i+0x17c>
 800410c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004110:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004114:	4632      	mov	r2, r6
 8004116:	4650      	mov	r0, sl
 8004118:	4798      	blx	r3
 800411a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800411e:	464d      	mov	r5, r9
 8004120:	42bd      	cmp	r5, r7
 8004122:	d028      	beq.n	8004176 <_scanf_i+0x1d2>
 8004124:	6822      	ldr	r2, [r4, #0]
 8004126:	f012 0210 	ands.w	r2, r2, #16
 800412a:	d113      	bne.n	8004154 <_scanf_i+0x1b0>
 800412c:	702a      	strb	r2, [r5, #0]
 800412e:	6863      	ldr	r3, [r4, #4]
 8004130:	9e01      	ldr	r6, [sp, #4]
 8004132:	4639      	mov	r1, r7
 8004134:	4650      	mov	r0, sl
 8004136:	47b0      	blx	r6
 8004138:	f8d8 3000 	ldr.w	r3, [r8]
 800413c:	6821      	ldr	r1, [r4, #0]
 800413e:	1d1a      	adds	r2, r3, #4
 8004140:	f8c8 2000 	str.w	r2, [r8]
 8004144:	f011 0f20 	tst.w	r1, #32
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	d00f      	beq.n	800416c <_scanf_i+0x1c8>
 800414c:	6018      	str	r0, [r3, #0]
 800414e:	68e3      	ldr	r3, [r4, #12]
 8004150:	3301      	adds	r3, #1
 8004152:	60e3      	str	r3, [r4, #12]
 8004154:	1bed      	subs	r5, r5, r7
 8004156:	44ab      	add	fp, r5
 8004158:	6925      	ldr	r5, [r4, #16]
 800415a:	445d      	add	r5, fp
 800415c:	6125      	str	r5, [r4, #16]
 800415e:	2000      	movs	r0, #0
 8004160:	b007      	add	sp, #28
 8004162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004166:	f04f 0b00 	mov.w	fp, #0
 800416a:	e7ca      	b.n	8004102 <_scanf_i+0x15e>
 800416c:	07ca      	lsls	r2, r1, #31
 800416e:	bf4c      	ite	mi
 8004170:	8018      	strhmi	r0, [r3, #0]
 8004172:	6018      	strpl	r0, [r3, #0]
 8004174:	e7eb      	b.n	800414e <_scanf_i+0x1aa>
 8004176:	2001      	movs	r0, #1
 8004178:	e7f2      	b.n	8004160 <_scanf_i+0x1bc>
 800417a:	bf00      	nop
 800417c:	080048e0 	.word	0x080048e0
 8004180:	08004405 	.word	0x08004405
 8004184:	08004309 	.word	0x08004309
 8004188:	08004950 	.word	0x08004950

0800418c <__sccl>:
 800418c:	b570      	push	{r4, r5, r6, lr}
 800418e:	780b      	ldrb	r3, [r1, #0]
 8004190:	4604      	mov	r4, r0
 8004192:	2b5e      	cmp	r3, #94	; 0x5e
 8004194:	bf0b      	itete	eq
 8004196:	784b      	ldrbeq	r3, [r1, #1]
 8004198:	1c48      	addne	r0, r1, #1
 800419a:	1c88      	addeq	r0, r1, #2
 800419c:	2200      	movne	r2, #0
 800419e:	bf08      	it	eq
 80041a0:	2201      	moveq	r2, #1
 80041a2:	1e61      	subs	r1, r4, #1
 80041a4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80041a8:	f801 2f01 	strb.w	r2, [r1, #1]!
 80041ac:	42a9      	cmp	r1, r5
 80041ae:	d1fb      	bne.n	80041a8 <__sccl+0x1c>
 80041b0:	b90b      	cbnz	r3, 80041b6 <__sccl+0x2a>
 80041b2:	3801      	subs	r0, #1
 80041b4:	bd70      	pop	{r4, r5, r6, pc}
 80041b6:	f082 0101 	eor.w	r1, r2, #1
 80041ba:	54e1      	strb	r1, [r4, r3]
 80041bc:	1c42      	adds	r2, r0, #1
 80041be:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 80041c2:	2d2d      	cmp	r5, #45	; 0x2d
 80041c4:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
 80041c8:	4610      	mov	r0, r2
 80041ca:	d006      	beq.n	80041da <__sccl+0x4e>
 80041cc:	2d5d      	cmp	r5, #93	; 0x5d
 80041ce:	d0f1      	beq.n	80041b4 <__sccl+0x28>
 80041d0:	b90d      	cbnz	r5, 80041d6 <__sccl+0x4a>
 80041d2:	4630      	mov	r0, r6
 80041d4:	e7ee      	b.n	80041b4 <__sccl+0x28>
 80041d6:	462b      	mov	r3, r5
 80041d8:	e7ef      	b.n	80041ba <__sccl+0x2e>
 80041da:	7816      	ldrb	r6, [r2, #0]
 80041dc:	2e5d      	cmp	r6, #93	; 0x5d
 80041de:	d0fa      	beq.n	80041d6 <__sccl+0x4a>
 80041e0:	42b3      	cmp	r3, r6
 80041e2:	dcf8      	bgt.n	80041d6 <__sccl+0x4a>
 80041e4:	4618      	mov	r0, r3
 80041e6:	3001      	adds	r0, #1
 80041e8:	4286      	cmp	r6, r0
 80041ea:	5421      	strb	r1, [r4, r0]
 80041ec:	dcfb      	bgt.n	80041e6 <__sccl+0x5a>
 80041ee:	43d8      	mvns	r0, r3
 80041f0:	4430      	add	r0, r6
 80041f2:	1c5d      	adds	r5, r3, #1
 80041f4:	42b3      	cmp	r3, r6
 80041f6:	bfa8      	it	ge
 80041f8:	2000      	movge	r0, #0
 80041fa:	182b      	adds	r3, r5, r0
 80041fc:	3202      	adds	r2, #2
 80041fe:	e7de      	b.n	80041be <__sccl+0x32>

08004200 <_strtol_l.isra.0>:
 8004200:	2b01      	cmp	r3, #1
 8004202:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004206:	d001      	beq.n	800420c <_strtol_l.isra.0+0xc>
 8004208:	2b24      	cmp	r3, #36	; 0x24
 800420a:	d906      	bls.n	800421a <_strtol_l.isra.0+0x1a>
 800420c:	f7ff f930 	bl	8003470 <__errno>
 8004210:	2316      	movs	r3, #22
 8004212:	6003      	str	r3, [r0, #0]
 8004214:	2000      	movs	r0, #0
 8004216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800421a:	4f3a      	ldr	r7, [pc, #232]	; (8004304 <_strtol_l.isra.0+0x104>)
 800421c:	468e      	mov	lr, r1
 800421e:	4676      	mov	r6, lr
 8004220:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004224:	5de5      	ldrb	r5, [r4, r7]
 8004226:	f015 0508 	ands.w	r5, r5, #8
 800422a:	d1f8      	bne.n	800421e <_strtol_l.isra.0+0x1e>
 800422c:	2c2d      	cmp	r4, #45	; 0x2d
 800422e:	d134      	bne.n	800429a <_strtol_l.isra.0+0x9a>
 8004230:	f89e 4000 	ldrb.w	r4, [lr]
 8004234:	f04f 0801 	mov.w	r8, #1
 8004238:	f106 0e02 	add.w	lr, r6, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d05c      	beq.n	80042fa <_strtol_l.isra.0+0xfa>
 8004240:	2b10      	cmp	r3, #16
 8004242:	d10c      	bne.n	800425e <_strtol_l.isra.0+0x5e>
 8004244:	2c30      	cmp	r4, #48	; 0x30
 8004246:	d10a      	bne.n	800425e <_strtol_l.isra.0+0x5e>
 8004248:	f89e 4000 	ldrb.w	r4, [lr]
 800424c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004250:	2c58      	cmp	r4, #88	; 0x58
 8004252:	d14d      	bne.n	80042f0 <_strtol_l.isra.0+0xf0>
 8004254:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8004258:	2310      	movs	r3, #16
 800425a:	f10e 0e02 	add.w	lr, lr, #2
 800425e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8004262:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8004266:	2600      	movs	r6, #0
 8004268:	fbbc f9f3 	udiv	r9, ip, r3
 800426c:	4635      	mov	r5, r6
 800426e:	fb03 ca19 	mls	sl, r3, r9, ip
 8004272:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8004276:	2f09      	cmp	r7, #9
 8004278:	d818      	bhi.n	80042ac <_strtol_l.isra.0+0xac>
 800427a:	463c      	mov	r4, r7
 800427c:	42a3      	cmp	r3, r4
 800427e:	dd24      	ble.n	80042ca <_strtol_l.isra.0+0xca>
 8004280:	2e00      	cmp	r6, #0
 8004282:	db1f      	blt.n	80042c4 <_strtol_l.isra.0+0xc4>
 8004284:	45a9      	cmp	r9, r5
 8004286:	d31d      	bcc.n	80042c4 <_strtol_l.isra.0+0xc4>
 8004288:	d101      	bne.n	800428e <_strtol_l.isra.0+0x8e>
 800428a:	45a2      	cmp	sl, r4
 800428c:	db1a      	blt.n	80042c4 <_strtol_l.isra.0+0xc4>
 800428e:	fb05 4503 	mla	r5, r5, r3, r4
 8004292:	2601      	movs	r6, #1
 8004294:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004298:	e7eb      	b.n	8004272 <_strtol_l.isra.0+0x72>
 800429a:	2c2b      	cmp	r4, #43	; 0x2b
 800429c:	bf08      	it	eq
 800429e:	f89e 4000 	ldrbeq.w	r4, [lr]
 80042a2:	46a8      	mov	r8, r5
 80042a4:	bf08      	it	eq
 80042a6:	f106 0e02 	addeq.w	lr, r6, #2
 80042aa:	e7c7      	b.n	800423c <_strtol_l.isra.0+0x3c>
 80042ac:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80042b0:	2f19      	cmp	r7, #25
 80042b2:	d801      	bhi.n	80042b8 <_strtol_l.isra.0+0xb8>
 80042b4:	3c37      	subs	r4, #55	; 0x37
 80042b6:	e7e1      	b.n	800427c <_strtol_l.isra.0+0x7c>
 80042b8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80042bc:	2f19      	cmp	r7, #25
 80042be:	d804      	bhi.n	80042ca <_strtol_l.isra.0+0xca>
 80042c0:	3c57      	subs	r4, #87	; 0x57
 80042c2:	e7db      	b.n	800427c <_strtol_l.isra.0+0x7c>
 80042c4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80042c8:	e7e4      	b.n	8004294 <_strtol_l.isra.0+0x94>
 80042ca:	2e00      	cmp	r6, #0
 80042cc:	da05      	bge.n	80042da <_strtol_l.isra.0+0xda>
 80042ce:	2322      	movs	r3, #34	; 0x22
 80042d0:	6003      	str	r3, [r0, #0]
 80042d2:	4665      	mov	r5, ip
 80042d4:	b942      	cbnz	r2, 80042e8 <_strtol_l.isra.0+0xe8>
 80042d6:	4628      	mov	r0, r5
 80042d8:	e79d      	b.n	8004216 <_strtol_l.isra.0+0x16>
 80042da:	f1b8 0f00 	cmp.w	r8, #0
 80042de:	d000      	beq.n	80042e2 <_strtol_l.isra.0+0xe2>
 80042e0:	426d      	negs	r5, r5
 80042e2:	2a00      	cmp	r2, #0
 80042e4:	d0f7      	beq.n	80042d6 <_strtol_l.isra.0+0xd6>
 80042e6:	b10e      	cbz	r6, 80042ec <_strtol_l.isra.0+0xec>
 80042e8:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 80042ec:	6011      	str	r1, [r2, #0]
 80042ee:	e7f2      	b.n	80042d6 <_strtol_l.isra.0+0xd6>
 80042f0:	2430      	movs	r4, #48	; 0x30
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1b3      	bne.n	800425e <_strtol_l.isra.0+0x5e>
 80042f6:	2308      	movs	r3, #8
 80042f8:	e7b1      	b.n	800425e <_strtol_l.isra.0+0x5e>
 80042fa:	2c30      	cmp	r4, #48	; 0x30
 80042fc:	d0a4      	beq.n	8004248 <_strtol_l.isra.0+0x48>
 80042fe:	230a      	movs	r3, #10
 8004300:	e7ad      	b.n	800425e <_strtol_l.isra.0+0x5e>
 8004302:	bf00      	nop
 8004304:	08004953 	.word	0x08004953

08004308 <_strtol_r>:
 8004308:	f7ff bf7a 	b.w	8004200 <_strtol_l.isra.0>

0800430c <_strtoul_l.isra.0>:
 800430c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004310:	4e3b      	ldr	r6, [pc, #236]	; (8004400 <_strtoul_l.isra.0+0xf4>)
 8004312:	4686      	mov	lr, r0
 8004314:	468c      	mov	ip, r1
 8004316:	4660      	mov	r0, ip
 8004318:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800431c:	5da5      	ldrb	r5, [r4, r6]
 800431e:	f015 0508 	ands.w	r5, r5, #8
 8004322:	d1f8      	bne.n	8004316 <_strtoul_l.isra.0+0xa>
 8004324:	2c2d      	cmp	r4, #45	; 0x2d
 8004326:	d134      	bne.n	8004392 <_strtoul_l.isra.0+0x86>
 8004328:	f89c 4000 	ldrb.w	r4, [ip]
 800432c:	f04f 0801 	mov.w	r8, #1
 8004330:	f100 0c02 	add.w	ip, r0, #2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d05e      	beq.n	80043f6 <_strtoul_l.isra.0+0xea>
 8004338:	2b10      	cmp	r3, #16
 800433a:	d10c      	bne.n	8004356 <_strtoul_l.isra.0+0x4a>
 800433c:	2c30      	cmp	r4, #48	; 0x30
 800433e:	d10a      	bne.n	8004356 <_strtoul_l.isra.0+0x4a>
 8004340:	f89c 0000 	ldrb.w	r0, [ip]
 8004344:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004348:	2858      	cmp	r0, #88	; 0x58
 800434a:	d14f      	bne.n	80043ec <_strtoul_l.isra.0+0xe0>
 800434c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8004350:	2310      	movs	r3, #16
 8004352:	f10c 0c02 	add.w	ip, ip, #2
 8004356:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800435a:	2500      	movs	r5, #0
 800435c:	fbb7 f7f3 	udiv	r7, r7, r3
 8004360:	fb03 f907 	mul.w	r9, r3, r7
 8004364:	ea6f 0909 	mvn.w	r9, r9
 8004368:	4628      	mov	r0, r5
 800436a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800436e:	2e09      	cmp	r6, #9
 8004370:	d818      	bhi.n	80043a4 <_strtoul_l.isra.0+0x98>
 8004372:	4634      	mov	r4, r6
 8004374:	42a3      	cmp	r3, r4
 8004376:	dd24      	ble.n	80043c2 <_strtoul_l.isra.0+0xb6>
 8004378:	2d00      	cmp	r5, #0
 800437a:	db1f      	blt.n	80043bc <_strtoul_l.isra.0+0xb0>
 800437c:	4287      	cmp	r7, r0
 800437e:	d31d      	bcc.n	80043bc <_strtoul_l.isra.0+0xb0>
 8004380:	d101      	bne.n	8004386 <_strtoul_l.isra.0+0x7a>
 8004382:	45a1      	cmp	r9, r4
 8004384:	db1a      	blt.n	80043bc <_strtoul_l.isra.0+0xb0>
 8004386:	fb00 4003 	mla	r0, r0, r3, r4
 800438a:	2501      	movs	r5, #1
 800438c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8004390:	e7eb      	b.n	800436a <_strtoul_l.isra.0+0x5e>
 8004392:	2c2b      	cmp	r4, #43	; 0x2b
 8004394:	bf08      	it	eq
 8004396:	f89c 4000 	ldrbeq.w	r4, [ip]
 800439a:	46a8      	mov	r8, r5
 800439c:	bf08      	it	eq
 800439e:	f100 0c02 	addeq.w	ip, r0, #2
 80043a2:	e7c7      	b.n	8004334 <_strtoul_l.isra.0+0x28>
 80043a4:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80043a8:	2e19      	cmp	r6, #25
 80043aa:	d801      	bhi.n	80043b0 <_strtoul_l.isra.0+0xa4>
 80043ac:	3c37      	subs	r4, #55	; 0x37
 80043ae:	e7e1      	b.n	8004374 <_strtoul_l.isra.0+0x68>
 80043b0:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80043b4:	2e19      	cmp	r6, #25
 80043b6:	d804      	bhi.n	80043c2 <_strtoul_l.isra.0+0xb6>
 80043b8:	3c57      	subs	r4, #87	; 0x57
 80043ba:	e7db      	b.n	8004374 <_strtoul_l.isra.0+0x68>
 80043bc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80043c0:	e7e4      	b.n	800438c <_strtoul_l.isra.0+0x80>
 80043c2:	2d00      	cmp	r5, #0
 80043c4:	da07      	bge.n	80043d6 <_strtoul_l.isra.0+0xca>
 80043c6:	2322      	movs	r3, #34	; 0x22
 80043c8:	f8ce 3000 	str.w	r3, [lr]
 80043cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043d0:	b942      	cbnz	r2, 80043e4 <_strtoul_l.isra.0+0xd8>
 80043d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80043d6:	f1b8 0f00 	cmp.w	r8, #0
 80043da:	d000      	beq.n	80043de <_strtoul_l.isra.0+0xd2>
 80043dc:	4240      	negs	r0, r0
 80043de:	2a00      	cmp	r2, #0
 80043e0:	d0f7      	beq.n	80043d2 <_strtoul_l.isra.0+0xc6>
 80043e2:	b10d      	cbz	r5, 80043e8 <_strtoul_l.isra.0+0xdc>
 80043e4:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80043e8:	6011      	str	r1, [r2, #0]
 80043ea:	e7f2      	b.n	80043d2 <_strtoul_l.isra.0+0xc6>
 80043ec:	2430      	movs	r4, #48	; 0x30
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1b1      	bne.n	8004356 <_strtoul_l.isra.0+0x4a>
 80043f2:	2308      	movs	r3, #8
 80043f4:	e7af      	b.n	8004356 <_strtoul_l.isra.0+0x4a>
 80043f6:	2c30      	cmp	r4, #48	; 0x30
 80043f8:	d0a2      	beq.n	8004340 <_strtoul_l.isra.0+0x34>
 80043fa:	230a      	movs	r3, #10
 80043fc:	e7ab      	b.n	8004356 <_strtoul_l.isra.0+0x4a>
 80043fe:	bf00      	nop
 8004400:	08004953 	.word	0x08004953

08004404 <_strtoul_r>:
 8004404:	f7ff bf82 	b.w	800430c <_strtoul_l.isra.0>

08004408 <__submore>:
 8004408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800440c:	460c      	mov	r4, r1
 800440e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004410:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004414:	4299      	cmp	r1, r3
 8004416:	d11d      	bne.n	8004454 <__submore+0x4c>
 8004418:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800441c:	f000 f8a8 	bl	8004570 <_malloc_r>
 8004420:	b918      	cbnz	r0, 800442a <__submore+0x22>
 8004422:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800442a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800442e:	63a3      	str	r3, [r4, #56]	; 0x38
 8004430:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8004434:	6360      	str	r0, [r4, #52]	; 0x34
 8004436:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800443a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800443e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8004442:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004446:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800444a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800444e:	6020      	str	r0, [r4, #0]
 8004450:	2000      	movs	r0, #0
 8004452:	e7e8      	b.n	8004426 <__submore+0x1e>
 8004454:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004456:	0077      	lsls	r7, r6, #1
 8004458:	463a      	mov	r2, r7
 800445a:	f000 f8e3 	bl	8004624 <_realloc_r>
 800445e:	4605      	mov	r5, r0
 8004460:	2800      	cmp	r0, #0
 8004462:	d0de      	beq.n	8004422 <__submore+0x1a>
 8004464:	eb00 0806 	add.w	r8, r0, r6
 8004468:	4601      	mov	r1, r0
 800446a:	4632      	mov	r2, r6
 800446c:	4640      	mov	r0, r8
 800446e:	f000 f807 	bl	8004480 <memcpy>
 8004472:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8004476:	f8c4 8000 	str.w	r8, [r4]
 800447a:	e7e9      	b.n	8004450 <__submore+0x48>

0800447c <__retarget_lock_acquire_recursive>:
 800447c:	4770      	bx	lr

0800447e <__retarget_lock_release_recursive>:
 800447e:	4770      	bx	lr

08004480 <memcpy>:
 8004480:	440a      	add	r2, r1
 8004482:	4291      	cmp	r1, r2
 8004484:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004488:	d100      	bne.n	800448c <memcpy+0xc>
 800448a:	4770      	bx	lr
 800448c:	b510      	push	{r4, lr}
 800448e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004492:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004496:	4291      	cmp	r1, r2
 8004498:	d1f9      	bne.n	800448e <memcpy+0xe>
 800449a:	bd10      	pop	{r4, pc}

0800449c <memmove>:
 800449c:	4288      	cmp	r0, r1
 800449e:	b510      	push	{r4, lr}
 80044a0:	eb01 0402 	add.w	r4, r1, r2
 80044a4:	d902      	bls.n	80044ac <memmove+0x10>
 80044a6:	4284      	cmp	r4, r0
 80044a8:	4623      	mov	r3, r4
 80044aa:	d807      	bhi.n	80044bc <memmove+0x20>
 80044ac:	1e43      	subs	r3, r0, #1
 80044ae:	42a1      	cmp	r1, r4
 80044b0:	d008      	beq.n	80044c4 <memmove+0x28>
 80044b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80044b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80044ba:	e7f8      	b.n	80044ae <memmove+0x12>
 80044bc:	4402      	add	r2, r0
 80044be:	4601      	mov	r1, r0
 80044c0:	428a      	cmp	r2, r1
 80044c2:	d100      	bne.n	80044c6 <memmove+0x2a>
 80044c4:	bd10      	pop	{r4, pc}
 80044c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80044ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80044ce:	e7f7      	b.n	80044c0 <memmove+0x24>

080044d0 <_free_r>:
 80044d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80044d2:	2900      	cmp	r1, #0
 80044d4:	d048      	beq.n	8004568 <_free_r+0x98>
 80044d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044da:	9001      	str	r0, [sp, #4]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f1a1 0404 	sub.w	r4, r1, #4
 80044e2:	bfb8      	it	lt
 80044e4:	18e4      	addlt	r4, r4, r3
 80044e6:	f000 f8d3 	bl	8004690 <__malloc_lock>
 80044ea:	4a20      	ldr	r2, [pc, #128]	; (800456c <_free_r+0x9c>)
 80044ec:	9801      	ldr	r0, [sp, #4]
 80044ee:	6813      	ldr	r3, [r2, #0]
 80044f0:	4615      	mov	r5, r2
 80044f2:	b933      	cbnz	r3, 8004502 <_free_r+0x32>
 80044f4:	6063      	str	r3, [r4, #4]
 80044f6:	6014      	str	r4, [r2, #0]
 80044f8:	b003      	add	sp, #12
 80044fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80044fe:	f000 b8cd 	b.w	800469c <__malloc_unlock>
 8004502:	42a3      	cmp	r3, r4
 8004504:	d90b      	bls.n	800451e <_free_r+0x4e>
 8004506:	6821      	ldr	r1, [r4, #0]
 8004508:	1862      	adds	r2, r4, r1
 800450a:	4293      	cmp	r3, r2
 800450c:	bf04      	itt	eq
 800450e:	681a      	ldreq	r2, [r3, #0]
 8004510:	685b      	ldreq	r3, [r3, #4]
 8004512:	6063      	str	r3, [r4, #4]
 8004514:	bf04      	itt	eq
 8004516:	1852      	addeq	r2, r2, r1
 8004518:	6022      	streq	r2, [r4, #0]
 800451a:	602c      	str	r4, [r5, #0]
 800451c:	e7ec      	b.n	80044f8 <_free_r+0x28>
 800451e:	461a      	mov	r2, r3
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	b10b      	cbz	r3, 8004528 <_free_r+0x58>
 8004524:	42a3      	cmp	r3, r4
 8004526:	d9fa      	bls.n	800451e <_free_r+0x4e>
 8004528:	6811      	ldr	r1, [r2, #0]
 800452a:	1855      	adds	r5, r2, r1
 800452c:	42a5      	cmp	r5, r4
 800452e:	d10b      	bne.n	8004548 <_free_r+0x78>
 8004530:	6824      	ldr	r4, [r4, #0]
 8004532:	4421      	add	r1, r4
 8004534:	1854      	adds	r4, r2, r1
 8004536:	42a3      	cmp	r3, r4
 8004538:	6011      	str	r1, [r2, #0]
 800453a:	d1dd      	bne.n	80044f8 <_free_r+0x28>
 800453c:	681c      	ldr	r4, [r3, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	6053      	str	r3, [r2, #4]
 8004542:	4421      	add	r1, r4
 8004544:	6011      	str	r1, [r2, #0]
 8004546:	e7d7      	b.n	80044f8 <_free_r+0x28>
 8004548:	d902      	bls.n	8004550 <_free_r+0x80>
 800454a:	230c      	movs	r3, #12
 800454c:	6003      	str	r3, [r0, #0]
 800454e:	e7d3      	b.n	80044f8 <_free_r+0x28>
 8004550:	6825      	ldr	r5, [r4, #0]
 8004552:	1961      	adds	r1, r4, r5
 8004554:	428b      	cmp	r3, r1
 8004556:	bf04      	itt	eq
 8004558:	6819      	ldreq	r1, [r3, #0]
 800455a:	685b      	ldreq	r3, [r3, #4]
 800455c:	6063      	str	r3, [r4, #4]
 800455e:	bf04      	itt	eq
 8004560:	1949      	addeq	r1, r1, r5
 8004562:	6021      	streq	r1, [r4, #0]
 8004564:	6054      	str	r4, [r2, #4]
 8004566:	e7c7      	b.n	80044f8 <_free_r+0x28>
 8004568:	b003      	add	sp, #12
 800456a:	bd30      	pop	{r4, r5, pc}
 800456c:	20000388 	.word	0x20000388

08004570 <_malloc_r>:
 8004570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004572:	1ccd      	adds	r5, r1, #3
 8004574:	f025 0503 	bic.w	r5, r5, #3
 8004578:	3508      	adds	r5, #8
 800457a:	2d0c      	cmp	r5, #12
 800457c:	bf38      	it	cc
 800457e:	250c      	movcc	r5, #12
 8004580:	2d00      	cmp	r5, #0
 8004582:	4606      	mov	r6, r0
 8004584:	db01      	blt.n	800458a <_malloc_r+0x1a>
 8004586:	42a9      	cmp	r1, r5
 8004588:	d903      	bls.n	8004592 <_malloc_r+0x22>
 800458a:	230c      	movs	r3, #12
 800458c:	6033      	str	r3, [r6, #0]
 800458e:	2000      	movs	r0, #0
 8004590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004592:	f000 f87d 	bl	8004690 <__malloc_lock>
 8004596:	4921      	ldr	r1, [pc, #132]	; (800461c <_malloc_r+0xac>)
 8004598:	680a      	ldr	r2, [r1, #0]
 800459a:	4614      	mov	r4, r2
 800459c:	b99c      	cbnz	r4, 80045c6 <_malloc_r+0x56>
 800459e:	4f20      	ldr	r7, [pc, #128]	; (8004620 <_malloc_r+0xb0>)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	b923      	cbnz	r3, 80045ae <_malloc_r+0x3e>
 80045a4:	4621      	mov	r1, r4
 80045a6:	4630      	mov	r0, r6
 80045a8:	f000 f862 	bl	8004670 <_sbrk_r>
 80045ac:	6038      	str	r0, [r7, #0]
 80045ae:	4629      	mov	r1, r5
 80045b0:	4630      	mov	r0, r6
 80045b2:	f000 f85d 	bl	8004670 <_sbrk_r>
 80045b6:	1c43      	adds	r3, r0, #1
 80045b8:	d123      	bne.n	8004602 <_malloc_r+0x92>
 80045ba:	230c      	movs	r3, #12
 80045bc:	6033      	str	r3, [r6, #0]
 80045be:	4630      	mov	r0, r6
 80045c0:	f000 f86c 	bl	800469c <__malloc_unlock>
 80045c4:	e7e3      	b.n	800458e <_malloc_r+0x1e>
 80045c6:	6823      	ldr	r3, [r4, #0]
 80045c8:	1b5b      	subs	r3, r3, r5
 80045ca:	d417      	bmi.n	80045fc <_malloc_r+0x8c>
 80045cc:	2b0b      	cmp	r3, #11
 80045ce:	d903      	bls.n	80045d8 <_malloc_r+0x68>
 80045d0:	6023      	str	r3, [r4, #0]
 80045d2:	441c      	add	r4, r3
 80045d4:	6025      	str	r5, [r4, #0]
 80045d6:	e004      	b.n	80045e2 <_malloc_r+0x72>
 80045d8:	6863      	ldr	r3, [r4, #4]
 80045da:	42a2      	cmp	r2, r4
 80045dc:	bf0c      	ite	eq
 80045de:	600b      	streq	r3, [r1, #0]
 80045e0:	6053      	strne	r3, [r2, #4]
 80045e2:	4630      	mov	r0, r6
 80045e4:	f000 f85a 	bl	800469c <__malloc_unlock>
 80045e8:	f104 000b 	add.w	r0, r4, #11
 80045ec:	1d23      	adds	r3, r4, #4
 80045ee:	f020 0007 	bic.w	r0, r0, #7
 80045f2:	1ac2      	subs	r2, r0, r3
 80045f4:	d0cc      	beq.n	8004590 <_malloc_r+0x20>
 80045f6:	1a1b      	subs	r3, r3, r0
 80045f8:	50a3      	str	r3, [r4, r2]
 80045fa:	e7c9      	b.n	8004590 <_malloc_r+0x20>
 80045fc:	4622      	mov	r2, r4
 80045fe:	6864      	ldr	r4, [r4, #4]
 8004600:	e7cc      	b.n	800459c <_malloc_r+0x2c>
 8004602:	1cc4      	adds	r4, r0, #3
 8004604:	f024 0403 	bic.w	r4, r4, #3
 8004608:	42a0      	cmp	r0, r4
 800460a:	d0e3      	beq.n	80045d4 <_malloc_r+0x64>
 800460c:	1a21      	subs	r1, r4, r0
 800460e:	4630      	mov	r0, r6
 8004610:	f000 f82e 	bl	8004670 <_sbrk_r>
 8004614:	3001      	adds	r0, #1
 8004616:	d1dd      	bne.n	80045d4 <_malloc_r+0x64>
 8004618:	e7cf      	b.n	80045ba <_malloc_r+0x4a>
 800461a:	bf00      	nop
 800461c:	20000388 	.word	0x20000388
 8004620:	2000038c 	.word	0x2000038c

08004624 <_realloc_r>:
 8004624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004626:	4607      	mov	r7, r0
 8004628:	4614      	mov	r4, r2
 800462a:	460e      	mov	r6, r1
 800462c:	b921      	cbnz	r1, 8004638 <_realloc_r+0x14>
 800462e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004632:	4611      	mov	r1, r2
 8004634:	f7ff bf9c 	b.w	8004570 <_malloc_r>
 8004638:	b922      	cbnz	r2, 8004644 <_realloc_r+0x20>
 800463a:	f7ff ff49 	bl	80044d0 <_free_r>
 800463e:	4625      	mov	r5, r4
 8004640:	4628      	mov	r0, r5
 8004642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004644:	f000 f830 	bl	80046a8 <_malloc_usable_size_r>
 8004648:	42a0      	cmp	r0, r4
 800464a:	d20f      	bcs.n	800466c <_realloc_r+0x48>
 800464c:	4621      	mov	r1, r4
 800464e:	4638      	mov	r0, r7
 8004650:	f7ff ff8e 	bl	8004570 <_malloc_r>
 8004654:	4605      	mov	r5, r0
 8004656:	2800      	cmp	r0, #0
 8004658:	d0f2      	beq.n	8004640 <_realloc_r+0x1c>
 800465a:	4631      	mov	r1, r6
 800465c:	4622      	mov	r2, r4
 800465e:	f7ff ff0f 	bl	8004480 <memcpy>
 8004662:	4631      	mov	r1, r6
 8004664:	4638      	mov	r0, r7
 8004666:	f7ff ff33 	bl	80044d0 <_free_r>
 800466a:	e7e9      	b.n	8004640 <_realloc_r+0x1c>
 800466c:	4635      	mov	r5, r6
 800466e:	e7e7      	b.n	8004640 <_realloc_r+0x1c>

08004670 <_sbrk_r>:
 8004670:	b538      	push	{r3, r4, r5, lr}
 8004672:	4d06      	ldr	r5, [pc, #24]	; (800468c <_sbrk_r+0x1c>)
 8004674:	2300      	movs	r3, #0
 8004676:	4604      	mov	r4, r0
 8004678:	4608      	mov	r0, r1
 800467a:	602b      	str	r3, [r5, #0]
 800467c:	f7fc f9f0 	bl	8000a60 <_sbrk>
 8004680:	1c43      	adds	r3, r0, #1
 8004682:	d102      	bne.n	800468a <_sbrk_r+0x1a>
 8004684:	682b      	ldr	r3, [r5, #0]
 8004686:	b103      	cbz	r3, 800468a <_sbrk_r+0x1a>
 8004688:	6023      	str	r3, [r4, #0]
 800468a:	bd38      	pop	{r3, r4, r5, pc}
 800468c:	20000398 	.word	0x20000398

08004690 <__malloc_lock>:
 8004690:	4801      	ldr	r0, [pc, #4]	; (8004698 <__malloc_lock+0x8>)
 8004692:	f7ff bef3 	b.w	800447c <__retarget_lock_acquire_recursive>
 8004696:	bf00      	nop
 8004698:	200003a0 	.word	0x200003a0

0800469c <__malloc_unlock>:
 800469c:	4801      	ldr	r0, [pc, #4]	; (80046a4 <__malloc_unlock+0x8>)
 800469e:	f7ff beee 	b.w	800447e <__retarget_lock_release_recursive>
 80046a2:	bf00      	nop
 80046a4:	200003a0 	.word	0x200003a0

080046a8 <_malloc_usable_size_r>:
 80046a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046ac:	1f18      	subs	r0, r3, #4
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	bfbc      	itt	lt
 80046b2:	580b      	ldrlt	r3, [r1, r0]
 80046b4:	18c0      	addlt	r0, r0, r3
 80046b6:	4770      	bx	lr

080046b8 <_init>:
 80046b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ba:	bf00      	nop
 80046bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046be:	bc08      	pop	{r3}
 80046c0:	469e      	mov	lr, r3
 80046c2:	4770      	bx	lr

080046c4 <_fini>:
 80046c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046c6:	bf00      	nop
 80046c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ca:	bc08      	pop	{r3}
 80046cc:	469e      	mov	lr, r3
 80046ce:	4770      	bx	lr
