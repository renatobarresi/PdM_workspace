/*
 * API_debounce.c
 *
 *  Created on: Mar 27, 2022
 *      Author: renato
 */


static debounceState_t estadoActual;

static bool_t;


/**
 * @brief This function is executed to initialize the LED and state
 * @params none
 * @retval none
 */
void debounceFSM_init(){
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
	estadoActual = BUTTON_UP;
}

/**
 * @brief executes the FSM
 * @params none
 * @retval none
 */
void debounceFSM_update(){

	uint8_t buttonState = BSP_PB_GetState(BUTTON_USER);

	switch(buttonState){
		case GPIO_PIN_SET:
			/*Update machine state*/
			estadoActual = BUTTON_FALLING;

			/*We wait 40ms to be sure the button is not debouncing anymore*/
			if(delayRead(&debounceDelay)){
				estadoActual = BUTTON_DOWN;
			}

			/*If the state is button_down, then we execute button pressed until button gets released*/
			while(BSP_PB_GetState(BUTTON_USER) && estadoActual == BUTTON_DOWN){
				buttonPressed();
			}

			break;

		case GPIO_PIN_RESET:
			estadoActual = BUTTON_UP;
			buttonReleased();
			break;
	}
}

/**
 * @brief toggles LED1 when the delay time has passed
 * @params none
 * @retval none
 */
void buttonPressed(){
	if(delayRead(&LEDDelay)){
		BSP_LED_Toggle(LED1);
	}
}

/**
 * @brief toggles LED3 when the delay time has passed
 * @params none
 * @retval none
 */
void buttonReleased(){
	if(delayRead(&LED3Delay)){
		BSP_LED_Toggle(LED3);
	}
}
